<!-- Copyright (C) 2007 Google Inc.
  -
  - Licensed under the Apache License, Version 2.0 (the "License");
  - you may not use this file except in compliance with the License.
  - You may obtain a copy of the License at
  -
  -      http://www.apache.org/licenses/LICENSE-2.0
  -
  - Unless required by applicable law or agreed to in writing, software
  - distributed under the License is distributed on an "AS IS" BASIS,
  - WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  - See the License for the specific language governing permissions and
  - limitations under the License.
 -->

<!--
  - For help, cd to the directory containing this file, run
  -    ant -p
  -
  - To build, cd to the directory containing this file, run
  -    ant <rulename>
  - and look for the output in ./ant-* directories.
  -
  - Valid values for <rulename> are:
  -   default   :  builds the plugin compiler (pluginc), tests, and docs
  -   clean     :  wipes generated files
  -   demos     :  demo files
  -   docs      :  javadoc
  -   jsdocs    :  jsdoc
  -   pluginc   :  the plugin compiler
  -   runtests  :  runs the tests
  -
  - To run with assertions enabled, set the environment variable ANT_FLAGS="-ea"
 -->

<project name="caja" default="default" basedir=".">
  <description>
  A subset of javascript that allow an application to securely embed plugins via
  a capability based security model.
  </description>

  <!--== inputs ==-->
  <property name="src"         location="src"/>
  <property name="tests"       location="tests"/>
  <property name="test.filter" value="*Test"/>
  <property name="third_party" location="third_party"/>
  <property name="demos"       location="src/com/google/caja/demos"/>
  <!--== outputs ==-->
  <property name="reports"     location="ant-reports"/>  <!-- emma reports -->
  <property name="instr"       location="ant-instr"/>  <!-- instrumented src -->
  <property name="lib"         location="ant-lib"/>
  <property name="docs"        location="ant-docs"/>
  <property name="ruledocs"    location="${docs}/rules"/>
  <property name="javadocs"    location="${docs}/java"/>
  <property name="jsdocs"      location="${docs}/js"/>
  <property name="jars"        location="ant-jars"/>
  <property name="www"         location="ant-www"/>  <!-- demo files dir -->

  <!--== classpaths ==-->
  <path id="classpath.compile">
    <pathelement path="${third_party}/java/htmlparser/htmlparser.jar"/>
    <pathelement path="${third_party}/java/jakarta_commons/commons-cli.jar"/>
    <pathelement path="${third_party}/java/json_simple/json_simple.jar"/>
    <pathelement path="${third_party}/java/jsdk2.1/servlet.jar"/>
    <pathelement path="${third_party}/java/jsdk2.1/server.jar"/>
  </path>
  <path id="classpath.run">
    <pathelement path="${lib}"/>
    <path refid="classpath.compile"/>
    <pathelement path="${third_party}/java/glassfish/mail.jar"/>
  </path>
  <path id="classpath.tests.compile">
    <pathelement path="${third_party}/java/junit/junit.jar"/>
    <pathelement path="${third_party}/java/json_simple/json_simple.jar"/>
    <pathelement path="${third_party}/java/rhino/js.jar"/>
    <pathelement path="${third_party}/java/jsdk2.1/servlet.jar"/>
  </path>
  <path id="classpath.tests.run">
    <pathelement path="${third_party}/java/emma/emma.jar"/>
    <pathelement path="${third_party}/java/htmlparser/htmlparser.jar"/>
    <path refid="classpath.tests.compile"/>
    <pathelement path="${instr}/classes"/>
    <!-- Must be last for coverage to work -->
    <path refid="classpath.run"/>
  </path>
  <path id="classpath.extensions">
    <pathelement path="${third_party}/java/emma/emma_ant.jar"/>
    <pathelement path="${third_party}/java/emma/emma.jar"/>
    <pathelement path="${third_party}/java/junit/junit.jar"/>
    <pathelement path="${third_party}/java/apache_ant/ant-junit.jar"/>
  </path>
  <path id="classpath.ant">
    <pathelement path="${ant.home}/lib/ant.jar"/>
  </path>
  <path id="classpath.javadocs">
    <path refid="classpath.compile"/>
    <path refid="classpath.ant"/>
  </path>
  <path id="classpath.jsdocs">
    <pathelement
     path="${third_party}/java/jsdoctoolkit_ant/jsdoctoolkit-0.3.jar"/>
    <pathelement path="${third_party}/java/rhino/js.jar"/>
  </path>

  <!--== Tasks Used Below ==-->
  <taskdef resource="emma_ant.properties"
    classpathref="classpath.extensions" />

  <taskdef name="junit"
    classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
    classpathref="classpath.extensions" />

  <taskdef name="jsdoctoolkit"
    classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit"
    classpathref="classpath.jsdocs" />

  <!--== rules.  Lowercase are public.  Uppercase are used internally. ==-->
  <target name="default" depends="jars"
   description="Builds the plugin compiler."/>

  <target name="all" depends="docs,jars,demos,runtests"
   description="Builds the plugin compiler, and documentation."/>

  <target name="clean"
   description="deletes all generated files leaving only sources">
    <delete dir="${reports}"/>
    <delete dir="${docs}"/>
    <delete dir="${instr}"/>
    <delete dir="${jars}"/>
    <delete dir="${lib}"/>
    <delete dir="${www}"/>
  </target>

  <target name="dirs">
    <mkdir dir="${reports}"/>
    <mkdir dir="${docs}"/>
    <mkdir dir="${instr}"/>
    <mkdir dir="${jars}"/>
    <mkdir dir="${lib}"/>
    <mkdir dir="${www}"/>
  </target>

  <target name="runtests" depends="AllTests"
   description="Runs unittests.  To filter tests: $ ant -Dtest.filter=My\*Test">
    <!-- Instrument the compiled class files to gather code coverage stats -->
    <emma enabled="${emma.enabled}">
      <instr instrpath="${lib}" destdir="${instr}" mode="fullcopy"
       metadatafile="${reports}/coverage/metadata.em" merge="true">
        <filter value="${emma.filter}"/>
      </instr>
    </emma>
    <mkdir dir="${reports}/tests"/>
    <!--
      - If this fails to run, try with -verbose.  If you see a problem with
      - forking, check your JAVA and JAVA_HOME environment variables and make
      - sure ant is using jdk1.6.
     -->
    <junit printsummary="yes" fork="yes" maxmemory="512m">
      <assertions><enable/></assertions>  <!-- ignored unless fork="yes" -->
      <classpath refid="classpath.tests.run"/>
      <formatter type="xml" usefile="true" unless="emma.enabled"/>
      <batchtest todir="${reports}/tests" unless="emma.enabled">
        <fileset dir="${tests}">
          <include name="**/${test.filter}.java"/>
        </fileset>
      </batchtest>
      <sysproperty key="emma.coverage.out.file"
       value="${reports}/coverage/coverage.ec"/>
      <sysproperty key="emma.coverage.out.merge" value="false"/>
      <test name="com.google.caja.AllTests" if="emma.enabled"/>
    </junit>
    <!-- Generate the code coverage report. -->
    <emma enabled="${emma.enabled}">
      <report sourcepath="${src}:${tests}" sort="+name"
       metrics="method:70,block:80,line:80,class:100">
        <fileset dir="${reports}/coverage">
          <include name="*.em" />
          <include name="*.ec" />
        </fileset>
        <html outfile="${reports}/coverage/index.html" encoding="UTF-8"/>
      </report>
    </emma>
    <!-- Generate the test results report. -->
    <junitreport todir="${reports}/tests">
      <fileset dir="${reports}/tests" includes="TEST-*.xml"/>
      <report format="frames" todir="${reports}/tests"
       styledir="${third_party}/ant/etc"/>
    </junitreport>
  </target>

  <target name="docs" description="Builds all Caja documentation."
   depends="javadocs,jsdocs,ruledocs">
  </target>

  <target name="javadocs" description="Builds javadoc documentation.">
    <mkdir dir="${javadocs}"/>
    <javadoc sourcepath="${src}" destdir="${javadocs}" access="private"
     author="true"
     bottom="Copyright (C) 2008 Google Inc.&lt;br&gt;
             &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;
             Licensed under the Apache License, Version 2.0&lt;/a&gt;"
     docencoding="utf-8"
     packagenames="com/google/caja/*"
     classpathref="classpath.javadocs"
     linksource="yes"/>
     <!-- overview="${src}/overview.html" -->
  </target>

  <target name="ruledocs" description="Builds Caja rule documentation."
   depends="RuleDoclet">
    <mkdir dir="${ruledocs}"/>
    <ruledoclet output="html" outputdir="${ruledocs}"
     rewriter="com.google.caja.parser.quasiliteral.DefaultCajaRewriter"/>
  </target>

  <target name="jsdocs" description="Builds jsdoc documentation.">
    <mkdir dir="${jsdocs}"/>
    <jsdoctoolkit jsdochome="${third_party}/java/jsdoctoolkit/"
     encoding="utf-8" template="jsdoc"
     includeundocumented="true" includeprivate="true" includeunderscored="true"
     outputdir="${jsdocs}">
      <source file="${src}/com/google/caja/JSON.js"/>
      <source file="${src}/com/google/caja/Brand-cajita.js"/>
      <source file="${src}/com/google/caja/Mint-cajita.js"/>
      <source file="${src}/com/google/caja/Q-caja.js"/>
      <source file="${src}/com/google/caja/caja.js"/>
      <source file="${src}/com/google/caja/caja-debugmode.js"/>
      <source file="${src}/com/google/caja/caja-prototype.js"/>
      <source file="${src}/com/google/caja/log-to-console.js"/>
      <source file="${src}/com/google/caja/permissive.js"/>
      <source file="${src}/com/google/caja/triv-logger.js"/>
      <source file="${src}/com/google/caja/plugin/html4-defs.js"/>
      <source file="${src}/com/google/caja/plugin/html-sanitizer.js"/>
      <source file="${src}/com/google/caja/plugin/html-emitter.js"/>
      <source file="${src}/com/google/caja/plugin/domita.js"/>
      <source file="${src}/com/google/caja/plugin/unicode.js"/>
    </jsdoctoolkit>
  </target>

  <target name="pluginc" depends="dirs,PluginCompiler,build.info"
   description="Build the plugin compiler and other main classes">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/opensocial/*.java"/>
      <include name="**/caja/opensocial/applet/ExpressionLanguageStage.java"/>
      <include name="**/caja/plugin/PluginCompilerMain.java"/>
    </javac>
    <!-- Now that we have the main method, build ant task wrappers -->
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.ant"/>
      <include name="**/caja/plugin/BuildServiceImplementation.java"/>
      <include name="**/caja/tools/*.java"/>
      <compilerarg line="-Xlint:deprecation"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
    <taskdef name="cajole" classname="com.google.caja.tools.CajoleAntTask"
     classpathref="classpath.run"/>
    <taskdef name="minify" classname="com.google.caja.tools.MinifyAntTask"
     classpathref="classpath.run"/>
    <taskdef name="genrule" classname="com.google.caja.tools.GenRuleAntTask"
     classpathref="classpath.run"/>
    <!-- Generate a schema of CSS properties for client side CSS validation. -->
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/plugin/CssPropertyPatterns.java"/>
    </javac>
    <genrule class="com.google.caja.plugin.CssPropertyPatterns$Builder">
      <job output="${lib}/com/google/caja/plugin/css-defs.js">
        <include file="${src}/com/google/caja/lang/css/css21.json"/>
        <depend file="${src}/com/google/caja/lang/css/css21-defs.json"/>
        <depend file="${src}/com/google/caja/lang/css/css21-whitelist.json"/>
        <include file="${src}/com/google/caja/lang/css/css21-fns.json"/>
        <depend file="${src}/com/google/caja/lang/css/css21-fns-defs.json"/>
        <depend file="${src}/com/google/caja/lang/css/css21-fns-whitelist.json"
         />
        <depend file="${src}/com/google/caja/plugin/CssPropertyPatterns"/>
      </job>
    </genrule>
  </target>

  <target name="jars" depends="pluginc,MinifiedJs"
   description="Place all jars needed to run the cajoler under ${jars}">
    <copy todir="${jars}">
      <fileset dir="${third_party}/java/jakarta_commons">
        <include name="commons-cli.jar"/>
      </fileset>
      <fileset dir="${third_party}/java/htmlparser">
        <include name="htmlparser.jar"/>
      </fileset>
      <fileset dir="${third_party}/java/json_simple">
        <include name="json_simple.jar"/>
      </fileset>
      <fileset dir="${third_party}/java/jsdk2.1">
        <include name="server.jar"/>
        <include name="servlet.jar"/>
      </fileset>
    </copy>
    <jar destfile="${jars}/pluginc.jar" basedir="${lib}">
      <manifest>
        <attribute name="Main-Class"
         value="com.google.caja.plugin.PluginCompilerMain"/>
      </manifest>
    </jar>
    <jar destfile="${jars}/pluginc-src.jar" basedir="${src}"/>
  </target>

  <target name="demos" depends="calendar,lolcat-search,testbed"
   description="Puts all the demo files together for easy browsing."/>

  <!-- Cajoles test resources that contain cajita to javascript. -->
  <target name="CajoledTests" depends="pluginc,dirs">
    <cajole>
      <job output="${lib}/com/google/caja/plugin/domita_test_cajoled.js">
        <include file="${tests}/com/google/caja/plugin/domita_test.js"/>
        <include file="${tests}/com/google/caja/plugin/asserts.js"/>
      </job>
    </cajole>
    <copy todir="${lib}">
      <fileset dir="${src}" includes="**/*.html"/>
      <fileset dir="${tests}" includes="**/*.html"/>
    </copy>
  </target>

  <target name="MinifiedJs" depends="pluginc">
    <minify>
      <job output="${lib}/com/google/caja/plugin/domita-minified.js">
        <include file="${src}/com/google/caja/caja.js"/>
        <include file="${src}/com/google/caja/plugin/unicode.js"/>
        <include file="${src}/com/google/caja/plugin/html4-defs.js"/>
        <include file="${lib}/com/google/caja/plugin/css-defs.js"/>
        <include file="${src}/com/google/caja/plugin/html-sanitizer.js"/>
        <include file="${src}/com/google/caja/plugin/html-emitter.js"/>
        <include file="${src}/com/google/caja/plugin/domita.js"/>
      </job>
    </minify>
  </target>

  <target name="AllTests" depends="pluginc,CajolingService,CajoledTests,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${tests}"/>
      <classpath refid="classpath.tests.compile"/>
      <include name="**/caja/AllTests.java"/>
      <include name="**/caja/util/*.java"/>
      <include name="**/caja/**/*Test.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>

    <!-- TODO(mikesamuel): Can we replace these tree copies with something
      - that builds a symlink tree? -->
    <copy todir="${lib}">
      <fileset dir="${src}">
        <include name="**/caja/caja.js"/>
        <include name="**/caja/caja-debugmode.js"/>
        <include name="**/caja/log-to-console.js"/>
        <include name="**/caja/demos/calendar/*.js"/>
        <include name="**/caja/opensocial/applet/testbed.js"/>
        <include name="**/caja/plugin/domita.js"/>
        <include name="**/caja/plugin/html4-defs.js"/>
        <include name="**/caja/plugin/html-emitter.js"/>
        <include name="**/caja/plugin/html-sanitizer.js"/>
        <include name="**/caja/plugin/unicode.js"/>
      </fileset>
      <fileset dir="${tests}">
        <include name="**/caja/**/*.css"/>
        <include name="**/caja/**/*.golden"/>
        <include name="**/caja/**/*.gxp"/>
        <include name="**/caja/**/*.html"/>
        <include name="**/caja/**/*.input"/>
        <include name="**/caja/**/*.js"/>
        <include name="**/caja/**/*.txt"/>
        <include name="**/caja/**/*.xml"/>
      </fileset>
      <fileset dir="${third_party}">
        <include name="js/jqueryjs/runtest/env.js"/>
      </fileset>
    </copy>
  </target>

  <target name="build.info">
    <tstamp>
      <format property="build.timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>
    <exec outputproperty="build.svnVersion"
     executable="svnversion"
     failonerror="false"
     failifexecutionfails="false"
     dir="."/>
    <echo append="false"
     file="${lib}/com/google/caja/reporting/buildInfo.properties"
     message="# Caja Build Information${line.separator}"/>
    <echo append="true"
     file="${lib}/com/google/caja/reporting/buildInfo.properties"
     message="svnVersion: ${build.svnVersion}${line.separator}"/>
    <echo append="true"
     file="${lib}/com/google/caja/reporting/buildInfo.properties"
     message="timestamp: ${build.timestamp}${line.separator}"/>
  </target>

  <target name="RuleDoclet" depends="Quasiliterals">
    <!-- HtmlRuleDoclet requires DOMImplementation from java 1.6 -->
    <javac destdir="${lib}" debug="true" target="1.5" source="1.6">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/quasiliteral/*Doclet.java"/>
      <include name="**/caja/tools/DocletAntTask.java"/>

      <compilerarg line="-Xlint:unchecked"/>
    </javac>
    <taskdef name="ruledoclet" classname="com.google.caja.tools.DocletAntTask"
     classpathref="classpath.run" onerror="ignore"/>
  </target>

  <target name="PluginCompiler"
   depends="CssParser,HtmlParser,Quasiliterals,Rendering,Schemas">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/plugin/*.java"/>
      <include name="**/caja/plugin/stages/*.java"/>

      <exclude name="**/caja/plugin/*Main.java"/>
      <exclude name="**/caja/plugin/BuildServiceImplementation.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
    <copy todir="${lib}">
      <fileset dir="${src}">
        <include name="**/caja/plugin/domita.js"/>
        <include name="**/caja/plugin/html4-defs.js"/>
        <include name="**/caja/plugin/html-sanitizer.js"/>
        <include name="**/caja/plugin/unicode.js"/>
        <include name="**/caja/plugin/plugin-base.js"/>
      </fileset>
    </copy>
  </target>

  <!-- Builds the cajoling service. -->
  <target name="CajolingService"
   depends="CssParser,HtmlParser,Quasiliterals,Rendering,Schemas">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/opensocial/service/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>


  <target name="Config" depends="Reporting">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/config/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Schemas" depends="dirs,Config">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/lang/*/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
    <copy todir="${lib}">
      <fileset dir="${src}">
        <include name="**/caja/lang/*/*.json"/>
      </fileset>
    </copy>
  </target>

  <target name="CssParser" depends="ParserCore,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/parser/css/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="HtmlParser" depends="ParserCore,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/parser/html/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="JsParser" depends="ParserCore,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/parser/ParserBase.java"/>
      <include name="**/caja/parser/js/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Quasiliterals" depends="JsParser,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/parser/quasiliteral/*.java" />
    </javac>
  </target>

  <target name="ParserCore" depends="Primitives,Reporting,Lexer,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/parser/*.java"/>
      <exclude name="**/caja/parser/ParserBase.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Lexer" depends="Primitives,Reporting,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/lexer/*.java"/>
      <include name="**/caja/lexer/escaping/*.java"/>
      <exclude name="**/caja/lexer/ExternalReference.java"/>
      <exclude name="**/caja/lexer/FilePosition.java"/>
      <exclude name="**/caja/lexer/InputSource.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Reporting" depends="Primitives,dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/CajaException.java"/>
      <include name="**/caja/reporting/*.java"/>
      <exclude name="**/caja/reporting/MessageContext.java"/>
      <exclude name="**/caja/reporting/MessagePart.java"/>
      <exclude name="**/caja/reporting/RenderContext.java"/>
      <exclude name="**/caja/reporting/Renderable.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Rendering" depends="Lexer,Reporting">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/render/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="Primitives" depends="dirs">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/lexer/ExternalReference.java"/>
      <include name="**/caja/lexer/FilePosition.java"/>
      <include name="**/caja/lexer/InputSource.java"/>
      <include name="**/caja/reporting/MessageContext.java"/>
      <include name="**/caja/reporting/MessagePart.java"/>
      <include name="**/caja/reporting/RenderContext.java"/>
      <include name="**/caja/reporting/Renderable.java"/>
      <include name="**/caja/util/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="lolcat-search" depends="dirs,pluginc,MinifiedJs"
   description="IM IN UR BUILD DEMOING UR GADGETZ">
    <cajole>
      <job output="${www}/lolcat-search/searchbox-cajoled.js">
        <include
         file="${demos}/lolcat-search/searchbox.html"/>
        <depend
         file="${demos}/lolcat-search/searchbox.css"/>
        <depend
         file="${demos}/lolcat-search/searchbox.js"/>
      </job>
      <job output="${www}/lolcat-search/kittens-cajoled.js">
        <include
         file="${demos}/lolcat-search/kittens.html"/>
        <depend
         file="${demos}/lolcat-search/katTranzlator.js"/>
        <depend
         file="${demos}/lolcat-search/kittens.css"/>
        <depend
         file="${demos}/lolcat-search/kittens.js"/>
      </job>
    </cajole>

    <copy todir="${www}/lolcat-search">
      <fileset dir="${demos}/lolcat-search">
        <include name="chtml.js"/>
        <include name="error.jpg"/>
        <include name="loading.jpg"/>
        <include name="search.html"/>
        <include name="searchengine.js"/>
      </fileset>
      <fileset dir="${lib}/com/google/caja/plugin">
        <include name="domita-minified.js"/>
      </fileset>
      <fileset dir="${src}/com/google/caja">
        <include name="log-to-console.js"/>
      </fileset>
      <fileset dir="${third_party}/js/firebug">
        <include name="firebugx.js"/>
      </fileset>
    </copy>
  </target>

  <target name="testbed" depends="dirs,jars"
   description="Produce an Applet that interactively cajoles in the browser.">
    <javac destdir="${lib}" debug="true" target="1.5" source="1.5">
      <src path="${src}"/>
      <classpath refid="classpath.compile"/>
      <include name="**/caja/opensocial/applet/*.java"/>
      <compilerarg line="-Xlint:unchecked"/>
    </javac>

    <jar destfile="${jars}/testbed.jar" basedir="${lib}">
      <manifest>
        <attribute name="Main-Class"
         value="com.google.caja.opensocial.applet.CajaApplet"/>
      </manifest>
    </jar>

    <mkdir dir="${www}/testbed"/>
    <copy todir="${www}/testbed">
      <fileset dir="${src}/com/google/caja">
        <include name="caja.js"/>
        <include name="caja-debugmode.js"/>
        <include name="log-to-console.js"/>
      </fileset>
      <fileset dir="${src}/com/google/caja/plugin">
        <include name="domita.js"/>
        <include name="html4-defs.js"/>
        <include name="html-emitter.js"/>
        <include name="html-sanitizer.js"/>
        <include name="unicode.js"/>
      </fileset>
      <fileset dir="${lib}/com/google/caja/plugin">
        <include name="css-defs.js"/>
      </fileset>
      <fileset dir="${src}/com/google/caja/opensocial/applet">
        <include name="*.html"/>
        <include name="*.js"/>
      </fileset>
      <fileset dir="${jars}">
        <include name="testbed.jar"/>
        <include name="htmlparser.jar"/>
        <include name="json_simple.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="calendar" depends="dirs,pluginc,MinifiedJs"
   description="A calendar that can mine data from a read only DOM.">
    <mkdir dir="${www}/calendar"/>

    <minify>
      <job
       output="${lib}/com/google/caja/demos/calendar/html-interp-minified.js">
        <include
         file="${demos}/calendar/string-interpolation.js"/>
        <include file="${demos}/calendar/html-interp.js"/>
      </job>
      <job output="${lib}/com/google/caja/demos/calendar/calendar-minified.js">
        <include file="${demos}/calendar/util.js"/>
        <include file="${demos}/calendar/bitset.js"/>
        <include file="${src}/com/google/caja/plugin/html4-defs.js"/>
        <include file="${src}/com/google/caja/plugin/html-sanitizer.js"/>
        <include file="${demos}/calendar/uformat.js"/>
        <include file="${demos}/calendar/time-cajita.js"/>
        <include file="${demos}/calendar/weekday-cajita.js"/>
        <include file="${demos}/calendar/timezone-cajita.js"/>
        <include file="${demos}/calendar/time_util-cajita.js"/>
        <include file="${demos}/calendar/hcalendar.js"/>
        <include file="${demos}/calendar/generators-cajita.js"/>
        <include file="${demos}/calendar/instanceGenerators-cajita.js"/>
        <include file="${demos}/calendar/conditions-cajita.js"/>
        <include file="${demos}/calendar/predicates-cajita.js"/>
        <include file="${demos}/calendar/filters-cajita.js"/>
        <include file="${demos}/calendar/rrule-cajita.js"/>
        <include file="${demos}/calendar/event.js"/>
        <include file="${demos}/calendar/chip.js"/>
        <include file="${demos}/calendar/calendar.js"/>
        <include file="${demos}/calendar/event_store.js"/>
        <include file="${demos}/calendar/axis.js"/>
        <include file="${demos}/calendar/layout_policy.js"/>
        <include file="${demos}/calendar/layout.js"/>
        <include file="${demos}/calendar/overlap.js"/>
        <include file="${demos}/calendar/widget.js"/>
        <include file="${demos}/calendar/widget-html.js"/>
        <include file="${demos}/calendar/main.js"/>
      </job>
    </minify>
    <cajole debug="false">
      <job output="${lib}/com/google/caja/demos/calendar/calendar-cajoled.js">
        <include file="${demos}/calendar/util.js"/>
        <include file="${demos}/calendar/bitset.js"/>
        <include file="${src}/com/google/caja/plugin/html4-defs.js"/>
        <include file="${src}/com/google/caja/plugin/html-sanitizer.js"/>
        <include file="${demos}/calendar/uformat.js"/>
        <include file="${demos}/calendar/time-cajita.js"/>
        <include file="${demos}/calendar/weekday-cajita.js"/>
        <include file="${demos}/calendar/timezone-cajita.js"/>
        <include file="${demos}/calendar/time_util-cajita.js"/>
        <include file="${demos}/calendar/hcalendar.js"/>
        <include file="${demos}/calendar/generators-cajita.js"/>
        <include file="${demos}/calendar/instanceGenerators-cajita.js"/>
        <include file="${demos}/calendar/conditions-cajita.js"/>
        <include file="${demos}/calendar/predicates-cajita.js"/>
        <include file="${demos}/calendar/filters-cajita.js"/>
        <include file="${demos}/calendar/rrule-cajita.js"/>
        <include file="${demos}/calendar/event.js"/>
        <include file="${demos}/calendar/chip.js"/>
        <include file="${demos}/calendar/calendar.js"/>
        <include file="${demos}/calendar/event_store.js"/>
        <include file="${demos}/calendar/axis.js"/>
        <include file="${demos}/calendar/layout_policy.js"/>
        <include file="${demos}/calendar/layout.js"/>
        <include file="${demos}/calendar/overlap.js"/>
        <include file="${demos}/calendar/widget.css"/>
        <include file="${demos}/calendar/widget.js"/>
        <include file="${demos}/calendar/widget-html.js"/>
        <include file="${demos}/calendar/main.js"/>
      </job>
    </cajole>

    <copy todir="${www}/calendar">
      <fileset dir="${src}/com/google/caja">
        <include name="caja.js"/>
        <include name="caja-debugmode.js"/>
      </fileset>
      <fileset dir="${lib}/com/google/caja/demos/calendar">
        <include name="*-minified.js"/>
        <include name="*-cajoled.js"/>
      </fileset>
      <fileset dir="${demos}/calendar">
        <include name="demo.html"/>
        <include name="demo-cajoled.html"/>
        <include name="widget.css"/>
      </fileset>
      <fileset dir="${lib}/com/google/caja/plugin">
        <include name="domita-minified.js"/>
      </fileset>
      <fileset dir="${third_party}/js/firebug">
        <include name="firebugx.js"/>
      </fileset>
    </copy>
  </target>

  <!--
    - Enable Emma
    -
    - See
    - * http://wiki.metawerx.net/Wiki.jsp
    -   ?page=UsingEMMAWithANTForJUnitTestCoverageReporting
    - * http://emma.sourceforge.net/reference_single/reference.html#tool-ref.run
   -->
  <target name="emma" depends="dirs"
   description="Turns on EMMA instrumentation and reporting.">
    <property name="emma.enabled" value="true" />
    <!--
      - See http://emma.sourceforge.net/reference/ch02s06s02.html
      - This property can be overriden via -Demma.filter=<list of filter specs>
      - on ANT's command line, will set the coverage filter; by default, all
      - com.google classes found in ${lib} will be instrumented.
      - org.commons.cli.apache and other third_party classes will not be.
     -->
    <property name="emma.filter" value="com.google.*"/>
  </target>

</project>

// Copyright (C) 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.caja.tools;

import com.google.caja.parser.quasiliteral.DojoRuleDoclet;
import com.google.caja.parser.quasiliteral.HtmlRuleDoclet;
import com.google.caja.parser.quasiliteral.JsonRuleDoclet;
import com.google.caja.parser.quasiliteral.Rewriter;
import com.google.caja.parser.quasiliteral.RuleDoclet;
import com.google.caja.parser.quasiliteral.TextRuleDoclet;
import com.google.caja.parser.quasiliteral.WikiRuleDoclet;

import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.Task;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

/**
 * ANT task that extracts and generates documentation on rewrite rules
 *
 * @author jasvir@gmail.com (Jasvir Nagra)
 */
public class DocletAntTask extends Task {

  private String outputDir;
  private RuleDoclet output;
  private Rewriter rewriter;
  
  public void setOutputDir(String outputDir) {
    this.outputDir = outputDir;
  }

  /**
   * Sets the type of output generated by the doclet
   * @param output Valid options are text|html|wiki|json
   */
  public void setOutput(String output) {
    if(output.equals("text")) {
      this.output = new TextRuleDoclet();      
    } else if(output.equals("html")) {
      this.output = new HtmlRuleDoclet();      
    } else if(output.equals("json")) {
      this.output = new JsonRuleDoclet();      
    } else if(output.equals("text")) {
      this.output = new WikiRuleDoclet();      
    } else if(output.equals("dojo")) {
      this.output = new DojoRuleDoclet();      
    } else {
      throw new BuildException("Unsupported doclet type");
    }
  }

  public void setRewriter(String rewriter) {
    try {
      this.rewriter = (Rewriter)Class.forName(rewriter).newInstance();
    } catch (InstantiationException e) {
      throw new BuildException(e);
    } catch (IllegalAccessException e) {
      throw new BuildException(e);
    } catch (ClassNotFoundException e) {
      throw new BuildException(e);
    }
  }

  private void checkValidParameters() {
    if (null == output) {
      throw new BuildException("Doclet \"output\" type not set");
    }
    if (null == rewriter) {
      throw new BuildException("Doclet \"rewriter\" not set");
    }
    if (null == outputDir) {
      throw new BuildException("Doclet \"outputDir\" not set");
    }
  }

  /**
   * Constructs output file name for a given rewriter and output directory
   */
  private String getOutputFileName() {
    String simpleFileName = rewriter.getClass().getSimpleName();
    String dirFileName = outputDir.endsWith("/") 
       ? outputDir + simpleFileName 
       : outputDir + '/' + simpleFileName;
    String completeFileName = dirFileName + '.' + output.getDefaultExtension();
    return completeFileName;
    
  }
  
  @Override
  public void execute() throws BuildException {
    try {
      checkValidParameters();
      output.setRewriter(rewriter);
      String outputFile = getOutputFileName();
      BufferedWriter outputStream = new BufferedWriter(new FileWriter(outputFile));
      output.generateDocumentation(outputStream);
      outputStream.close();
    } catch (IOException e) {
      throw new BuildException(e);
    }
  }  
}
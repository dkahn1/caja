<report id="20080531T050420">
<varz name="time" value="1212210260"/>
<target name="update">
  <log>U    src/java/com/google/caja/lexer/escaping/Escaping.java
U    src/java/com/google/caja/lexer/NumberRecognizer.java
U    src/java/com/google/caja/lexer/CssLexer.java
U    src/java/com/google/caja/render/Concatenator.java
U    src/java/com/google/caja/render/CssPrettyPrinter.java
U    src/java/com/google/caja/render/JsMinimalPrinter.java
U    src/java/com/google/caja/render/JsPrettyPrinter.java
A    src/java/com/google/caja/render/AbstractRenderer.java
U    src/java/com/google/caja/demos/lolcat-search/search.html
U    src/java/com/google/caja/demos/lolcat-search/searchbox.js
U    src/java/com/google/caja/demos/lolcat-search/kittens.js
U    src/java/com/google/caja/reporting/MessageType.java
U    src/java/com/google/caja/parser/quasiliteral/Scope.java
U    src/java/com/google/caja/parser/html/DomParser.java
U    src/java/com/google/caja/parser/css/CssPropertySignature.java
U    src/java/com/google/caja/parser/js/Identifier.java
U    src/java/com/google/caja/parser/js/Literal.java
U    src/java/com/google/caja/parser/js/Declaration.java
U    src/java/com/google/caja/parser/js/Parser.java
U    src/java/com/google/caja/CajaException.java
U    src/java/com/google/caja/plugin/HtmlSanitizer.java
U    src/java/com/google/caja/plugin/GxpCompiler.java
U    src/java/com/google/caja/plugin/CssValidator.java
A    src/javatests/com/google/caja/lexer/escaping/allowed-in-strings.html
U    src/javatests/com/google/caja/lexer/escaping/EscapingTest.java
U    src/javatests/com/google/caja/lexer/CssLexerTest.java
U    src/javatests/com/google/caja/lang/css/CssSchemaTest.java
U    src/javatests/com/google/caja/parser/quasiliteral/ScopeTest.java
U    src/javatests/com/google/caja/parser/html/DomParserTest.java
A    src/javatests/com/google/caja/parser/css/CssPropertySignatureTest.java
U    src/javatests/com/google/caja/parser/css/CssTreeTest.java
U    src/javatests/com/google/caja/parser/js/ParserTest.java
U    src/javatests/com/google/caja/plugin/gxpcompilergolden1.js
Updated to revision 1541.
</log>
</target>
<varz name="target.update.status" value="1"/>
<varz name="target.update.time" value="5"/>
<varz name="svnversion" value="1541"/>
<target name="clean">
  <log>Buildfile: build.xml

clean:
   [delete] Deleting directory /opt/svn/google-caja/src/ant-reports
   [delete] Deleting directory /opt/svn/google-caja/src/ant-docs
   [delete] Deleting directory /opt/svn/google-caja/src/ant-instr
   [delete] Deleting directory /opt/svn/google-caja/src/ant-jars
   [delete] Deleting directory /opt/svn/google-caja/src/ant-lib
   [delete] Deleting directory /opt/svn/google-caja/src/ant-www

BUILD SUCCESSFUL
Total time: 1 second
</log>
</target>
<varz name="target.clean.status" value="1"/>
<varz name="target.clean.time" value="1"/>
<tasks rev="1541">
<task file="src/java/com/google/caja/lexer/HtmlLexer.java" line="341" owner="mikesamuel">rewrite with a transition table or just use ANTLR</task>
<task file="src/java/com/google/caja/lexer/FilePosition.java" line="35" owner="mikesamuel">need unittests</task>
<task file="src/java/com/google/caja/lexer/CharProducer.java" line="50" owner="mikesamuel">separate this into two factories in separate files,</task>
<task file="src/java/com/google/caja/lexer/CssLexer.java" line="32" owner="mikesamuel">CSS2.1 has changed lexical conventions to effectively</task>
<task file="src/java/com/google/caja/demos/calendar/instanceGenerators-cajita.js" line="172" owner="mikesamuel">this may be premature.  If needed, We could</task>
<task file="src/java/com/google/caja/demos/calendar/hcalendar.js" line="445" owner="mikesamuel">resolve the href attrib relative to globalProps.url?</task>
<task file="src/java/com/google/caja/demos/calendar/hcalendar.js" line="450" owner="mikesamuel">resolve the href attrib relative to globalProps.url?</task>
<task file="src/java/com/google/caja/demos/calendar/hcalendar.js" line="458" owner="mikesamuel">other url node/attrib pairs?</task>
<task file="src/java/com/google/caja/demos/calendar/filters-cajita.js" line="81" owner="mikesamuel">according to section 4.3.10</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="194" owner="mikesamuel">don't need a list here</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="206" owner="mikesamuel">the spec is not clear on this.  Treat the week</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="242" owner="mikesamuel">filter byWeekNo and write unit tests</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="256" owner="mikesamuel">filter byWeekNo and write unit tests</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="306" owner="mikesamuel">if count is large, we might try predicting the end</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="311" owner="mikesamuel">warn</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="348" owner="mikesamuel">if we allow iteration more frequently than daily</task>
<task file="src/java/com/google/caja/demos/calendar/rrule-cajita.js" line="602" owner="mikesamuel">apply byhour, byminute, bysecond rules here</task>
<task file="src/java/com/google/caja/demos/calendar/package.html" line="34" owner="mikesamuel">write me</task>
<task file="src/java/com/google/caja/demos/calendar/package.html" line="73" owner="mikesamuel">write me</task>
<task file="src/java/com/google/caja/demos/calendar/event_store.js" line="108" owner="mikesamuel">look at tzid</task>
<task file="src/java/com/google/caja/demos/calendar/event_store.js" line="116" owner="mikesamuel">translate to start tzid</task>
<task file="src/java/com/google/caja/demos/calendar/event_store.js" line="125" owner="mikesamuel">handle multiple RRULES, EXRULES, RDATES, EXDATES</task>
<task file="src/java/com/google/caja/demos/calendar/string-interpolation.js" line="273" owner="unknown">This implementation does not correctly handle [:Cf:] characters.</task>
<task file="src/java/com/google/caja/demos/calendar/html-interp.js" line="72" owner="unknown">check for apparent end tag</task>
<task file="src/java/com/google/caja/demos/calendar/html-interp.js" line="237" owner="unknown">escape format control characters</task>
<task file="src/java/com/google/caja/demos/calendar/html-interp.js" line="1102" owner="mikesamuel">if there's an easy way to interleave bits when</task>
<task file="src/java/com/google/caja/demos/contact-spring-graph/plugin-main.js" line="95" owner="mikesamuel">This key logic belongs in spring-graph.js</task>
<task file="src/java/com/google/caja/reporting/MessageType.java" line="26" owner="mikesamuel">rename this to CommonMessageType and rename</task>
<task file="src/java/com/google/caja/reporting/MessageContext.java" line="30" owner="mikesamuel">replace these public fields with getters &amp; setters to</task>
<task file="src/java/com/google/caja/parser/quasiliteral/SimpleQuasiNode.java" line="93" owner="ihab.awad">Absorb setting the FilePosition into newNodeInstance and remove the</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Rule.java" line="581" owner="mikesamuel">move ReservedNames into this package and use it here.</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="193" owner="ihab.awad">importedVariables is only used by the root-most scope; it is</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="294" owner="ihab.awad">Uses private access to 's' which is of same class but distinct</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="311" owner="ihab.awad">Uses private access to 's' which is of same class but distinct</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="475" owner="ihab.awad">Imported variables are remembered in 2 places: in the</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="523" owner="ihab.awad">Refactor to use standard Caja Visitor. Currently not</task>
<task file="src/java/com/google/caja/parser/quasiliteral/Scope.java" line="586" owner="ihab.awad">Change the ParseTreeNode type for the right hand sides</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="715" owner="erights,ihab">We must only recognize (and thus allow) this</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="738" owner="mikesamuel">make constructors first class for the purpose</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="925" owner="erights">Need a general way to expand lValues</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="955" owner="erights">Need a general way to expand readModifyWrite lValues.</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="1013" owner="mikesamuel">Figure out when post increments are being</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="1742" owner="ihab.awad">Make &quot;warts mode&quot; checks automatic based on the</task>
<task file="src/java/com/google/caja/parser/quasiliteral/DefaultCajaRewriter.java" line="1957" owner="ihab.awad">The 'multiDeclaration' implementation is hard</task>
<task file="src/java/com/google/caja/parser/quasiliteral/RuleDescription.java" line="48" owner="ihab.awad">Use wart metadata explicitly in Rewriter to fire or not</task>
<task file="src/java/com/google/caja/parser/quasiliteral/RuleDescription.java" line="62" owner="ihab.awad">Add metadata for a rule indicating that it always fails,</task>
<task file="src/java/com/google/caja/parser/html/AbstractElementStack.java" line="138" owner="mikesamuel">check against XML&amp;HTML definitions of whitespace.</task>
<task file="src/java/com/google/caja/parser/html/JsHtmlParser.java" line="235" owner="msamuel">unescape attribute value</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="671" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="699" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="715" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="731" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="746" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="761" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="778" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="793" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="819" owner="ihab">Javadoc.</task>
<task file="src/java/com/google/caja/parser/css/CssTree.java" line="889" owner="msamuel">maybe enforce the convention that there are matched</task>
<task file="src/java/com/google/caja/parser/js/Statement.java" line="30" owner="mikesamuel">breaksReaching should probably take a paremeter of type</task>
<task file="src/java/com/google/caja/parser/js/Statement.java" line="32" owner="mikesamuel">rename breaks and continues to collectBreakTargets and</task>
<task file="src/java/com/google/caja/parser/js/LabeledStmtWrapper.java" line="30" owner="mikesamuel">Investigate whether use of continue to a non loop</task>
<task file="src/java/com/google/caja/parser/js/LabeledStmtWrapper.java" line="32" owner="mikesamuel">Do we want to remove labelling of non-loop statements</task>
<task file="src/java/com/google/caja/parser/js/LabeledStmtWrapper.java" line="34" owner="mikesamuel">Erase the distinction between LabeledStmtWrapper and</task>
<task file="src/java/com/google/caja/parser/js/StringLiteral.java" line="103" owner="msamuel">move unescaping to Escaping.java -- nobody will look there</task>
<task file="src/java/com/google/caja/parser/ParseTreeNodes.java" line="69" owner="ihab">Instead of creating a new list each time, pass the list in and</task>
<task file="src/java/com/google/caja/parser/ParseTreeNodes.java" line="71" owner="mikesamuel">clean up dependency.  This package should not depend on</task>
<task file="src/java/com/google/caja/parser/AbstractParseTreeNode.java" line="134" owner="mikesamuel">maybe reliably throw an exception type, that includes</task>
<task file="src/java/com/google/caja/opensocial/GadgetSpec.java" line="31" owner="ihab.awad">Consider a more generic representation that still guards against</task>
<task file="src/java/com/google/caja/opensocial/applet/CajaApplet.java" line="96" owner="mikesamuel">If the text starts with a &lt;base&gt; tag, maybe use that</task>
<task file="src/java/com/google/caja/opensocial/service/HttpStatus.java" line="20" owner="jasvir">Use a standard class or move to appropriate package</task>
<task file="src/java/com/google/caja/opensocial/service/CajolingService.java" line="63" owner="jas">Use Config to config port</task>
<task file="src/java/com/google/caja/opensocial/service/ContentHandler.java" line="48" owner="unknown"></task>
<task file="src/java/com/google/caja/util/Criterion.java" line="23" owner="mikesamuel">replace &quot;may be null&quot; and &quot;not null&quot; shorthands with</task>
<task file="src/java/com/google/caja/util/Criterion.java" line="25" owner="mikesamuel">replace with com.google.common.Predicate and the</task>
<task file="src/java/com/google/caja/plugin/stages/ValidateCssStage.java" line="52" owner="mikesamuel">build up a list of classes and ids for use in</task>
<task file="src/java/com/google/caja/plugin/stages/OpenTemplateStage.java" line="59" owner="mikesamuel">this could probably be more simply done as a</task>
<task file="src/java/com/google/caja/plugin/stages/OpenTemplateStage.java" line="433" owner="unknown">output to a message queue</task>
<task file="src/java/com/google/caja/plugin/HtmlCompiler.java" line="78" owner="mikesamuel">this shares a lot of code with GxpCompiler and the two</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="314" owner="mikesamuel">integrate cajita compiler to allow arbitrary</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="331" owner="mikesamuel">determine mime type properly.</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="422" owner="mikesamuel">if opt_keyAttrib, could implement getNamedItem</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="588" owner="mikesamuel">for RCDATA we only need to escape &amp; if they're not</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="787" owner="mikesamuel">make sure event doesn't propagate to dispatched</task>
<task file="src/java/com/google/caja/plugin/domita.js" line="930" owner="unknown">maybe whitelist the color names defined for CSS if the arg is a</task>
<task file="src/java/com/google/caja/plugin/Config.java" line="49" owner="mikesamuel">make this subclassable so opensocial specific flags can be</task>
<task file="src/java/com/google/caja/plugin/DomAttributeConstraint.java" line="53" owner="ihab">rdub disabled this condition. Am leaving it in.</task>
<task file="src/java/com/google/caja/plugin/DomAttributeConstraint.java" line="104" owner="ihab">Handle using HTML4, which does not allow 'id' here.</task>
<task file="src/java/com/google/caja/plugin/DomAttributeConstraint.java" line="105" owner="ihab">Review other ways SCRIPT.innerHTML may be modified.</task>
<task file="src/java/com/google/caja/plugin/DomAttributeConstraint.java" line="136" owner="ihab">Handle using HTML4, which does not allow 'id' here.</task>
<task file="src/java/com/google/caja/plugin/CssTemplate.java" line="129" owner="mikesamuel">implement me</task>
<task file="src/java/com/google/caja/plugin/PluginCompilerMain.java" line="141" owner="mikesamuel">capture the input as bytes, guess encoding, and</task>
<task file="src/java/com/google/caja/plugin/html-sanitizer.js" line="37" owner="unknown">&amp;pi; is different from &amp;Pi;</task>
<task file="src/java/com/google/caja/plugin/CssRewriter.java" line="324" owner="mikesamuel">check argument if child now a FunctionCall</task>
<task file="src/java/com/google/caja/plugin/CssRewriter.java" line="514" owner="mikesamuel">for content: and other uri types, use</task>
<task file="src/java/com/google/caja/plugin/GxpCompiler.java" line="639" owner="msamuel">Do not trim around &lt;gxp:eval&gt;.  Trim around it if there is</task>
<task file="src/java/com/google/caja/plugin/CssValidator.java" line="511" owner="mikesamuel">this is currently 5 instead of 4 because it also limits</task>
<task file="src/java/com/google/caja/lang/css/CssSchema.java" line="189" owner="mikesamuel">Is there any value in enumerating elements?</task>
<task file="src/java/com/google/caja/lang/css/css-extensions-defs.json" line="23" owner="unknown">&quot;: &quot;dom2property&quot; },</task>
<task file="src/java/com/google/caja/lang/css/css-extensions-defs.json" line="27" owner="unknown">&quot;: &quot;dom2property&quot; },</task>
<task file="src/java/com/google/caja/lang/html/HtmlSchema.java" line="42" owner="mikesamuel">respect required attributes for tags.</task>
<task file="src/java/com/google/caja/lang/html/HtmlSchema.java" line="118" owner="mikesamuel">divert IllegalArgumentExceptions to MessageQueue</task>
<task file="src/javatests/com/google/caja/config/ConfigUtilTest.java" line="49" owner="mikesamuel">better file positions for error messages.</task>
<task file="src/javatests/com/google/caja/demos/calendar/time_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.js" line="534" owner="msamuel">implement hourly iteration</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.js" line="546" owner="msamuel">implement minutely iteration</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.js" line="559" owner="msamuel">implement minutely iteration</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.js" line="763" owner="msamuel">is this right?</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.js" line="960" owner="msamuel">check advancement of more examples</task>
<task file="src/javatests/com/google/caja/demos/calendar/time_util_test.js" line="97" owner="mikesamuel">check that these answers are right</task>
<task file="src/javatests/com/google/caja/demos/calendar/filters_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="657" owner="unknown">- do we need a special test for this? is x2v working&quot;</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="889" owner="unknown">- wait on MarkM to figure out what\'s up with this test.&quot;</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="919" owner="unknown">not sure about this test</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="955" owner="unknown">- not sure about this one --&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1237" owner="unknown">- I don\'t think attendee stuff is implemented in X2V&quot;</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1254" owner="unknown">- should \'REQ-PARTICIPANT be lc\'ed?   --&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1260" owner="unknown">- should mailto: be here?    --&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1391" owner="unknown">- ask MarkM about this. Did he mean to use &lt;del&gt;? --&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1439" owner="unknown">- review the x2v formatting stuff for DESCRIPTION&quot;</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1506" owner="unknown">--&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/hcalendar_test.js" line="1557" owner="unknown">- eh?  --&gt;&quot;,</task>
<task file="src/javatests/com/google/caja/demos/calendar/generators_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/rrule_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/time_util_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/layout_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/bitset_test.html" line="20" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/demos/calendar/event_store_test.html" line="19" owner="mikesamuel">cajole the scripts so that for loops work.  --&gt;</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="382" owner="ihab.awad">SECURITY: Ensure we disallow references to free variables</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="393" owner="ihab.awad">Refactor some of these tests to be functional, rather than golden.</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="537" owner="ihab.awad">The below should throw MessageType.MASKING_SYMBOL at</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="824" owner="ihab.awad">SECURITY: Issue 336</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="966" owner="ihab.awad">Move this to the proper order of rules</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="1399" owner="ihab.awad">Refactor away the below cut/paste, hopefully into</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="1431" owner="metaweta">come up with a better way to be the same cajoled and plain</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/DefaultCajaRewriterTest.java" line="1704" owner="ihab.awad">The below test is not as complete as it should be</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/ScopeTest.java" line="336" owner="ihab.awad">This spurious LINT message is because 'foo' is</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/RewriterTestCase.java" line="65" owner="ihab.awad">Refactor tests to use checkAddsMessage(...) instead</task>
<task file="src/javatests/com/google/caja/parser/quasiliteral/RewriterTestCase.java" line="145" owner="ihab.awad">Change dependents to use checkAddsMessage and just call js(fromString(&quot;...&quot;)) </task>
<task file="src/javatests/com/google/caja/parser/html/DomParserTest.java" line="716" owner="mikesamuel">this error message seems to be a bug.</task>
<task file="src/javatests/com/google/caja/parser/css/CssTreeTest.java" line="222" owner="mikesamuel">test rendering of @imports, @page, @font-face,</task>
<task file="src/javatests/com/google/caja/parser/css/CssTreeTest.java" line="224" owner="mikesamuel">test rendering of unicode range literals.</task>
<task file="src/javatests/com/google/caja/parser/js/ParserTest.java" line="44" owner="mikesamuel">better comment each of the test input files.</task>
<task file="src/javatests/com/google/caja/parser/js/FuzzedParserTest.java" line="24" owner="jasvir">These tests were generated by the fuzzer - distill them to</task>
<task file="src/javatests/com/google/caja/opensocial/test-parsing.xml" line="80" owner="ihab.awad">Check on proper format for 'location' UserPrefs --&gt;</task>
<task file="src/javatests/com/google/caja/opensocial/DefaultGadgetRewriterTest.java" line="144" owner="ihab.awad">Rewrite &quot;golden&quot; or turn into a functional test</task>
<task file="src/javatests/com/google/caja/opensocial/GadgetsTestMain.java" line="179" owner="unknown">&quot;, &quot;messages&quot;, messages);</task>
<task file="src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java" line="102" owner="jasvir">Issue 330 </task>
<task file="src/javatests/com/google/caja/util/MoreAsserts.java" line="36" owner="mikesamuel">maybe actually diff using</task>
<task file="src/javatests/com/google/caja/util/MoreAsserts.java" line="49" owner="mikesamuel">maybe actually diff using</task>
<task file="src/javatests/com/google/caja/util/RhinoTestBed.java" line="42" owner="mikesamuel">maybe replace this with the JSR 223 stuff.</task>
<task file="src/javatests/com/google/caja/util/RhinoTestBed.java" line="202" owner="mikesamuel">do this properly</task>
<task file="src/javatests/com/google/caja/plugin/HtmlCompiledPluginTest.java" line="57" owner="metaweta">Move as many of these as possible to DefaultCajaRewriterTest</task>
<task file="src/javatests/com/google/caja/plugin/HtmlCompiledPluginTest.java" line="95" owner="ihab.awad">SECURITY: Re-enable by reading (say) x.foo, and</task>
<task file="src/javatests/com/google/caja/plugin/HtmlCompiledPluginTest.java" line="298" owner="ihab.awad">Disabled for now, but see issue145</task>
<task file="src/javatests/com/google/caja/plugin/HtmlCompiledPluginTest.java" line="447" owner="stay">Once they decide on scoping &amp; initialization rules, test them here.</task>
<task file="src/javatests/com/google/caja/plugin/HtmlCompiledPluginTest.java" line="451" owner="ihab.awad">Disabled until we figure out how to get a test fixture</task>
<task file="src/javatests/com/google/caja/plugin/CssRewriterTest.java" line="41" owner="ihab">Make final decision whether to keep or remove. This test was</task>
<task file="src/javatests/com/google/caja/plugin/CssValidatorTest.java" line="766" owner="mikesamuel">We could break the position rule into multiple</task>
<task file="src/javatests/com/google/caja/lang/css/CssSchemaTest.java" line="50" owner="mikesamuel">test getSymbol</task>
<task file="src/js/com/google/caja/caja.js" line="26" owner="erights">All code text in comments should be enclosed in</task>
<task file="src/js/com/google/caja/caja.js" line="32" owner="erights">Move such extensions to a separate extensions.js,</task>
<task file="src/js/com/google/caja/caja.js" line="191" owner="erights">We may deprecate this in favor of &lt;pre&gt;</task>
<task file="src/js/com/google/caja/caja.js" line="368" owner="erights"></task>
<task file="src/js/com/google/caja/caja.js" line="663" owner="erights">allowDelete is not yet specified or</task>
<task file="src/js/com/google/caja/caja.js" line="720" owner="erights">We shouldn't be able to mark simple functions</task>
<task file="src/js/com/google/caja/caja.js" line="928" owner="erights">To avoid accidents, &lt;tt&gt;method&lt;/tt&gt;,</task>
<task file="src/js/com/google/caja/caja.js" line="1082" owner="ihab.awad">Make this throw a &quot;module linkage error&quot; so as to be</task>
<task file="src/js/com/google/caja/caja.js" line="1087" owner="ihab.awad">using readPub here throws an error; fix!!</task>
<task file="src/js/com/google/caja/caja.js" line="1196" owner="erights">If a settable property is</task>
<task file="src/js/com/google/caja/caja.js" line="1471" owner="unknown">or the cross frame equivalent</task>
<task file="src/js/com/google/caja/caja.js" line="1540" owner="erights">return a builder object that allows further</task>
<task file="src/js/com/google/caja/caja.js" line="1757" owner="erights">Seems dangerous, but doesn't add</task>
<task file="src/js/com/google/caja/caja.js" line="1760" owner="erights">Seems dangerous, but doesn't add</task>
<task file="src/js/com/google/caja/caja-debugmode.js" line="27" owner="mikesamuel">how to collect logging.</task>
</tasks>
<target name="build">
  <log>Buildfile: build.xml

dirs:
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-reports
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-docs
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-instr
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-jars
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-lib
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-www

Primitives:
    [javac] Compiling 18 source files to /opt/svn/google-caja/src/ant-lib

Reporting:
    [javac] Compiling 14 source files to /opt/svn/google-caja/src/ant-lib

Lexer:
    [javac] Compiling 25 source files to /opt/svn/google-caja/src/ant-lib

ParserCore:
    [javac] Compiling 6 source files to /opt/svn/google-caja/src/ant-lib

CssParser:
    [javac] Compiling 3 source files to /opt/svn/google-caja/src/ant-lib

HtmlParser:
    [javac] Compiling 11 source files to /opt/svn/google-caja/src/ant-lib

JsParser:
    [javac] Compiling 1 source file to /opt/svn/google-caja/src/ant-lib

Quasiliterals:
    [javac] Compiling 25 source files to /opt/svn/google-caja/src/ant-lib

Rendering:
    [javac] Compiling 2 source files to /opt/svn/google-caja/src/ant-lib

Config:
    [javac] Compiling 3 source files to /opt/svn/google-caja/src/ant-lib

Schemas:
    [javac] Compiling 3 source files to /opt/svn/google-caja/src/ant-lib
     [copy] Copying 15 files to /opt/svn/google-caja/src/ant-lib

PluginCompiler:
    [javac] Compiling 38 source files to /opt/svn/google-caja/src/ant-lib
     [copy] Copying 4 files to /opt/svn/google-caja/src/ant-lib

build.info:

pluginc:
    [javac] Compiling 14 source files to /opt/svn/google-caja/src/ant-lib
    [javac] Compiling 5 source files to /opt/svn/google-caja/src/ant-lib

MinifiedJs:
   [minify] compiling 6 files to /opt/svn/google-caja/src/ant-lib/com/google/caja/plugin/domita-minified.js
   [minify] LINT:js/com/google/caja/caja.js:737+10: Semicolon inserted

jars:
     [copy] Copying 3 files to /opt/svn/google-caja/src/ant-jars
      [jar] Building jar: /opt/svn/google-caja/src/ant-jars/pluginc.jar
      [jar] Building jar: /opt/svn/google-caja/src/ant-jars/pluginc-src.jar

BUILD SUCCESSFUL
Total time: 10 seconds
</log>
</target>
<varz name="target.build.status" value="1"/>
<varz name="target.build.time" value="11"/>
<target name="coverage">
  <log>Buildfile: build.xml

dirs:

emma:

dirs:

Primitives:

Reporting:

Lexer:

ParserCore:

CssParser:

HtmlParser:

JsParser:

Quasiliterals:

Rendering:

Config:

Schemas:

PluginCompiler:

build.info:

pluginc:

CajolingService:
    [javac] Compiling 11 source files to /opt/svn/google-caja/src/ant-lib

CajoledTests:
   [cajole] compiling 2 files to /opt/svn/google-caja/src/ant-lib/com/google/caja/plugin/domita_test_cajoled.js
   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g
   [cajole] result: (RegexpLiteral) /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var attrs = [ ]
   [cajole] result: (Declaration) var attrs = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var m
   [cajole] result: (Declaration) var m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/
   [cajole] result: (RegexpLiteral) /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) tagBody
   [cajole] result: (Reference) tagBody

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/)
   [cajole] result: (SpecialOperation) x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/)
   [cajole] result: (AssignOperation) m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^[\&quot;\']/
   [cajole] result: (RegexpLiteral) /^[\&quot;\']/

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) /^[\&quot;\']/.test(m[ 2 ])
   [cajole] result: (SpecialOperation) x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !/^[\&quot;\']/.test(m[ 2 ])
   [cajole] result: (SimpleOperation) ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ])
   [cajole] result: (ControlOperation) ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&quot;'
   [cajole] result: (StringLiteral) '&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&quot;' + m[ 2 ]
   [cajole] result: (SimpleOperation) '&quot;' + ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&quot;'
   [cajole] result: (StringLiteral) '&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&quot;' + m[ 2 ] + '&quot;'
   [cajole] result: (SimpleOperation) '&quot;' + ___.readPub(m, 2) + '&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ]
   [cajole] result: (ControlOperation) ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ]
   [cajole] result: (Declaration) var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) value
   [cajole] result: (Reference) value

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '='
   [cajole] result: (StringLiteral) '='

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) value
   [cajole] result: (Reference) value

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '=' + value
   [cajole] result: (SimpleOperation) '=' + value

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) value? '=' + value: ''
   [cajole] result: (ControlOperation) value? '=' + value: ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) m[ 1 ] + (value? '=' + value: '')
   [cajole] result: (SimpleOperation) ___.readPub(m, 1) + (value? '=' + value: '')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) attrs
   [cajole] result: (Reference) attrs

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) attrs.push(m[ 1 ] + (value? '=' + value: ''))
   [cajole] result: (SpecialOperation) x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) attrs.push(m[ 1 ] + (value? '=' + value: ''))
   [cajole] result: (ExpressionStmt) x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) m
   [cajole] result: (Reference) m

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) m[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(m, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) m[ 0 ].length
   [cajole] result: (SpecialOperation) x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) tagBody
   [cajole] result: (Reference) tagBody

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) tagBody.substring(m[ 0 ].length)
   [cajole] result: (SpecialOperation) x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) tagBody = tagBody.substring(m[ 0 ].length)
   [cajole] result: (AssignOperation) tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) tagBody = tagBody.substring(m[ 0 ].length)
   [cajole] result: (ExpressionStmt) tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]   x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]   tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole] }
   [cajole] result: (ForLoop) for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]   var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]   x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]   tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) attrs
   [cajole] result: (Reference) attrs

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) attrs.sort()
   [cajole] result: (SpecialOperation) x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) attrs.sort()
   [cajole] result: (ExpressionStmt) x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) tagStart
   [cajole] result: (Reference) tagStart

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' '
   [cajole] result: (StringLiteral) ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) tagStart + ' '
   [cajole] result: (SimpleOperation) tagStart + ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' '
   [cajole] result: (StringLiteral) ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) attrs
   [cajole] result: (Reference) attrs

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) attrs.join(' ')
   [cajole] result: (SpecialOperation) x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) tagStart + ' ' + attrs.join(' ')
   [cajole] result: (SimpleOperation) tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;'
   [cajole] result: (StringLiteral) '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) tagStart + ' ' + attrs.join(' ') + '&gt;'
   [cajole] result: (SimpleOperation) tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return tagStart + ' ' + attrs.join(' ') + '&gt;'
   [cajole] result: (ReturnStmt) return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var attrs = [ ] for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole] }
   [cajole] attrs.sort() return tagStart + ' ' + attrs.join(' ') + '&gt;'
   [cajole] result: (ParseTreeNodeContainer) var attrs = [ ] for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]   var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]   x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]   tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole] }
   [cajole] x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]) return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (_, tagStart, tagBody) {
   [cajole]   var attrs = [ ];
   [cajole]   for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]     var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]     attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]     tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]   }
   [cajole]   attrs.sort();
   [cajole]   return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var attrs = [ ];
   [cajole]                                 for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                   var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                   x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                   tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                 }
   [cajole]                                 x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                 return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) s
   [cajole] result: (Reference) s

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]             var attrs = [ ];
   [cajole]             for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]               var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]               attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]               tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]             }
   [cajole]             attrs.sort();
   [cajole]             return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]           })
   [cajole] result: (SpecialOperation) x2___ = s, (x0___ = /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, x1___ = ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                                                                         var x0___;
   [cajole]                                                                                         var x1___;
   [cajole]                                                                                         var x2___;
   [cajole]                                                                                         var x3___;
   [cajole]                                                                                         var x4___;
   [cajole]                                                                                         var x5___;
   [cajole]                                                                                         var x6___;
   [cajole]                                                                                         var x7___;
   [cajole]                                                                                         var x8___;
   [cajole]                                                                                         var x9___;
   [cajole]                                                                                         var x10___;
   [cajole]                                                                                         var x11___;
   [cajole]                                                                                         var attrs = [ ];
   [cajole]                                                                                         for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                                                                           var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                                                                           x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                                                                           tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                                                                         }
   [cajole]                                                                                         x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                                                                         return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                                                                                       }))), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) s = s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]                 var attrs = [ ];
   [cajole]                 for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]                   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]                   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]                   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]                 }
   [cajole]                 attrs.sort();
   [cajole]                 return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]               })
   [cajole] result: (AssignOperation) s = (x2___ = s, (x0___ = /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, x1___ = ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                                                                              var x0___;
   [cajole]                                                                                              var x1___;
   [cajole]                                                                                              var x2___;
   [cajole]                                                                                              var x3___;
   [cajole]                                                                                              var x4___;
   [cajole]                                                                                              var x5___;
   [cajole]                                                                                              var x6___;
   [cajole]                                                                                              var x7___;
   [cajole]                                                                                              var x8___;
   [cajole]                                                                                              var x9___;
   [cajole]                                                                                              var x10___;
   [cajole]                                                                                              var x11___;
   [cajole]                                                                                              var attrs = [ ];
   [cajole]                                                                                              for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                                                                                var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                                                                                x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                                                                                tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                                                                              }
   [cajole]                                                                                              x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                                                                              return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                                                                                            }))), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) s = s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]                 var attrs = [ ];
   [cajole]                 for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]                   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]                   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]                   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]                 }
   [cajole]                 attrs.sort();
   [cajole]                 return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]               })
   [cajole] result: (ExpressionStmt) s = (x2___ = s, (x0___ = /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, x1___ = ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                                                                              var x0___;
   [cajole]                                                                                              var x1___;
   [cajole]                                                                                              var x2___;
   [cajole]                                                                                              var x3___;
   [cajole]                                                                                              var x4___;
   [cajole]                                                                                              var x5___;
   [cajole]                                                                                              var x6___;
   [cajole]                                                                                              var x7___;
   [cajole]                                                                                              var x8___;
   [cajole]                                                                                              var x9___;
   [cajole]                                                                                              var x10___;
   [cajole]                                                                                              var x11___;
   [cajole]                                                                                              var attrs = [ ];
   [cajole]                                                                                              for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                                                                                var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                                                                                x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                                                                                tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                                                                              }
   [cajole]                                                                                              x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                                                                              return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                                                                                            }))), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g
   [cajole] result: (RegexpLiteral) /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) open
   [cajole] result: (Reference) open

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) name
   [cajole] result: (Reference) name

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) name.toLowerCase()
   [cajole] result: (SpecialOperation) x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) open + name.toLowerCase()
   [cajole] result: (SimpleOperation) open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) body
   [cajole] result: (Reference) body

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) open + name.toLowerCase() + body
   [cajole] result: (SimpleOperation) open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;'
   [cajole] result: (StringLiteral) '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) open + name.toLowerCase() + body + '&gt;'
   [cajole] result: (SimpleOperation) open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return open + name.toLowerCase() + body + '&gt;'
   [cajole] result: (ReturnStmt) return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return open + name.toLowerCase() + body + '&gt;'
   [cajole] result: (ParseTreeNodeContainer) return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (_, open, name, body) {
   [cajole]   return open + name.toLowerCase() + body + '&gt;';
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                 var x0___;
   [cajole]                                 return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) s
   [cajole] result: (Reference) s

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]             return open + name.toLowerCase() + body + '&gt;';
   [cajole]           })
   [cajole] result: (SpecialOperation) x5___ = s, (x3___ = /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, x4___ = ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                                                                     var x0___;
   [cajole]                                                                                     return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                                                                                   }))), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) s = s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]                 return open + name.toLowerCase() + body + '&gt;';
   [cajole]               })
   [cajole] result: (AssignOperation) s = (x5___ = s, (x3___ = /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, x4___ = ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                                                                                        }))), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) s = s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]                 return open + name.toLowerCase() + body + '&gt;';
   [cajole]               })
   [cajole] result: (ExpressionStmt) s = (x5___ = s, (x3___ = /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, x4___ = ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                                                                                        }))), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^[ \t]*(\r\n?|\n)|\s+$/g
   [cajole] result: (RegexpLiteral) /^[ \t]*(\r\n?|\n)|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) s
   [cajole] result: (Reference) s

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) s.replace(/^[ \t]*(\r\n?|\n)|\s+$/g, '')
   [cajole] result: (SpecialOperation) x8___ = s, (x6___ = /^[ \t]*(\r\n?|\n)|\s+$/g, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return s.replace(/^[ \t]*(\r\n?|\n)|\s+$/g, '')
   [cajole] result: (ReturnStmt) return x8___ = s, (x6___ = /^[ \t]*(\r\n?|\n)|\s+$/g, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) s = s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]                 var attrs = [ ];
   [cajole]                 for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]                   var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]                   attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]                   tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]                 }
   [cajole]                 attrs.sort();
   [cajole]                 return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]               }) s = s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]                                  return open + name.toLowerCase() + body + '&gt;';
   [cajole]                                }) return s.replace(/^[ \t]*(\r\n?|\n)|\s+$/g, '')
   [cajole] result: (ParseTreeNodeContainer) s = (x2___ = s, (x0___ = /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, x1___ = ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                                                                              var x0___;
   [cajole]                                                                                              var x1___;
   [cajole]                                                                                              var x2___;
   [cajole]                                                                                              var x3___;
   [cajole]                                                                                              var x4___;
   [cajole]                                                                                              var x5___;
   [cajole]                                                                                              var x6___;
   [cajole]                                                                                              var x7___;
   [cajole]                                                                                              var x8___;
   [cajole]                                                                                              var x9___;
   [cajole]                                                                                              var x10___;
   [cajole]                                                                                              var x11___;
   [cajole]                                                                                              var attrs = [ ];
   [cajole]                                                                                              for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                                                                                var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                                                                                x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                                                                                tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                                                                              }
   [cajole]                                                                                              x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                                                                              return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                                                                                            }))), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])) s = (x5___ = s, (x3___ = /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, x4___ = ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                                                                                                                                                                                                                                                                                   var x0___;
   [cajole]                                                                                                                                                                                                                                                                                                   return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                                                                                                                                                                                                                                                                                                 }))), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])) return x8___ = s, (x6___ = /^[ \t]*(\r\n?|\n)|\s+$/g, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function canonInnerHtml(s) {
   [cajole]   s = s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]                   var attrs = [ ];
   [cajole]                   for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]                     var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]                     attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]                     tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]                   }
   [cajole]                   attrs.sort();
   [cajole]                   return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]                 });
   [cajole]   s = s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]                   return open + name.toLowerCase() + body + '&gt;';
   [cajole]                 });
   [cajole]   return s.replace(/^[ \t]*(\r\n?|\n)|\s+$/g, '');
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testGetElementById'
   [cajole] result: (StringLiteral) 'testGetElementById'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'foo'
   [cajole] result: (StringLiteral) 'foo'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('foo')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(null, document.getElementById('foo'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(null, document.getElementById('foo'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'bar'
   [cajole] result: (StringLiteral) 'bar'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('bar')
   [cajole] result: (SpecialOperation) x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(null, document.getElementById('bar'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(null, document.getElementById('bar'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'no_such_node'
   [cajole] result: (StringLiteral) 'no_such_node'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('no_such_node')
   [cajole] result: (SpecialOperation) x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(null, document.getElementById('no_such_node'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(null, document.getElementById('no_such_node'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertTrue
   [cajole] result: (SpecialOperation) ___.primFreeze(assertTrue)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-get-element-by-id'
   [cajole] result: (StringLiteral) 'test-get-element-by-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-get-element-by-id')
   [cajole] result: (SpecialOperation) x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) document.getElementById('test-get-element-by-id') != null
   [cajole] result: (SimpleOperation) (x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertTrue(document.getElementById('test-get-element-by-id') != null)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertTrue(document.getElementById('test-get-element-by-id') != null)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'xyz-test-get-element-by-id'
   [cajole] result: (StringLiteral) 'xyz-test-get-element-by-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('xyz-test-get-element-by-id')
   [cajole] result: (SpecialOperation) x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(null, document.getElementById('xyz-test-get-element-by-id'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(null, document.getElementById('xyz-test-get-element-by-id'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertTrue
   [cajole] result: (SpecialOperation) ___.primFreeze(assertTrue)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-get-element-by-id-2'
   [cajole] result: (StringLiteral) 'test-get-element-by-id-2'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-get-element-by-id-2')
   [cajole] result: (SpecialOperation) x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) document.getElementById('test-get-element-by-id-2') != null
   [cajole] result: (SimpleOperation) (x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertTrue(document.getElementById('test-get-element-by-id-2') != null)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertTrue(document.getElementById('test-get-element-by-id-2') != null)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-get-element-by-id'
   [cajole] result: (StringLiteral) 'test-get-element-by-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-get-element-by-id')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-get-element-by-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-get-element-by-id')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-get-element-by-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) assertEquals(null, document.getElementById('foo')) assertEquals(null, document.getElementById('bar')) assertEquals(null, document.getElementById('no_such_node')) assertTrue(document.getElementById('test-get-element-by-id') != null) assertEquals(null, document.getElementById('xyz-test-get-element-by-id')) assertTrue(document.getElementById('test-get-element-by-id-2') != null) pass('test-get-element-by-id')
   [cajole] result: (ParseTreeNodeContainer) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ]))) ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null) ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ]))) ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null) ___.asSimpleFunc(pass)('test-get-element-by-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testGetElementById() {
   [cajole]   assertEquals(null, document.getElementById('foo'));
   [cajole]   assertEquals(null, document.getElementById('bar'));
   [cajole]   assertEquals(null, document.getElementById('no_such_node'));
   [cajole]   assertTrue(document.getElementById('test-get-element-by-id') != null);
   [cajole]   assertEquals(null, document.getElementById('xyz-test-get-element-by-id'));
   [cajole]   assertTrue(document.getElementById('test-get-element-by-id-2') != null);
   [cajole]   pass('test-get-element-by-id');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testGetElementById() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null);
   [cajole]                                 ___.asSimpleFunc(pass)('test-get-element-by-id');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testGetElementById', function testGetElementById() {
   [cajole]                  assertEquals(null, document.getElementById('foo'));
   [cajole]                  assertEquals(null, document.getElementById('bar'));
   [cajole]                  assertEquals(null, document.getElementById('no_such_node'));
   [cajole]                  assertTrue(document.getElementById('test-get-element-by-id') != null);
   [cajole]                  assertEquals(null, document.getElementById('xyz-test-get-element-by-id'));
   [cajole]                  assertTrue(document.getElementById('test-get-element-by-id-2') != null);
   [cajole]                  pass('test-get-element-by-id');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testGetElementById', ___.primFreeze(___.simpleFunc(function testGetElementById() {
   [cajole]                                                                                        var x0___;
   [cajole]                                                                                        var x1___;
   [cajole]                                                                                        var x2___;
   [cajole]                                                                                        var x3___;
   [cajole]                                                                                        var x4___;
   [cajole]                                                                                        var x5___;
   [cajole]                                                                                        var x6___;
   [cajole]                                                                                        var x7___;
   [cajole]                                                                                        var x8___;
   [cajole]                                                                                        var x9___;
   [cajole]                                                                                        var x10___;
   [cajole]                                                                                        var x11___;
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null);
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null);
   [cajole]                                                                                        ___.asSimpleFunc(pass)('test-get-element-by-id');
   [cajole]                                                                                      })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testGetElementById', function testGetElementById() {
   [cajole]                  assertEquals(null, document.getElementById('foo'));
   [cajole]                  assertEquals(null, document.getElementById('bar'));
   [cajole]                  assertEquals(null, document.getElementById('no_such_node'));
   [cajole]                  assertTrue(document.getElementById('test-get-element-by-id') != null);
   [cajole]                  assertEquals(null, document.getElementById('xyz-test-get-element-by-id'));
   [cajole]                  assertTrue(document.getElementById('test-get-element-by-id-2') != null);
   [cajole]                  pass('test-get-element-by-id');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testGetElementById', ___.primFreeze(___.simpleFunc(function testGetElementById() {
   [cajole]                                                                                        var x0___;
   [cajole]                                                                                        var x1___;
   [cajole]                                                                                        var x2___;
   [cajole]                                                                                        var x3___;
   [cajole]                                                                                        var x4___;
   [cajole]                                                                                        var x5___;
   [cajole]                                                                                        var x6___;
   [cajole]                                                                                        var x7___;
   [cajole]                                                                                        var x8___;
   [cajole]                                                                                        var x9___;
   [cajole]                                                                                        var x10___;
   [cajole]                                                                                        var x11___;
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null);
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])));
   [cajole]                                                                                        ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null);
   [cajole]                                                                                        ___.asSimpleFunc(pass)('test-get-element-by-id');
   [cajole]                                                                                      })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testElementId'
   [cajole] result: (StringLiteral) 'testElementId'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-element-id'
   [cajole] result: (StringLiteral) 'test-element-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-element-id')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var el = document.getElementById('test-element-id')
   [cajole] result: (Declaration) var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-element-id'
   [cajole] result: (StringLiteral) 'test-element-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) el
   [cajole] result: (Reference) el

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) el.id
   [cajole] result: (SpecialOperation) x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('test-element-id', el.id)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('test-element-id', el.id)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-element-id'
   [cajole] result: (StringLiteral) 'test-element-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'id'
   [cajole] result: (StringLiteral) 'id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) el
   [cajole] result: (Reference) el

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) el.getAttribute('id')
   [cajole] result: (SpecialOperation) x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('test-element-id', el.getAttribute('id'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('test-element-id', el.getAttribute('id'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-element-id'
   [cajole] result: (StringLiteral) 'test-element-id'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-element-id')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-element-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-element-id')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-element-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var el = document.getElementById('test-element-id') assertEquals('test-element-id', el.id) assertEquals('test-element-id', el.getAttribute('id')) pass('test-element-id')
   [cajole] result: (ParseTreeNodeContainer) var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id'))) ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ]))) ___.asSimpleFunc(pass)('test-element-id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testElementId() {
   [cajole]   var el = document.getElementById('test-element-id');
   [cajole]   assertEquals('test-element-id', el.id);
   [cajole]   assertEquals('test-element-id', el.getAttribute('id'));
   [cajole]   pass('test-element-id');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testElementId() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])));
   [cajole]                                 ___.asSimpleFunc(pass)('test-element-id');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testElementId', function testElementId() {
   [cajole]                  var el = document.getElementById('test-element-id');
   [cajole]                  assertEquals('test-element-id', el.id);
   [cajole]                  assertEquals('test-element-id', el.getAttribute('id'));
   [cajole]                  pass('test-element-id');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testElementId', ___.primFreeze(___.simpleFunc(function testElementId() {
   [cajole]                                                                                   var x0___;
   [cajole]                                                                                   var x1___;
   [cajole]                                                                                   var x2___;
   [cajole]                                                                                   var x3___;
   [cajole]                                                                                   var x4___;
   [cajole]                                                                                   var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])));
   [cajole]                                                                                   ___.asSimpleFunc(pass)('test-element-id');
   [cajole]                                                                                 })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testElementId', function testElementId() {
   [cajole]                  var el = document.getElementById('test-element-id');
   [cajole]                  assertEquals('test-element-id', el.id);
   [cajole]                  assertEquals('test-element-id', el.getAttribute('id'));
   [cajole]                  pass('test-element-id');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testElementId', ___.primFreeze(___.simpleFunc(function testElementId() {
   [cajole]                                                                                   var x0___;
   [cajole]                                                                                   var x1___;
   [cajole]                                                                                   var x2___;
   [cajole]                                                                                   var x3___;
   [cajole]                                                                                   var x4___;
   [cajole]                                                                                   var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])));
   [cajole]                                                                                   ___.asSimpleFunc(pass)('test-element-id');
   [cajole]                                                                                 })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testCreateElement'
   [cajole] result: (StringLiteral) 'testCreateElement'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'DIV'
   [cajole] result: (StringLiteral) 'DIV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('DIV')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var newNode = document.createElement('DIV')
   [cajole] result: (Declaration) var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.id
   [cajole] result: (SpecialOperation) x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('', newNode.id)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('', newNode.id)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'newNodeId'
   [cajole] result: (StringLiteral) 'newNodeId'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) newNode.id = 'newNodeId'
   [cajole] result: (SpecialOperation) x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) newNode.id = 'newNodeId'
   [cajole] result: (ExpressionStmt) x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'newNodeId'
   [cajole] result: (StringLiteral) 'newNodeId'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.id
   [cajole] result: (SpecialOperation) x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('newNodeId', newNode.id)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('newNodeId', newNode.id)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '#bog&lt;us&gt;'
   [cajole] result: (StringLiteral) '#bog&lt;us&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) newNode.id = '#bog&lt;us&gt;'
   [cajole] result: (SpecialOperation) x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) newNode.id = '#bog&lt;us&gt;'
   [cajole] result: (ExpressionStmt) x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'newNodeId'
   [cajole] result: (StringLiteral) 'newNodeId'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.id
   [cajole] result: (SpecialOperation) x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('newNodeId', newNode.id)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('newNodeId', newNode.id)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'not:bogus'
   [cajole] result: (StringLiteral) 'not:bogus'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) newNode.id = 'not:bogus'
   [cajole] result: (SpecialOperation) x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) newNode.id = 'not:bogus'
   [cajole] result: (ExpressionStmt) x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'not:bogus'
   [cajole] result: (StringLiteral) 'not:bogus'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.id
   [cajole] result: (SpecialOperation) x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('not:bogus', newNode.id)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('not:bogus', newNode.id)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.nodeType
   [cajole] result: (SpecialOperation) x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(1, newNode.nodeType)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(1, newNode.nodeType)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-create-element'
   [cajole] result: (StringLiteral) 'test-create-element'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-create-element')
   [cajole] result: (SpecialOperation) x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var el = document.getElementById('test-create-element')
   [cajole] result: (Declaration) var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) el
   [cajole] result: (Reference) el

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) el.appendChild(newNode)
   [cajole] result: (SpecialOperation) x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) el.appendChild(newNode)
   [cajole] result: (ExpressionStmt) x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'not:bogus'
   [cajole] result: (StringLiteral) 'not:bogus'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('not:bogus')
   [cajole] result: (SpecialOperation) x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) document.getElementById('not:bogus').tagName
   [cajole] result: (SpecialOperation) x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.tagName
   [cajole] result: (SpecialOperation) x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.tagName
   [cajole] result: (SpecialOperation) x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) el
   [cajole] result: (Reference) el

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) el.firstChild
   [cajole] result: (SpecialOperation) x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) el.firstChild.tagName
   [cajole] result: (SpecialOperation) x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(newNode.tagName, el.firstChild.tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(newNode.tagName, el.firstChild.tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.tagName
   [cajole] result: (SpecialOperation) x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) el
   [cajole] result: (Reference) el

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) el.lastChild
   [cajole] result: (SpecialOperation) x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) el.lastChild.tagName
   [cajole] result: (SpecialOperation) x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(newNode.tagName, el.lastChild.tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(newNode.tagName, el.lastChild.tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'howdy &lt;there&gt;'
   [cajole] result: (StringLiteral) 'howdy &lt;there&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return 'howdy &lt;there&gt;'
   [cajole] result: (ReturnStmt) return 'howdy &lt;there&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return 'howdy &lt;there&gt;'
   [cajole] result: (ParseTreeNodeContainer) return 'howdy &lt;there&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function () {
   [cajole]   return 'howdy &lt;there&gt;';
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 return 'howdy &lt;there&gt;';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) function () {
   [cajole]   return 'howdy &lt;there&gt;';
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 return 'howdy &lt;there&gt;';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapNonEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole]   'toString': function () {
   [cajole]     return 'howdy &lt;there&gt;';
   [cajole]   }
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole]   'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                               return 'howdy &lt;there&gt;';
   [cajole]                                             }))
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createTextNode({
   [cajole]                           'toString': function () {
   [cajole]                             return 'howdy &lt;there&gt;';
   [cajole]                           }
   [cajole]                         })
   [cajole] result: (SpecialOperation) x28___ = document, x27___ = {
   [cajole]   'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                               return 'howdy &lt;there&gt;';
   [cajole]                                             }))
   [cajole] }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var text = document.createTextNode({
   [cajole]                                      'toString': function () {
   [cajole]                                        return 'howdy &lt;there&gt;';
   [cajole]                                      }
   [cajole]                                    })
   [cajole] result: (Declaration) var text = (x28___ = document, x27___ = {
   [cajole]               'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                           return 'howdy &lt;there&gt;';
   [cajole]                                                         }))
   [cajole]             }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 3
   [cajole] result: (IntegerLiteral) 3

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) text.nodeType
   [cajole] result: (SpecialOperation) x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(3, text.nodeType)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(3, text.nodeType)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'howdy &lt;there&gt;'
   [cajole] result: (StringLiteral) 'howdy &lt;there&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) text.data
   [cajole] result: (SpecialOperation) x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('howdy &lt;there&gt;', text.data)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('howdy &lt;there&gt;', text.data)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) newNode.appendChild(text)
   [cajole] result: (SpecialOperation) x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) newNode.appendChild(text)
   [cajole] result: (ExpressionStmt) x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 3
   [cajole] result: (IntegerLiteral) 3

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.firstChild
   [cajole] result: (SpecialOperation) x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.firstChild.nodeType
   [cajole] result: (SpecialOperation) x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(3, newNode.firstChild.nodeType)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(3, newNode.firstChild.nodeType)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'howdy &amp;lt;there&amp;gt;'
   [cajole] result: (StringLiteral) 'howdy &amp;lt;there&amp;gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newNode
   [cajole] result: (Reference) newNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) newNode.innerHTML
   [cajole] result: (SpecialOperation) x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-create-element'
   [cajole] result: (StringLiteral) 'test-create-element'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-create-element')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-create-element')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-create-element')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-create-element')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var newNode = document.createElement('DIV') assertEquals('', newNode.id) newNode.id = 'newNodeId'assertEquals('newNodeId', newNode.id) newNode.id = '#bog&lt;us&gt;'assertEquals('newNodeId', newNode.id) newNode.id = 'not:bogus'assertEquals('not:bogus', newNode.id) assertEquals(1, newNode.nodeType) var el = document.getElementById('test-create-element') el.appendChild(newNode) assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName) assertEquals(newNode.tagName, el.firstChild.tagName) assertEquals(newNode.tagName, el.lastChild.tagName) var text = document.createTextNode({
   [cajoletoString': function () {
   [cajolereturn 'howdy &lt;there&gt;';
   [cajole}
   [cajole}) assertEquals(3, text.nodeType) assertEquals('howdy &lt;there&gt;', text.data) newNode.appendChild(text) assertEquals(3, newNode.firstChild.nodeType) assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML) pass('test-create-element')
   [cajole] result: (ParseTreeNodeContainer) var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id'))) x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id'))) x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___) ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id'))) x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___) ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id'))) ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType'))) var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ])) x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ]) ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName'))) ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName'))) ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName'))) var text = (x28___ = document, x27___ = {
   [cajoletoString': ___.primFreeze(___.simpleFunc(function () {
   [cajolereturn 'howdy &lt;there&gt;';
   [cajole}))
   [cajole}, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType'))) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data'))) x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ]) ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType'))) ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML'))) ___.asSimpleFunc(pass)('test-create-element')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testCreateElement() {
   [cajole]   var newNode = document.createElement('DIV');
   [cajole]   assertEquals('', newNode.id);
   [cajole]   newNode.id = 'newNodeId';
   [cajole]   assertEquals('newNodeId', newNode.id);
   [cajole]   newNode.id = '#bog&lt;us&gt;';
   [cajole]   assertEquals('newNodeId', newNode.id);
   [cajole]   newNode.id = 'not:bogus';
   [cajole]   assertEquals('not:bogus', newNode.id);
   [cajole]   assertEquals(1, newNode.nodeType);
   [cajole]   var el = document.getElementById('test-create-element');
   [cajole]   el.appendChild(newNode);
   [cajole]   assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName);
   [cajole]   assertEquals(newNode.tagName, el.firstChild.tagName);
   [cajole]   assertEquals(newNode.tagName, el.lastChild.tagName);
   [cajole]   var text = document.createTextNode({
   [cajole]                                        'toString': function () {
   [cajole]                                          return 'howdy &lt;there&gt;';
   [cajole]                                        }
   [cajole]                                      });
   [cajole]   assertEquals(3, text.nodeType);
   [cajole]   assertEquals('howdy &lt;there&gt;', text.data);
   [cajole]   newNode.appendChild(text);
   [cajole]   assertEquals(3, newNode.firstChild.nodeType);
   [cajole]   assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML);
   [cajole]   pass('test-create-element');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testCreateElement() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var x13___;
   [cajole]                                 var x14___;
   [cajole]                                 var x15___;
   [cajole]                                 var x16___;
   [cajole]                                 var x17___;
   [cajole]                                 var x18___;
   [cajole]                                 var x19___;
   [cajole]                                 var x20___;
   [cajole]                                 var x21___;
   [cajole]                                 var x22___;
   [cajole]                                 var x23___;
   [cajole]                                 var x24___;
   [cajole]                                 var x25___;
   [cajole]                                 var x26___;
   [cajole]                                 var x27___;
   [cajole]                                 var x28___;
   [cajole]                                 var x29___;
   [cajole]                                 var x30___;
   [cajole]                                 var x31___;
   [cajole]                                 var x32___;
   [cajole]                                 var x33___;
   [cajole]                                 var x34___;
   [cajole]                                 var x35___;
   [cajole]                                 var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                 x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')));
   [cajole]                                 x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')));
   [cajole]                                 x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')));
   [cajole]                                 var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ]));
   [cajole]                                 x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ]);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')));
   [cajole]                                 var text = (x28___ = document, x27___ = {
   [cajole]                                               'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                           return 'howdy &lt;there&gt;';
   [cajole]                                                                                         }))
   [cajole]                                             }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')));
   [cajole]                                 x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ]);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')));
   [cajole]                                 ___.asSimpleFunc(pass)('test-create-element');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testCreateElement', function testCreateElement() {
   [cajole]                  var newNode = document.createElement('DIV');
   [cajole]                  assertEquals('', newNode.id);
   [cajole]                  newNode.id = 'newNodeId';
   [cajole]                  assertEquals('newNodeId', newNode.id);
   [cajole]                  newNode.id = '#bog&lt;us&gt;';
   [cajole]                  assertEquals('newNodeId', newNode.id);
   [cajole]                  newNode.id = 'not:bogus';
   [cajole]                  assertEquals('not:bogus', newNode.id);
   [cajole]                  assertEquals(1, newNode.nodeType);
   [cajole]                  var el = document.getElementById('test-create-element');
   [cajole]                  el.appendChild(newNode);
   [cajole]                  assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName);
   [cajole]                  assertEquals(newNode.tagName, el.firstChild.tagName);
   [cajole]                  assertEquals(newNode.tagName, el.lastChild.tagName);
   [cajole]                  var text = document.createTextNode({
   [cajole]                                                       'toString': function () {
   [cajole]                                                         return 'howdy &lt;there&gt;';
   [cajole]                                                       }
   [cajole]                                                     });
   [cajole]                  assertEquals(3, text.nodeType);
   [cajole]                  assertEquals('howdy &lt;there&gt;', text.data);
   [cajole]                  newNode.appendChild(text);
   [cajole]                  assertEquals(3, newNode.firstChild.nodeType);
   [cajole]                  assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML);
   [cajole]                  pass('test-create-element');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testCreateElement', ___.primFreeze(___.simpleFunc(function testCreateElement() {
   [cajole]                                                                                       var x0___;
   [cajole]                                                                                       var x1___;
   [cajole]                                                                                       var x2___;
   [cajole]                                                                                       var x3___;
   [cajole]                                                                                       var x4___;
   [cajole]                                                                                       var x5___;
   [cajole]                                                                                       var x6___;
   [cajole]                                                                                       var x7___;
   [cajole]                                                                                       var x8___;
   [cajole]                                                                                       var x9___;
   [cajole]                                                                                       var x10___;
   [cajole]                                                                                       var x11___;
   [cajole]                                                                                       var x12___;
   [cajole]                                                                                       var x13___;
   [cajole]                                                                                       var x14___;
   [cajole]                                                                                       var x15___;
   [cajole]                                                                                       var x16___;
   [cajole]                                                                                       var x17___;
   [cajole]                                                                                       var x18___;
   [cajole]                                                                                       var x19___;
   [cajole]                                                                                       var x20___;
   [cajole]                                                                                       var x21___;
   [cajole]                                                                                       var x22___;
   [cajole]                                                                                       var x23___;
   [cajole]                                                                                       var x24___;
   [cajole]                                                                                       var x25___;
   [cajole]                                                                                       var x26___;
   [cajole]                                                                                       var x27___;
   [cajole]                                                                                       var x28___;
   [cajole]                                                                                       var x29___;
   [cajole]                                                                                       var x30___;
   [cajole]                                                                                       var x31___;
   [cajole]                                                                                       var x32___;
   [cajole]                                                                                       var x33___;
   [cajole]                                                                                       var x34___;
   [cajole]                                                                                       var x35___;
   [cajole]                                                                                       var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                       x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')));
   [cajole]                                                                                       x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')));
   [cajole]                                                                                       x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')));
   [cajole]                                                                                       var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ]));
   [cajole]                                                                                       x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ]);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')));
   [cajole]                                                                                       var text = (x28___ = document, x27___ = {
   [cajole]                                                                                                     'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                 return 'howdy &lt;there&gt;';
   [cajole]                                                                                                                                               }))
   [cajole]                                                                                                   }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ]));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')));
   [cajole]                                                                                       x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ]);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')));
   [cajole]                                                                                       ___.asSimpleFunc(pass)('test-create-element');
   [cajole]                                                                                     })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testCreateElement', function testCreateElement() {
   [cajole]                  var newNode = document.createElement('DIV');
   [cajole]                  assertEquals('', newNode.id);
   [cajole]                  newNode.id = 'newNodeId';
   [cajole]                  assertEquals('newNodeId', newNode.id);
   [cajole]                  newNode.id = '#bog&lt;us&gt;';
   [cajole]                  assertEquals('newNodeId', newNode.id);
   [cajole]                  newNode.id = 'not:bogus';
   [cajole]                  assertEquals('not:bogus', newNode.id);
   [cajole]                  assertEquals(1, newNode.nodeType);
   [cajole]                  var el = document.getElementById('test-create-element');
   [cajole]                  el.appendChild(newNode);
   [cajole]                  assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName);
   [cajole]                  assertEquals(newNode.tagName, el.firstChild.tagName);
   [cajole]                  assertEquals(newNode.tagName, el.lastChild.tagName);
   [cajole]                  var text = document.createTextNode({
   [cajole]                                                       'toString': function () {
   [cajole]                                                         return 'howdy &lt;there&gt;';
   [cajole]                                                       }
   [cajole]                                                     });
   [cajole]                  assertEquals(3, text.nodeType);
   [cajole]                  assertEquals('howdy &lt;there&gt;', text.data);
   [cajole]                  newNode.appendChild(text);
   [cajole]                  assertEquals(3, newNode.firstChild.nodeType);
   [cajole]                  assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML);
   [cajole]                  pass('test-create-element');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testCreateElement', ___.primFreeze(___.simpleFunc(function testCreateElement() {
   [cajole]                                                                                       var x0___;
   [cajole]                                                                                       var x1___;
   [cajole]                                                                                       var x2___;
   [cajole]                                                                                       var x3___;
   [cajole]                                                                                       var x4___;
   [cajole]                                                                                       var x5___;
   [cajole]                                                                                       var x6___;
   [cajole]                                                                                       var x7___;
   [cajole]                                                                                       var x8___;
   [cajole]                                                                                       var x9___;
   [cajole]                                                                                       var x10___;
   [cajole]                                                                                       var x11___;
   [cajole]                                                                                       var x12___;
   [cajole]                                                                                       var x13___;
   [cajole]                                                                                       var x14___;
   [cajole]                                                                                       var x15___;
   [cajole]                                                                                       var x16___;
   [cajole]                                                                                       var x17___;
   [cajole]                                                                                       var x18___;
   [cajole]                                                                                       var x19___;
   [cajole]                                                                                       var x20___;
   [cajole]                                                                                       var x21___;
   [cajole]                                                                                       var x22___;
   [cajole]                                                                                       var x23___;
   [cajole]                                                                                       var x24___;
   [cajole]                                                                                       var x25___;
   [cajole]                                                                                       var x26___;
   [cajole]                                                                                       var x27___;
   [cajole]                                                                                       var x28___;
   [cajole]                                                                                       var x29___;
   [cajole]                                                                                       var x30___;
   [cajole]                                                                                       var x31___;
   [cajole]                                                                                       var x32___;
   [cajole]                                                                                       var x33___;
   [cajole]                                                                                       var x34___;
   [cajole]                                                                                       var x35___;
   [cajole]                                                                                       var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                       x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')));
   [cajole]                                                                                       x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')));
   [cajole]                                                                                       x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')));
   [cajole]                                                                                       var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ]));
   [cajole]                                                                                       x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ]);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')));
   [cajole]                                                                                       var text = (x28___ = document, x27___ = {
   [cajole]                                                                                                     'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                 return 'howdy &lt;there&gt;';
   [cajole]                                                                                                                                               }))
   [cajole]                                                                                                   }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ]));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')));
   [cajole]                                                                                       x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ]);
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')));
   [cajole]                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')));
   [cajole]                                                                                       ___.asSimpleFunc(pass)('test-create-element');
   [cajole]                                                                                     })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testInnerHtml'
   [cajole] result: (StringLiteral) 'testInnerHtml'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-inner-html'
   [cajole] result: (StringLiteral) 'test-inner-html'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-inner-html')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var container = document.getElementById('test-inner-html')
   [cajole] result: (Declaration) var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;'
   [cajole] result: (StringLiteral) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;'
   [cajole] result: (StringLiteral) ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;'
   [cajole] result: (SimpleOperation) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;'
   [cajole] result: (StringLiteral) 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;'
   [cajole] result: (SimpleOperation) '&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) canonInnerHtml
   [cajole] result: (SpecialOperation) ___.primFreeze(canonInnerHtml)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) container.innerHTML
   [cajole] result: (SpecialOperation) x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) canonInnerHtml(container.innerHTML)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;'
   [cajole] result: (StringLiteral) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;'
   [cajole] result: (StringLiteral) ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;'
   [cajole] result: (SimpleOperation) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'
   [cajole] result: (StringLiteral) 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'
   [cajole] result: (SimpleOperation) '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'
   [cajole] result: (SpecialOperation) x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'
   [cajole] result: (ExpressionStmt) x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/'
   [cajole] result: (StringLiteral) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;'
   [cajole] result: (StringLiteral) '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;'
   [cajole] result: (SimpleOperation) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;'
   [cajole] result: (StringLiteral) ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;'
   [cajole] result: (SimpleOperation) '&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) canonInnerHtml
   [cajole] result: (SpecialOperation) ___.primFreeze(canonInnerHtml)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) directAccess
   [cajole] result: (Reference) directAccess

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) directAccess.getInnerHTML(container)
   [cajole] result: (SpecialOperation) x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) canonInnerHtml(directAccess.getInnerHTML(container))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-inner-html'
   [cajole] result: (StringLiteral) 'test-inner-html'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-inner-html')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-inner-html')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-inner-html')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-inner-html')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var container = document.getElementById('test-inner-html') assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML)) container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;'assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container))) pass('test-inner-html')
   [cajole] result: (ParseTreeNodeContainer) var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML')))) x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ])))) ___.asSimpleFunc(pass)('test-inner-html')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testInnerHtml() {
   [cajole]   var container = document.getElementById('test-inner-html');
   [cajole]   assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML));
   [cajole]   container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;';
   [cajole]   assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]   pass('test-inner-html');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testInnerHtml() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))));
   [cajole]                                 x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))));
   [cajole]                                 ___.asSimpleFunc(pass)('test-inner-html');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testInnerHtml', function testInnerHtml() {
   [cajole]                  var container = document.getElementById('test-inner-html');
   [cajole]                  assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML));
   [cajole]                  container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;';
   [cajole]                  assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                  pass('test-inner-html');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testInnerHtml', ___.primFreeze(___.simpleFunc(function testInnerHtml() {
   [cajole]                                                                                   var x0___;
   [cajole]                                                                                   var x1___;
   [cajole]                                                                                   var x2___;
   [cajole]                                                                                   var x3___;
   [cajole]                                                                                   var x4___;
   [cajole]                                                                                   var x5___;
   [cajole]                                                                                   var x6___;
   [cajole]                                                                                   var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))));
   [cajole]                                                                                   x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___);
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))));
   [cajole]                                                                                   ___.asSimpleFunc(pass)('test-inner-html');
   [cajole]                                                                                 })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testInnerHtml', function testInnerHtml() {
   [cajole]                  var container = document.getElementById('test-inner-html');
   [cajole]                  assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML));
   [cajole]                  container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;';
   [cajole]                  assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                  pass('test-inner-html');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testInnerHtml', ___.primFreeze(___.simpleFunc(function testInnerHtml() {
   [cajole]                                                                                   var x0___;
   [cajole]                                                                                   var x1___;
   [cajole]                                                                                   var x2___;
   [cajole]                                                                                   var x3___;
   [cajole]                                                                                   var x4___;
   [cajole]                                                                                   var x5___;
   [cajole]                                                                                   var x6___;
   [cajole]                                                                                   var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))));
   [cajole]                                                                                   x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___);
   [cajole]                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))));
   [cajole]                                                                                   ___.asSimpleFunc(pass)('test-inner-html');
   [cajole]                                                                                 })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testForms'
   [cajole] result: (StringLiteral) 'testForms'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'FORM'
   [cajole] result: (StringLiteral) 'FORM'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('FORM')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var form = document.createElement('FORM')
   [cajole] result: (Declaration) var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'return false'
   [cajole] result: (StringLiteral) 'return false'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) form
   [cajole] result: (Reference) form

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'onsubmit'
   [cajole] result: (StringLiteral) 'onsubmit'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) directAccess
   [cajole] result: (Reference) directAccess

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) directAccess.getAttribute(form, 'onsubmit')
   [cajole] result: (SpecialOperation) x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-forms'
   [cajole] result: (StringLiteral) 'test-forms'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-forms')
   [cajole] result: (SpecialOperation) x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var container = document.getElementById('test-forms')
   [cajole] result: (Declaration) var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;form onsubmit=&quot;foo()&quot;&gt;'
   [cajole] result: (StringLiteral) '&lt;form onsubmit=&quot;foo()&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (StringLiteral) '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (SimpleOperation) '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (SpecialOperation) x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (ExpressionStmt) x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;form onsubmit=\''
   [cajole] result: (StringLiteral) '&lt;form onsubmit=\''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'try { plugin_dispatchEvent___'
   [cajole] result: (StringLiteral) 'try { plugin_dispatchEvent___'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___'
   [cajole] result: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '(this, event || window.event, 0, &quot;foo&quot;);'
   [cajole] result: (StringLiteral) '(this, event || window.event, 0, &quot;foo&quot;);'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);'
   [cajole] result: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' } finally { return false; }\'&gt;'
   [cajole] result: (StringLiteral) ' } finally { return false; }\'&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;'
   [cajole] result: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (StringLiteral) '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'
   [cajole] result: (SimpleOperation) '&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) canonInnerHtml
   [cajole] result: (SpecialOperation) ___.primFreeze(canonInnerHtml)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) directAccess
   [cajole] result: (Reference) directAccess

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) directAccess.getInnerHTML(container)
   [cajole] result: (SpecialOperation) x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) canonInnerHtml(directAccess.getInnerHTML(container))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-forms'
   [cajole] result: (StringLiteral) 'test-forms'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-forms')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-forms')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-forms')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-forms')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var form = document.createElement('FORM') assertEquals('return false', directAccess.getAttribute(form, 'onsubmit')) var container = document.getElementById('test-forms') container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;'assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container))) pass('test-forms')
   [cajole] result: (ParseTreeNodeContainer) var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ]))) var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ])) x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___) ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ])))) ___.asSimpleFunc(pass)('test-forms')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testForms() {
   [cajole]   var form = document.createElement('FORM');
   [cajole]   assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'));
   [cajole]   var container = document.getElementById('test-forms');
   [cajole]   container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;';
   [cajole]   assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]   pass('test-forms');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testForms() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])));
   [cajole]                                 var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ]));
   [cajole]                                 x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))));
   [cajole]                                 ___.asSimpleFunc(pass)('test-forms');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testForms', function testForms() {
   [cajole]                  var form = document.createElement('FORM');
   [cajole]                  assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'));
   [cajole]                  var container = document.getElementById('test-forms');
   [cajole]                  container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;';
   [cajole]                  assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                  pass('test-forms');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testForms', ___.primFreeze(___.simpleFunc(function testForms() {
   [cajole]                                                                               var x0___;
   [cajole]                                                                               var x1___;
   [cajole]                                                                               var x2___;
   [cajole]                                                                               var x3___;
   [cajole]                                                                               var x4___;
   [cajole]                                                                               var x5___;
   [cajole]                                                                               var x6___;
   [cajole]                                                                               var x7___;
   [cajole]                                                                               var x8___;
   [cajole]                                                                               var x9___;
   [cajole]                                                                               var x10___;
   [cajole]                                                                               var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                               ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])));
   [cajole]                                                                               var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ]));
   [cajole]                                                                               x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___);
   [cajole]                                                                               ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))));
   [cajole]                                                                               ___.asSimpleFunc(pass)('test-forms');
   [cajole]                                                                             })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testForms', function testForms() {
   [cajole]                  var form = document.createElement('FORM');
   [cajole]                  assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'));
   [cajole]                  var container = document.getElementById('test-forms');
   [cajole]                  container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;';
   [cajole]                  assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                  pass('test-forms');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testForms', ___.primFreeze(___.simpleFunc(function testForms() {
   [cajole]                                                                               var x0___;
   [cajole]                                                                               var x1___;
   [cajole]                                                                               var x2___;
   [cajole]                                                                               var x3___;
   [cajole]                                                                               var x4___;
   [cajole]                                                                               var x5___;
   [cajole]                                                                               var x6___;
   [cajole]                                                                               var x7___;
   [cajole]                                                                               var x8___;
   [cajole]                                                                               var x9___;
   [cajole]                                                                               var x10___;
   [cajole]                                                                               var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                               ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])));
   [cajole]                                                                               var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ]));
   [cajole]                                                                               x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___);
   [cajole]                                                                               ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))));
   [cajole]                                                                               ___.asSimpleFunc(pass)('test-forms');
   [cajole]                                                                             })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-forms'
   [cajole] result: (StringLiteral) 'test-forms'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-forms')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'test-forms', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var container = document.getElementById('test-forms')
   [cajole] result: (Declaration) var container = (x1___ = document, x0___ = 'test-forms', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'blockquote'
   [cajole] result: (StringLiteral) 'blockquote'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('blockquote')
   [cajole] result: (SpecialOperation) x3___ = document, x2___ = 'blockquote', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var div = document.createElement('blockquote')
   [cajole] result: (Declaration) var div = (x3___ = document, x2___ = 'blockquote', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) div
   [cajole] result: (Reference) div

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;'
   [cajole] result: (StringLiteral) 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) div.innerHTML = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;'
   [cajole] result: (SpecialOperation) x4___ = div, x5___ = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;', x4___.innerHTML_canSet___? (x4___.innerHTML = x5___): ___.setPub(x4___, 'innerHTML', x5___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) div.innerHTML = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;'
   [cajole] result: (ExpressionStmt) x4___ = div, x5___ = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;', x4___.innerHTML_canSet___? (x4___.innerHTML = x5___): ___.setPub(x4___, 'innerHTML', x5___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) div
   [cajole] result: (Reference) div

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) container.appendChild(div)
   [cajole] result: (SpecialOperation) x7___ = container, x6___ = div, x7___.appendChild_canCall___? x7___.appendChild(x6___): ___.callPub(x7___, 'appendChild', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) container.appendChild(div)
   [cajole] result: (ExpressionStmt) x7___ = container, x6___ = div, x7___.appendChild_canCall___? x7___.appendChild(x6___): ___.callPub(x7___, 'appendChild', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var container = document.getElementById('test-forms') var div = document.createElement('blockquote') div.innerHTML = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;'container.appendChild(div)
   [cajole] result: (ParseTreeNodeContainer) var container = (x1___ = document, x0___ = 'test-forms', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])) var div = (x3___ = document, x2___ = 'blockquote', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ])) x4___ = div, x5___ = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;', x4___.innerHTML_canSet___? (x4___.innerHTML = x5___): ___.setPub(x4___, 'innerHTML', x5___) x7___ = container, x6___ = div, x7___.appendChild_canCall___? x7___.appendChild(x6___): ___.callPub(x7___, 'appendChild', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function foo() {
   [cajole]   var container = document.getElementById('test-forms');
   [cajole]   var div = document.createElement('blockquote');
   [cajole]   div.innerHTML = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;';
   [cajole]   container.appendChild(div);
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testCantLoadScript'
   [cajole] result: (StringLiteral) 'testCantLoadScript'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SCRIPT'
   [cajole] result: (StringLiteral) 'SCRIPT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('SCRIPT')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) document.createElement('SCRIPT')
   [cajole] result: (ExpressionStmt) x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'successfully created a script tag'
   [cajole] result: (StringLiteral) 'successfully created a script tag'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail('successfully created a script tag')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail('successfully created a script tag')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: tryCatch
   [cajole] input: (TryStmt) try {
   [cajole]   document.createElement('SCRIPT');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] result: (TryStmt) try {
   [cajole]   x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'script'
   [cajole] result: (StringLiteral) 'script'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('script')
   [cajole] result: (SpecialOperation) x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) document.createElement('script')
   [cajole] result: (ExpressionStmt) x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'successfully created a script tag'
   [cajole] result: (StringLiteral) 'successfully created a script tag'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail('successfully created a script tag')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail('successfully created a script tag')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: tryCatch
   [cajole] input: (TryStmt) try {
   [cajole]   document.createElement('script');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] result: (TryStmt) try {
   [cajole]   x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'scRipt'
   [cajole] result: (StringLiteral) 'scRipt'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('scRipt')
   [cajole] result: (SpecialOperation) x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) document.createElement('scRipt')
   [cajole] result: (ExpressionStmt) x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'successfully created a script tag'
   [cajole] result: (StringLiteral) 'successfully created a script tag'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail('successfully created a script tag')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail('successfully created a script tag')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: tryCatch
   [cajole] input: (TryStmt) try {
   [cajole]   document.createElement('scRipt');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] result: (TryStmt) try {
   [cajole]   x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = 0
   [cajole] result: (Declaration) var i = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) ++i
   [cajole] result: (AssignOperation) ++i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ++i &amp; 1
   [cajole] result: (SimpleOperation) ++i &amp; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'DIV'
   [cajole] result: (StringLiteral) 'DIV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SCRIPT'
   [cajole] result: (StringLiteral) 'SCRIPT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) ++i &amp; 1? 'DIV': 'SCRIPT'
   [cajole] result: (ControlOperation) ++i &amp; 1? 'DIV': 'SCRIPT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return ++i &amp; 1? 'DIV': 'SCRIPT'
   [cajole] result: (ReturnStmt) return ++i &amp; 1? 'DIV': 'SCRIPT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return ++i &amp; 1? 'DIV': 'SCRIPT'
   [cajole] result: (ParseTreeNodeContainer) return ++i &amp; 1? 'DIV': 'SCRIPT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function () {
   [cajole]   return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) function () {
   [cajole]   return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapNonEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole]   'toString': function () {
   [cajole]     return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]   }
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole]   'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                               return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                             }))
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement({
   [cajole]                          'toString': function () {
   [cajole]                            return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                          }
   [cajole]                        })
   [cajole] result: (SpecialOperation) x7___ = document, x6___ = {
   [cajole]   'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                               return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                             }))
   [cajole] }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var node = document.createElement({
   [cajole]                                     'toString': function () {
   [cajole]                                       return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                     }
   [cajole]                                   })
   [cajole] result: (Declaration) var node = (x7___ = document, x6___ = {
   [cajole]               'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                           return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                         }))
   [cajole]             }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'DIV'
   [cajole] result: (StringLiteral) 'DIV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) node
   [cajole] result: (Reference) node

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) node.tagName
   [cajole] result: (SpecialOperation) x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('DIV', node.tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('DIV', node.tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: tryCatch
   [cajole] input: (TryStmt) try {
   [cajole]   var i = 0;
   [cajole]   var node = document.createElement({
   [cajole]                                       'toString': function () {
   [cajole]                                         return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                       }
   [cajole]                                     });
   [cajole]   assertEquals('DIV', node.tagName);
   [cajole] } catch (e) {
   [cajole] }
   [cajole] result: (TryStmt) try {
   [cajole]   var i = 0;
   [cajole]   var node = (x7___ = document, x6___ = {
   [cajole]                 'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                             return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                           }))
   [cajole]               }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-no-script'
   [cajole] result: (StringLiteral) 'test-no-script'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-no-script')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-no-script')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-no-script')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-no-script')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) try {
   [cajole]   document.createElement('SCRIPT');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] try {
   [cajole]   document.createElement('script');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] try {
   [cajole]   document.createElement('scRipt');
   [cajole]   fail('successfully created a script tag');
   [cajole] } catch (e) {
   [cajole] }
   [cajole] try {
   [cajole]   var i = 0;
   [cajole]   var node = document.createElement({
   [cajole]                                       'toString': function () {
   [cajole]                                         return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                       }
   [cajole]                                     });
   [cajole]   assertEquals('DIV', node.tagName);
   [cajole] } catch (e) {
   [cajole] }
   [cajole] pass('test-no-script')
   [cajole] result: (ParseTreeNodeContainer) try {
   [cajole]   x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }
   [cajole] try {
   [cajole]   x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }
   [cajole] try {
   [cajole]   x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }
   [cajole] try {
   [cajole]   var i = 0;
   [cajole]   var node = (x7___ = document, x6___ = {
   [cajole]                 'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                             return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                           }))
   [cajole]               }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole] }
   [cajole] ___.asSimpleFunc(pass)('test-no-script')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testCantLoadScript() {
   [cajole]   try {
   [cajole]     document.createElement('SCRIPT');
   [cajole]     fail('successfully created a script tag');
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole]   try {
   [cajole]     document.createElement('script');
   [cajole]     fail('successfully created a script tag');
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole]   try {
   [cajole]     document.createElement('scRipt');
   [cajole]     fail('successfully created a script tag');
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole]   try {
   [cajole]     var i = 0;
   [cajole]     var node = document.createElement({
   [cajole]                                         'toString': function () {
   [cajole]                                           return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                         }
   [cajole]                                       });
   [cajole]     assertEquals('DIV', node.tagName);
   [cajole]   } catch (e) {
   [cajole]   }
   [cajole]   pass('test-no-script');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testCantLoadScript() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 try {
   [cajole]                                   x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                 } catch (ex___) {
   [cajole]                                   try {
   [cajole]                                     throw ___.tameException(ex___);
   [cajole]                                   } catch (e) {
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 try {
   [cajole]                                   x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                 } catch (ex___) {
   [cajole]                                   try {
   [cajole]                                     throw ___.tameException(ex___);
   [cajole]                                   } catch (e) {
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 try {
   [cajole]                                   x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                 } catch (ex___) {
   [cajole]                                   try {
   [cajole]                                     throw ___.tameException(ex___);
   [cajole]                                   } catch (e) {
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 try {
   [cajole]                                   var i = 0;
   [cajole]                                   var node = (x7___ = document, x6___ = {
   [cajole]                                                 'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                             return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                                                           }))
   [cajole]                                               }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole]                                 } catch (ex___) {
   [cajole]                                   try {
   [cajole]                                     throw ___.tameException(ex___);
   [cajole]                                   } catch (e) {
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 ___.asSimpleFunc(pass)('test-no-script');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testCantLoadScript', function testCantLoadScript() {
   [cajole]                  try {
   [cajole]                    document.createElement('SCRIPT');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    document.createElement('script');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    document.createElement('scRipt');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    var i = 0;
   [cajole]                    var node = document.createElement({
   [cajole]                                                        'toString': function () {
   [cajole]                                                          return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                        }
   [cajole]                                                      });
   [cajole]                    assertEquals('DIV', node.tagName);
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  pass('test-no-script');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testCantLoadScript', ___.primFreeze(___.simpleFunc(function testCantLoadScript() {
   [cajole]                                                                                        var x0___;
   [cajole]                                                                                        var x1___;
   [cajole]                                                                                        var x2___;
   [cajole]                                                                                        var x3___;
   [cajole]                                                                                        var x4___;
   [cajole]                                                                                        var x5___;
   [cajole]                                                                                        var x6___;
   [cajole]                                                                                        var x7___;
   [cajole]                                                                                        var x8___;
   [cajole]                                                                                        try {
   [cajole]                                                                                          x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          var i = 0;
   [cajole]                                                                                          var node = (x7___ = document, x6___ = {
   [cajole]                                                                                                        'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                    return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                                                                                                                  }))
   [cajole]                                                                                                      }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        ___.asSimpleFunc(pass)('test-no-script');
   [cajole]                                                                                      })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testCantLoadScript', function testCantLoadScript() {
   [cajole]                  try {
   [cajole]                    document.createElement('SCRIPT');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    document.createElement('script');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    document.createElement('scRipt');
   [cajole]                    fail('successfully created a script tag');
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  try {
   [cajole]                    var i = 0;
   [cajole]                    var node = document.createElement({
   [cajole]                                                        'toString': function () {
   [cajole]                                                          return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                        }
   [cajole]                                                      });
   [cajole]                    assertEquals('DIV', node.tagName);
   [cajole]                  } catch (e) {
   [cajole]                  }
   [cajole]                  pass('test-no-script');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testCantLoadScript', ___.primFreeze(___.simpleFunc(function testCantLoadScript() {
   [cajole]                                                                                        var x0___;
   [cajole]                                                                                        var x1___;
   [cajole]                                                                                        var x2___;
   [cajole]                                                                                        var x3___;
   [cajole]                                                                                        var x4___;
   [cajole]                                                                                        var x5___;
   [cajole]                                                                                        var x6___;
   [cajole]                                                                                        var x7___;
   [cajole]                                                                                        var x8___;
   [cajole]                                                                                        try {
   [cajole]                                                                                          x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        try {
   [cajole]                                                                                          var i = 0;
   [cajole]                                                                                          var node = (x7___ = document, x6___ = {
   [cajole]                                                                                                        'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                    return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                                                                                                                  }))
   [cajole]                                                                                                      }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole]                                                                                        } catch (ex___) {
   [cajole]                                                                                          try {
   [cajole]                                                                                            throw ___.tameException(ex___);
   [cajole]                                                                                          } catch (e) {
   [cajole]                                                                                          }
   [cajole]                                                                                        }
   [cajole]                                                                                        ___.asSimpleFunc(pass)('test-no-script');
   [cajole]                                                                                      })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testAddEventListener'
   [cajole] result: (StringLiteral) 'testAddEventListener'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-add-event-listener'
   [cajole] result: (StringLiteral) 'test-add-event-listener'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-add-event-listener')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var container = document.getElementById('test-add-event-listener')
   [cajole] result: (Declaration) var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'click'
   [cajole] result: (StringLiteral) 'click'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'received event'
   [cajole] result: (StringLiteral) 'received event'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.log('received event')
   [cajole] result: (SpecialOperation) x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.log('received event')
   [cajole] result: (ExpressionStmt) x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'P'
   [cajole] result: (StringLiteral) 'P'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) node
   [cajole] result: (Reference) node

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) node.tagName
   [cajole] result: (SpecialOperation) x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('P', node.tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('P', node.tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'click'
   [cajole] result: (StringLiteral) 'click'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) event
   [cajole] result: (Reference) event

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) event.type
   [cajole] result: (SpecialOperation) x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('click', event.type)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('click', event.type)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-add-event-listener'
   [cajole] result: (StringLiteral) 'test-add-event-listener'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-add-event-listener')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-add-event-listener')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-add-event-listener')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-add-event-listener')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) console.log('received event') assertEquals('P', node.tagName) assertEquals('click', event.type) pass('test-add-event-listener')
   [cajole] result: (ParseTreeNodeContainer) x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]) ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName'))) ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type'))) ___.asSimpleFunc(pass)('test-add-event-listener')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (node, event) {
   [cajole]   console.log('received event');
   [cajole]   assertEquals('P', node.tagName);
   [cajole]   assertEquals('click', event.type);
   [cajole]   pass('test-add-event-listener');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                 ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) container.addEventListener('click', function (node, event) {
   [cajole]                              console.log('received event');
   [cajole]                              assertEquals('P', node.tagName);
   [cajole]                              assertEquals('click', event.type);
   [cajole]                              pass('test-add-event-listener');
   [cajole]                            })
   [cajole] result: (SpecialOperation) x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                              var x0___;
   [cajole]                                                                              var x1___;
   [cajole]                                                                              var x2___;
   [cajole]                                                                              var x3___;
   [cajole]                                                                              x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                              ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                            }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) container.addEventListener('click', function (node, event) {
   [cajole]                              console.log('received event');
   [cajole]                              assertEquals('P', node.tagName);
   [cajole]                              assertEquals('click', event.type);
   [cajole]                              pass('test-add-event-listener');
   [cajole]                            })
   [cajole] result: (ExpressionStmt) x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                              var x0___;
   [cajole]                                                                              var x1___;
   [cajole]                                                                              var x2___;
   [cajole]                                                                              var x3___;
   [cajole]                                                                              x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                              ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                            }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var container = document.getElementById('test-add-event-listener') container.addEventListener('click', function (node, event) {
   [cajole]                                                                                                 console.log('received event');
   [cajole]                                                                                                 assertEquals('P', node.tagName);
   [cajole]                                                                                                 assertEquals('click', event.type);
   [cajole]                                                                                                 pass('test-add-event-listener');
   [cajole]                                                                                               })
   [cajole] result: (ParseTreeNodeContainer) var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])) x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                                                                                                                                                                                                                   var x0___;
   [cajole]                                                                                                                                                                                                                                                                   var x1___;
   [cajole]                                                                                                                                                                                                                                                                   var x2___;
   [cajole]                                                                                                                                                                                                                                                                   var x3___;
   [cajole]                                                                                                                                                                                                                                                                   x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                                                                                                                                                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                                                                                                                                                                                                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                                                                                                                                                                                                                   ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                                                                                                                                                                                                                 }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testAddEventListener() {
   [cajole]   var container = document.getElementById('test-add-event-listener');
   [cajole]   container.addEventListener('click', function (node, event) {
   [cajole]                                console.log('received event');
   [cajole]                                assertEquals('P', node.tagName);
   [cajole]                                assertEquals('click', event.type);
   [cajole]                                pass('test-add-event-listener');
   [cajole]                              });
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testAddEventListener() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                 x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                                                              var x0___;
   [cajole]                                                                                                              var x1___;
   [cajole]                                                                                                              var x2___;
   [cajole]                                                                                                              var x3___;
   [cajole]                                                                                                              x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                                                              ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                                                            }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ]);
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testAddEventListener', function testAddEventListener() {
   [cajole]                  var container = document.getElementById('test-add-event-listener');
   [cajole]                  container.addEventListener('click', function (node, event) {
   [cajole]                                               console.log('received event');
   [cajole]                                               assertEquals('P', node.tagName);
   [cajole]                                               assertEquals('click', event.type);
   [cajole]                                               pass('test-add-event-listener');
   [cajole]                                             });
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testAddEventListener', ___.primFreeze(___.simpleFunc(function testAddEventListener() {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          var x1___;
   [cajole]                                                                                          var x2___;
   [cajole]                                                                                          var x3___;
   [cajole]                                                                                          var x4___;
   [cajole]                                                                                          var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                          x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                                                                                                                       var x0___;
   [cajole]                                                                                                                                                                       var x1___;
   [cajole]                                                                                                                                                                       var x2___;
   [cajole]                                                                                                                                                                       var x3___;
   [cajole]                                                                                                                                                                       x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                                                                                                                     }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ]);
   [cajole]                                                                                        })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testAddEventListener', function testAddEventListener() {
   [cajole]                  var container = document.getElementById('test-add-event-listener');
   [cajole]                  container.addEventListener('click', function (node, event) {
   [cajole]                                               console.log('received event');
   [cajole]                                               assertEquals('P', node.tagName);
   [cajole]                                               assertEquals('click', event.type);
   [cajole]                                               pass('test-add-event-listener');
   [cajole]                                             });
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testAddEventListener', ___.primFreeze(___.simpleFunc(function testAddEventListener() {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          var x1___;
   [cajole]                                                                                          var x2___;
   [cajole]                                                                                          var x3___;
   [cajole]                                                                                          var x4___;
   [cajole]                                                                                          var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                          x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                                                                                                                       var x0___;
   [cajole]                                                                                                                                                                       var x1___;
   [cajole]                                                                                                                                                                       var x2___;
   [cajole]                                                                                                                                                                       var x3___;
   [cajole]                                                                                                                                                                       x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                                                                                                                       ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                                                                                                                     }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ]);
   [cajole]                                                                                        })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) jsunitRegister
   [cajole] result: (Reference) jsunitRegister

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'testGetElementsByTagName'
   [cajole] result: (StringLiteral) 'testGetElementsByTagName'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-get-elements-by-tag-name'
   [cajole] result: (StringLiteral) 'test-get-elements-by-tag-name'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('test-get-elements-by-tag-name')
   [cajole] result: (SpecialOperation) x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var container = document.getElementById('test-get-elements-by-tag-name')
   [cajole] result: (Declaration) var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'li'
   [cajole] result: (StringLiteral) 'li'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) container
   [cajole] result: (Reference) container

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) container.getElementsByTagName('li')
   [cajole] result: (SpecialOperation) x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var items = container.getElementsByTagName('li')
   [cajole] result: (Declaration) var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 5
   [cajole] result: (IntegerLiteral) 5

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items.length
   [cajole] result: (SpecialOperation) x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(5, items.length)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(5, items.length)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = 0
   [cajole] result: (Declaration) var i = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items.length
   [cajole] result: (SpecialOperation) x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &lt; items.length
   [cajole] result: (SimpleOperation) i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) ++i
   [cajole] result: (AssignOperation) ++i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ++i
   [cajole] result: (ExpressionStmt) ++i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'LI'
   [cajole] result: (StringLiteral) 'LI'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(items, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ i ].tagName
   [cajole] result: (SpecialOperation) x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('LI', items[ i ].tagName)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('LI', items[ i ].tagName)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals('LI', items[ i ].tagName);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = 0; i &lt; items.length; ++i) {
   [cajole]   assertEquals('LI', items[ i ].tagName);
   [cajole] }
   [cajole] result: (ForLoop) for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'One'
   [cajole] result: (StringLiteral) 'One'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(items, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 0 ].innerHTML
   [cajole] result: (SpecialOperation) x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Two'
   [cajole] result: (StringLiteral) 'Two'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(items, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 1 ].innerHTML
   [cajole] result: (SpecialOperation) x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Three'
   [cajole] result: (StringLiteral) 'Three'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(items, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 2 ].firstChild
   [cajole] result: (SpecialOperation) x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 2 ].firstChild.data
   [cajole] result: (SpecialOperation) x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Pi'
   [cajole] result: (StringLiteral) 'Pi'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 3
   [cajole] result: (IntegerLiteral) 3

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ 3 ]
   [cajole] result: (SpecialOperation) ___.readPub(items, 3)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 3 ].innerHTML
   [cajole] result: (SpecialOperation) x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'sqrt(10)'
   [cajole] result: (StringLiteral) 'sqrt(10)'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) items
   [cajole] result: (Reference) items

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 4
   [cajole] result: (IntegerLiteral) 4

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) items[ 4 ]
   [cajole] result: (SpecialOperation) ___.readPub(items, 4)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) items[ 4 ].innerHTML
   [cajole] result: (SpecialOperation) x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) pass
   [cajole] result: (Reference) pass

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'test-get-elements-by-tag-name'
   [cajole] result: (StringLiteral) 'test-get-elements-by-tag-name'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) pass('test-get-elements-by-tag-name')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(pass)('test-get-elements-by-tag-name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) pass('test-get-elements-by-tag-name')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(pass)('test-get-elements-by-tag-name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var container = document.getElementById('test-get-elements-by-tag-name') var items = container.getElementsByTagName('li') assertEquals(5, items.length) for (var i = 0; i &lt; items.length; ++i) {
   [cajole]   assertEquals('LI', items[ i ].tagName);
   [cajole] }
   [cajole] assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, '')) assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, '')) assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, '')) assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, '')) assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, '')) pass('test-get-elements-by-tag-name')
   [cajole] result: (ParseTreeNodeContainer) var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])) var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ])) ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length'))) for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole] }
   [cajole] ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ]))) ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ]))) ___.asSimpleFunc(pass)('test-get-elements-by-tag-name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function testGetElementsByTagName() {
   [cajole]   var container = document.getElementById('test-get-elements-by-tag-name');
   [cajole]   var items = container.getElementsByTagName('li');
   [cajole]   assertEquals(5, items.length);
   [cajole]   for (var i = 0; i &lt; items.length; ++i) {
   [cajole]     assertEquals('LI', items[ i ].tagName);
   [cajole]   }
   [cajole]   assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]   assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]   assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''));
   [cajole]   assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]   assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]   pass('test-get-elements-by-tag-name');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function testGetElementsByTagName() {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var x13___;
   [cajole]                                 var x14___;
   [cajole]                                 var x15___;
   [cajole]                                 var x16___;
   [cajole]                                 var x17___;
   [cajole]                                 var x18___;
   [cajole]                                 var x19___;
   [cajole]                                 var x20___;
   [cajole]                                 var x21___;
   [cajole]                                 var x22___;
   [cajole]                                 var x23___;
   [cajole]                                 var x24___;
   [cajole]                                 var x25___;
   [cajole]                                 var x26___;
   [cajole]                                 var x27___;
   [cajole]                                 var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                 var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')));
   [cajole]                                 for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole]                                 }
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])));
   [cajole]                                 ___.asSimpleFunc(pass)('test-get-elements-by-tag-name');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) jsunitRegister('testGetElementsByTagName', function testGetElementsByTagName() {
   [cajole]                  var container = document.getElementById('test-get-elements-by-tag-name');
   [cajole]                  var items = container.getElementsByTagName('li');
   [cajole]                  assertEquals(5, items.length);
   [cajole]                  for (var i = 0; i &lt; items.length; ++i) {
   [cajole]                    assertEquals('LI', items[ i ].tagName);
   [cajole]                  }
   [cajole]                  assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  pass('test-get-elements-by-tag-name');
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(jsunitRegister)('testGetElementsByTagName', ___.primFreeze(___.simpleFunc(function testGetElementsByTagName() {
   [cajole]                                                                                              var x0___;
   [cajole]                                                                                              var x1___;
   [cajole]                                                                                              var x2___;
   [cajole]                                                                                              var x3___;
   [cajole]                                                                                              var x4___;
   [cajole]                                                                                              var x5___;
   [cajole]                                                                                              var x6___;
   [cajole]                                                                                              var x7___;
   [cajole]                                                                                              var x8___;
   [cajole]                                                                                              var x9___;
   [cajole]                                                                                              var x10___;
   [cajole]                                                                                              var x11___;
   [cajole]                                                                                              var x12___;
   [cajole]                                                                                              var x13___;
   [cajole]                                                                                              var x14___;
   [cajole]                                                                                              var x15___;
   [cajole]                                                                                              var x16___;
   [cajole]                                                                                              var x17___;
   [cajole]                                                                                              var x18___;
   [cajole]                                                                                              var x19___;
   [cajole]                                                                                              var x20___;
   [cajole]                                                                                              var x21___;
   [cajole]                                                                                              var x22___;
   [cajole]                                                                                              var x23___;
   [cajole]                                                                                              var x24___;
   [cajole]                                                                                              var x25___;
   [cajole]                                                                                              var x26___;
   [cajole]                                                                                              var x27___;
   [cajole]                                                                                              var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                              var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ]));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')));
   [cajole]                                                                                              for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole]                                                                                              }
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(pass)('test-get-elements-by-tag-name');
   [cajole]                                                                                            })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) jsunitRegister('testGetElementsByTagName', function testGetElementsByTagName() {
   [cajole]                  var container = document.getElementById('test-get-elements-by-tag-name');
   [cajole]                  var items = container.getElementsByTagName('li');
   [cajole]                  assertEquals(5, items.length);
   [cajole]                  for (var i = 0; i &lt; items.length; ++i) {
   [cajole]                    assertEquals('LI', items[ i ].tagName);
   [cajole]                  }
   [cajole]                  assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                  pass('test-get-elements-by-tag-name');
   [cajole]                })
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(jsunitRegister)('testGetElementsByTagName', ___.primFreeze(___.simpleFunc(function testGetElementsByTagName() {
   [cajole]                                                                                              var x0___;
   [cajole]                                                                                              var x1___;
   [cajole]                                                                                              var x2___;
   [cajole]                                                                                              var x3___;
   [cajole]                                                                                              var x4___;
   [cajole]                                                                                              var x5___;
   [cajole]                                                                                              var x6___;
   [cajole]                                                                                              var x7___;
   [cajole]                                                                                              var x8___;
   [cajole]                                                                                              var x9___;
   [cajole]                                                                                              var x10___;
   [cajole]                                                                                              var x11___;
   [cajole]                                                                                              var x12___;
   [cajole]                                                                                              var x13___;
   [cajole]                                                                                              var x14___;
   [cajole]                                                                                              var x15___;
   [cajole]                                                                                              var x16___;
   [cajole]                                                                                              var x17___;
   [cajole]                                                                                              var x18___;
   [cajole]                                                                                              var x19___;
   [cajole]                                                                                              var x20___;
   [cajole]                                                                                              var x21___;
   [cajole]                                                                                              var x22___;
   [cajole]                                                                                              var x23___;
   [cajole]                                                                                              var x24___;
   [cajole]                                                                                              var x25___;
   [cajole]                                                                                              var x26___;
   [cajole]                                                                                              var x27___;
   [cajole]                                                                                              var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                              var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ]));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')));
   [cajole]                                                                                              for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole]                                                                                              }
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])));
   [cajole]                                                                                              ___.asSimpleFunc(pass)('test-get-elements-by-tag-name');
   [cajole]                                                                                            })))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var console
   [cajole] result: (Declaration) var console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof console
   [cajole] result: (SpecialOperation) typeof console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'undefined'
   [cajole] result: (StringLiteral) 'undefined'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) typeof console !== 'undefined'
   [cajole] result: (SimpleOperation) typeof console !== 'undefined'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.trace()
   [cajole] result: (SpecialOperation) x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.trace()
   [cajole] result: (ExpressionStmt) x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.log(msg)
   [cajole] result: (SpecialOperation) x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.log(msg)
   [cajole] result: (ExpressionStmt) x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   console.trace();
   [cajole]   console.log(msg);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ]);
   [cajole]   x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (typeof console !== 'undefined') {
   [cajole]   console.trace();
   [cajole]   console.log(msg);
   [cajole] }
   [cajole] result: (Conditional) if (typeof console !== 'undefined') {
   [cajole]   x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ]);
   [cajole]   x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Error
   [cajole] result: (Reference) Error

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new Error(msg)
   [cajole] result: (SpecialOperation) new (___.asCtor(Error))(msg)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw new Error(msg)
   [cajole] result: (ThrowStmt) throw new (___.asCtor(Error))(msg)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) if (typeof console !== 'undefined') {
   [cajole]   console.trace();
   [cajole]   console.log(msg);
   [cajole] }
   [cajole] throw new Error(msg)
   [cajole] result: (ParseTreeNodeContainer) if (typeof console !== 'undefined') {
   [cajole]   x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ]);
   [cajole]   x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ]);
   [cajole] }
   [cajole] throw new (___.asCtor(Error))(msg)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function fail(msg) {
   [cajole]   if (typeof console !== 'undefined') {
   [cajole]     console.trace();
   [cajole]     console.log(msg);
   [cajole]   }
   [cajole]   throw new Error(msg);
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var n = 0
   [cajole] result: (Declaration) var n = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.length
   [cajole] result: (SpecialOperation) x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) n &lt; a.length
   [cajole] result: (SimpleOperation) n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) b.length
   [cajole] result: (SpecialOperation) x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) n &lt; b.length
   [cajole] result: (SimpleOperation) n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) n &lt; a.length &amp;&amp; n &lt; b.length
   [cajole] result: (ControlOperation) n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) &amp;&amp; n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) a.charAt(n)
   [cajole] result: (SpecialOperation) x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) b.charAt(n)
   [cajole] result: (SpecialOperation) x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a.charAt(n) === b.charAt(n)
   [cajole] result: (SimpleOperation) (x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)
   [cajole] result: (ControlOperation) n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) &amp;&amp; n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')) &amp;&amp; (x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) ++n
   [cajole] result: (AssignOperation) ++n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ++n
   [cajole] result: (ExpressionStmt) ++n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   ++n;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ++n;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (WhileLoop) while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]   ++n;
   [cajole] }
   [cajole] result: (WhileLoop) while (n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) &amp;&amp; n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')) &amp;&amp; (x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]   ++n;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return n
   [cajole] result: (ReturnStmt) return n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var n = 0 while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]   ++n;
   [cajole] }
   [cajole] return n
   [cajole] result: (ParseTreeNodeContainer) var n = 0 while (n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) &amp;&amp; n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')) &amp;&amp; (x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]   ++n;
   [cajole] }
   [cajole] return n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function commonPrefix(a, b) {
   [cajole]   var n = 0;
   [cajole]   while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]     ++n;
   [cajole]   }
   [cajole]   return n;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.length
   [cajole] result: (SpecialOperation) x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = a.length
   [cajole] result: (Declaration) var i = (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) b.length
   [cajole] result: (SpecialOperation) x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var j = b.length
   [cajole] result: (Declaration) var j = (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) limit
   [cajole] result: (Reference) limit

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &gt; limit
   [cajole] result: (SimpleOperation) i &gt; limit

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) limit
   [cajole] result: (Reference) limit

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j &gt; limit
   [cajole] result: (SimpleOperation) j &gt; limit

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) i &gt; limit &amp;&amp; j &gt; limit
   [cajole] result: (ControlOperation) i &gt; limit &amp;&amp; j &gt; limit

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i - 1
   [cajole] result: (SimpleOperation) i - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) a.charAt(i - 1)
   [cajole] result: (SpecialOperation) x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j - 1
   [cajole] result: (SimpleOperation) j - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) b.charAt(j - 1)
   [cajole] result: (SpecialOperation) x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a.charAt(i - 1) === b.charAt(j - 1)
   [cajole] result: (SimpleOperation) (x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)
   [cajole] result: (ControlOperation) i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; (x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) --i
   [cajole] result: (ExpressionStmt) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --j
   [cajole] result: (AssignOperation) --j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) --j
   [cajole] result: (ExpressionStmt) --j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (WhileLoop) while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }
   [cajole] result: (WhileLoop) while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; (x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.length
   [cajole] result: (SpecialOperation) x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a.length - i
   [cajole] result: (SimpleOperation) (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return a.length - i
   [cajole] result: (ReturnStmt) return (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var i = a.length var j = b.length while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }
   [cajole] return a.length - i
   [cajole] result: (ParseTreeNodeContainer) var i = (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) var j = (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')) while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; (x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]   --i;
   [cajole]   --j;
   [cajole] }
   [cajole] return (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function commonSuffix(a, b, limit) {
   [cajole]   var i = a.length;
   [cajole]   var j = b.length;
   [cajole]   while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]     --i;
   [cajole]     --j;
   [cajole]   }
   [cajole]   return a.length - i;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var msg
   [cajole] result: (Declaration) var msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var a
   [cajole] result: (Declaration) var a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var b
   [cajole] result: (Declaration) var b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = null
   [cajole] result: (AssignOperation) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = null
   [cajole] result: (ExpressionStmt) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 0 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) b = arguments[ 1 ]
   [cajole] result: (AssignOperation) b = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) b = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) b = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   b = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   b = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   b = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   b = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 3
   [cajole] result: (IntegerLiteral) 3

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = arguments[ 0 ]
   [cajole] result: (AssignOperation) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 1 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) b = arguments[ 2 ]
   [cajole] result: (AssignOperation) b = ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) b = arguments[ 2 ]
   [cajole] result: (ExpressionStmt) b = ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   b = arguments[ 2 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   b = ___.readPub(a___, 2);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 3:
   [cajole] {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   b = arguments[ 2 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 3:
   [cajole] {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   b = ___.readPub(a___, 2);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + arguments
   [cajole] result: (SimpleOperation) 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + arguments
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + arguments
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     b = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     b = arguments[ 2 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     b = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     b = ___.readPub(a___, 2);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a !== b
   [cajole] result: (SimpleOperation) a !== b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof a
   [cajole] result: (SpecialOperation) typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'string'
   [cajole] result: (StringLiteral) 'string'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) typeof a === 'string'
   [cajole] result: (SimpleOperation) typeof a === 'string'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof b
   [cajole] result: (SpecialOperation) typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'string'
   [cajole] result: (StringLiteral) 'string'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) typeof b === 'string'
   [cajole] result: (SimpleOperation) typeof b === 'string'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) typeof a === 'string' &amp;&amp; typeof b === 'string'
   [cajole] result: (ControlOperation) typeof a === 'string' &amp;&amp; typeof b === 'string'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) commonPrefix
   [cajole] result: (SpecialOperation) ___.primFreeze(commonPrefix)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) commonPrefix(a, b)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var prefix = commonPrefix(a, b)
   [cajole] result: (Declaration) var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) commonSuffix
   [cajole] result: (SpecialOperation) ___.primFreeze(commonSuffix)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) prefix
   [cajole] result: (Reference) prefix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) commonSuffix(a, b, prefix)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var suffix = commonSuffix(a, b, prefix)
   [cajole] result: (Declaration) var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' :: '
   [cajole] result: (StringLiteral) ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) msg + ' :: '
   [cajole] result: (SimpleOperation) msg + ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) msg? msg + ' :: ': ''
   [cajole] result: (ControlOperation) msg? msg + ' :: ': ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;&lt;'
   [cajole] result: (StringLiteral) '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) prefix
   [cajole] result: (Reference) prefix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) a.substring(0, prefix)
   [cajole] result: (SpecialOperation) x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '#'
   [cajole] result: (StringLiteral) '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) prefix
   [cajole] result: (Reference) prefix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.length
   [cajole] result: (SpecialOperation) x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) suffix
   [cajole] result: (Reference) suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a.length - suffix
   [cajole] result: (SimpleOperation) (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) a.substring(prefix, a.length - suffix)
   [cajole] result: (SpecialOperation) x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '#'
   [cajole] result: (StringLiteral) '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.length
   [cajole] result: (SpecialOperation) x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) suffix
   [cajole] result: (Reference) suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a.length - suffix
   [cajole] result: (SimpleOperation) (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) a.substring(a.length - suffix)
   [cajole] result: (SpecialOperation) x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt;'
   [cajole] result: (StringLiteral) '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' != &lt;&lt;'
   [cajole] result: (StringLiteral) ' != &lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) prefix
   [cajole] result: (Reference) prefix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) b.substring(0, prefix)
   [cajole] result: (SpecialOperation) x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '#'
   [cajole] result: (StringLiteral) '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) prefix
   [cajole] result: (Reference) prefix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) b.length
   [cajole] result: (SpecialOperation) x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) suffix
   [cajole] result: (Reference) suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) b.length - suffix
   [cajole] result: (SimpleOperation) (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) b.substring(prefix, b.length - suffix)
   [cajole] result: (SpecialOperation) x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '#'
   [cajole] result: (StringLiteral) '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) b.length
   [cajole] result: (SpecialOperation) x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) suffix
   [cajole] result: (Reference) suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) b.length - suffix
   [cajole] result: (SimpleOperation) (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) b.substring(b.length - suffix)
   [cajole] result: (SpecialOperation) x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix)
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt;'
   [cajole] result: (StringLiteral) '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;'
   [cajole] result: (AssignOperation) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;'
   [cajole] result: (ExpressionStmt) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var prefix = commonPrefix(a, b);
   [cajole]   var suffix = commonSuffix(a, b, prefix);
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]   var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' :: '
   [cajole] result: (StringLiteral) ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) msg + ' :: '
   [cajole] result: (SimpleOperation) msg + ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) msg? msg + ' :: ': ''
   [cajole] result: (ControlOperation) msg? msg + ' :: ': ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;&lt;'
   [cajole] result: (StringLiteral) '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt; : '
   [cajole] result: (StringLiteral) '&gt;&gt; : '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof a
   [cajole] result: (SpecialOperation) typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' != &lt;&lt;'
   [cajole] result: (StringLiteral) ' != &lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt; : '
   [cajole] result: (StringLiteral) '&gt;&gt; : '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof b
   [cajole] result: (SpecialOperation) typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b
   [cajole] result: (AssignOperation) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b
   [cajole] result: (ExpressionStmt) msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]   var prefix = commonPrefix(a, b);
   [cajole]   var suffix = commonSuffix(a, b, prefix);
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole] } else {
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole] }
   [cajole] result: (Conditional) if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]   var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]   var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole] } else {
   [cajole]   msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail(msg)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))(msg)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail(msg)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))(msg)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = commonPrefix(a, b);
   [cajole]     var suffix = commonSuffix(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   fail(msg);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]     var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))(msg);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (a !== b) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = commonPrefix(a, b);
   [cajole]     var suffix = commonSuffix(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   fail(msg);
   [cajole] }
   [cajole] result: (Conditional) if (a !== b) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]     var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))(msg);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) function commonPrefix(a, b) {
   [cajole]   var n = 0;
   [cajole]   while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]     ++n;
   [cajole]   }
   [cajole]   return n;
   [cajole] }
   [cajole] function commonSuffix(a, b, limit) {
   [cajole]   var i = a.length;
   [cajole]   var j = b.length;
   [cajole]   while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]     --i;
   [cajole]     --j;
   [cajole]   }
   [cajole]   return a.length - i;
   [cajole] }
   [cajole] var msg var a var b switch (arguments.length) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     b = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     b = arguments[ 2 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] if (a !== b) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = commonPrefix(a, b);
   [cajole]     var suffix = commonSuffix(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   fail(msg);
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var msg var a var b switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     b = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     b = ___.readPub(a___, 2);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }
   [cajole] if (a !== b) {
   [cajole]   if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]     var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]     var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole]   } else {
   [cajole]     msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]   }
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))(msg);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertEquals() {
   [cajole]   function commonPrefix(a, b) {
   [cajole]     var n = 0;
   [cajole]     while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]       ++n;
   [cajole]     }
   [cajole]     return n;
   [cajole]   }
   [cajole]   function commonSuffix(a, b, limit) {
   [cajole]     var i = a.length;
   [cajole]     var j = b.length;
   [cajole]     while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]       --i;
   [cajole]       --j;
   [cajole]     }
   [cajole]     return a.length - i;
   [cajole]   }
   [cajole]   var msg;
   [cajole]   var a;
   [cajole]   var b;
   [cajole]   switch (arguments.length) {
   [cajole]   case 2:
   [cajole]     {
   [cajole]       msg = null;
   [cajole]       a = arguments[ 0 ];
   [cajole]       b = arguments[ 1 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   case 3:
   [cajole]     {
   [cajole]       msg = arguments[ 0 ];
   [cajole]       a = arguments[ 1 ];
   [cajole]       b = arguments[ 2 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + arguments;
   [cajole]   }
   [cajole]   if (a !== b) {
   [cajole]     if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]       var prefix = commonPrefix(a, b);
   [cajole]       var suffix = commonSuffix(a, b, prefix);
   [cajole]       msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole]     } else {
   [cajole]       msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]     }
   [cajole]     fail(msg);
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) true
   [cajole] result: (BooleanLiteral) true

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(true, arguments[ 0 ])
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(true, arguments[ 0 ])
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals(true, arguments[ 0 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 1:
   [cajole] {
   [cajole]   assertEquals(true, arguments[ 0 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 1:
   [cajole] {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) true
   [cajole] result: (BooleanLiteral) true

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(arguments[ 0 ], true, arguments[ 1 ])
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(arguments[ 0 ], true, arguments[ 1 ])
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + arguments
   [cajole] result: (SimpleOperation) 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + arguments
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + arguments
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     assertEquals(true, arguments[ 0 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0));
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1));
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     assertEquals(true, arguments[ 0 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0));
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1));
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertTrue() {
   [cajole]   switch (arguments.length) {
   [cajole]   case 1:
   [cajole]     {
   [cajole]       assertEquals(true, arguments[ 0 ]);
   [cajole]       break;
   [cajole]     }
   [cajole]   case 2:
   [cajole]     {
   [cajole]       assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + arguments;
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(false, arguments[ 0 ])
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(false, arguments[ 0 ])
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals(false, arguments[ 0 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 1:
   [cajole] {
   [cajole]   assertEquals(false, arguments[ 0 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 1:
   [cajole] {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(arguments[ 0 ], false, arguments[ 1 ])
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(arguments[ 0 ], false, arguments[ 1 ])
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1));
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + arguments
   [cajole] result: (SimpleOperation) 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + arguments
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + arguments
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     assertEquals(false, arguments[ 0 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0));
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1));
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     assertEquals(false, arguments[ 0 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + arguments;
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0));
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1));
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + a___;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertFalse() {
   [cajole]   switch (arguments.length) {
   [cajole]   case 1:
   [cajole]     {
   [cajole]       assertEquals(false, arguments[ 0 ]);
   [cajole]       break;
   [cajole]     }
   [cajole]   case 2:
   [cajole]     {
   [cajole]       assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + arguments;
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var msg
   [cajole] result: (Declaration) var msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var a
   [cajole] result: (Declaration) var a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var b
   [cajole] result: (Declaration) var b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var msg, a, b
   [cajole] result: (MultiDeclaration) var msg, a, b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = null
   [cajole] result: (AssignOperation) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = null
   [cajole] result: (ExpressionStmt) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 0 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) b = arguments[ 1 ]
   [cajole] result: (AssignOperation) b = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) b = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) b = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   b = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   b = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   b = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   b = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 3
   [cajole] result: (IntegerLiteral) 3

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = arguments[ 0 ]
   [cajole] result: (AssignOperation) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 1 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 2 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) b = arguments[ 2 ]
   [cajole] result: (AssignOperation) b = ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) b = arguments[ 2 ]
   [cajole] result: (ExpressionStmt) b = ___.readPub(a___, 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   b = arguments[ 2 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   b = ___.readPub(a___, 2);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 3:
   [cajole] {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   b = arguments[ 2 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 3:
   [cajole] {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   b = ___.readPub(a___, 2);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) argumetns
   [cajole] result: (Reference) argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + argumetns
   [cajole] result: (SimpleOperation) 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + argumetns
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     b = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     b = arguments[ 2 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     b = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     b = ___.readPub(a___, 2);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a &lt; b
   [cajole] result: (SimpleOperation) a &lt; b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ! (a &lt; b)
   [cajole] result: (SimpleOperation) ! (a &lt; b)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' :: '
   [cajole] result: (StringLiteral) ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) msg + ' :: '
   [cajole] result: (SimpleOperation) msg + ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) msg? msg + ' :: ': ''
   [cajole] result: (ControlOperation) msg? msg + ' :: ': ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '!(&lt;&lt;'
   [cajole] result: (StringLiteral) '!(&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt;: '
   [cajole] result: (StringLiteral) '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof a
   [cajole] result: (SpecialOperation) typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' &lt; '
   [cajole] result: (StringLiteral) ' &lt; '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;&lt;'
   [cajole] result: (StringLiteral) '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt;: '
   [cajole] result: (StringLiteral) '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof b
   [cajole] result: (SpecialOperation) typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ')'
   [cajole] result: (StringLiteral) ')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')')
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')')
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (! (a &lt; b)) {
   [cajole]   fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }
   [cajole] result: (Conditional) if (! (a &lt; b)) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var msg, a, b switch (arguments.length) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     b = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     b = arguments[ 2 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] if (! (a &lt; b)) {
   [cajole]   fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var msg, a, b switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     b = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] case 3:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     b = ___.readPub(a___, 2);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] if (! (a &lt; b)) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertLessThan() {
   [cajole]   var msg, a, b;
   [cajole]   switch (arguments.length) {
   [cajole]   case 2:
   [cajole]     {
   [cajole]       msg = null;
   [cajole]       a = arguments[ 0 ];
   [cajole]       b = arguments[ 1 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   case 3:
   [cajole]     {
   [cajole]       msg = arguments[ 0 ];
   [cajole]       a = arguments[ 1 ];
   [cajole]       b = arguments[ 2 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + argumetns;
   [cajole]   }
   [cajole]   if (! (a &lt; b)) {
   [cajole]     fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var msg
   [cajole] result: (Declaration) var msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var a
   [cajole] result: (Declaration) var a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var msg, a
   [cajole] result: (MultiDeclaration) var msg, a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = null
   [cajole] result: (AssignOperation) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = null
   [cajole] result: (ExpressionStmt) msg = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 0 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 1:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = arguments[ 0 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 1:
   [cajole] {
   [cajole]   msg = null;
   [cajole]   a = ___.readPub(a___, 0);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = arguments[ 0 ]
   [cajole] result: (AssignOperation) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) msg = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = arguments[ 1 ]
   [cajole] result: (AssignOperation) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) a = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = arguments[ 0 ];
   [cajole]   a = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   msg = ___.readPub(a___, 0);
   [cajole]   a = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) argumetns
   [cajole] result: (Reference) argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + argumetns
   [cajole] result: (SimpleOperation) 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + argumetns
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a !== null
   [cajole] result: (SimpleOperation) a !== null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' :: '
   [cajole] result: (StringLiteral) ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) msg + ' :: '
   [cajole] result: (SimpleOperation) msg + ' :: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) msg? msg + ' :: ': ''
   [cajole] result: (ControlOperation) msg? msg + ' :: ': ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Expected null, not '
   [cajole] result: (StringLiteral) 'Expected null, not '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;&lt;'
   [cajole] result: (StringLiteral) '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;'
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&gt;&gt;: '
   [cajole] result: (StringLiteral) '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: '
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: otherTypeof
   [cajole] input: (SpecialOperation) typeof a
   [cajole] result: (SpecialOperation) typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a
   [cajole] result: (SimpleOperation) (msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (a !== null) {
   [cajole]   fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }
   [cajole] result: (Conditional) if (a !== null) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var msg, a switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = arguments[ 0 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = arguments[ 0 ];
   [cajole]     a = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] if (a !== null) {
   [cajole]   fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var msg, a switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     msg = null;
   [cajole]     a = ___.readPub(a___, 0);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     msg = ___.readPub(a___, 0);
   [cajole]     a = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] if (a !== null) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertNull() {
   [cajole]   var msg, a;
   [cajole]   switch (arguments.length) {
   [cajole]   case 1:
   [cajole]     {
   [cajole]       msg = null;
   [cajole]       a = arguments[ 0 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   case 2:
   [cajole]     {
   [cajole]       msg = arguments[ 0 ];
   [cajole]       a = arguments[ 1 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + argumetns;
   [cajole]   }
   [cajole]   if (a !== null) {
   [cajole]     fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var func
   [cajole] result: (Declaration) var func

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var msg
   [cajole] result: (Declaration) var msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var func, msg
   [cajole] result: (MultiDeclaration) var func, msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) arguments.length
   [cajole] result: (SpecialOperation) x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) func = arguments[ 0 ]
   [cajole] result: (AssignOperation) func = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) func = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) func = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   func = arguments[ 0 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   func = ___.readPub(a___, 0);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 1:
   [cajole] {
   [cajole]   func = arguments[ 0 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 1:
   [cajole] {
   [cajole]   func = ___.readPub(a___, 0);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) func = arguments[ 0 ]
   [cajole] result: (AssignOperation) func = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) func = arguments[ 0 ]
   [cajole] result: (ExpressionStmt) func = ___.readPub(a___, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varArgs
   [cajole] input: (Reference) arguments
   [cajole] result: (Reference) a___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) arguments[ 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) msg = arguments[ 1 ]
   [cajole] result: (AssignOperation) msg = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) msg = arguments[ 1 ]
   [cajole] result: (ExpressionStmt) msg = ___.readPub(a___, 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BreakStmt) break
   [cajole] result: (BreakStmt) break

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   func = arguments[ 0 ];
   [cajole]   msg = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   func = ___.readPub(a___, 0);
   [cajole]   msg = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (CaseStmt) case 2:
   [cajole] {
   [cajole]   func = arguments[ 0 ];
   [cajole]   msg = arguments[ 1 ];
   [cajole]   break;
   [cajole] }
   [cajole] result: (CaseStmt) case 2:
   [cajole] {
   [cajole]   func = ___.readPub(a___, 0);
   [cajole]   msg = ___.readPub(a___, 1);
   [cajole]   break;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'missing arguments '
   [cajole] result: (StringLiteral) 'missing arguments '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) argumetns
   [cajole] result: (Reference) argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'missing arguments ' + argumetns
   [cajole] result: (SimpleOperation) 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ThrowStmt) throw 'missing arguments ' + argumetns
   [cajole] result: (ThrowStmt) throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns
   [cajole] result: (DefaultCaseStmt) default:
   [cajole] throw 'missing arguments ' + argumetns

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SwitchStmt) switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     func = arguments[ 0 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     func = arguments[ 0 ];
   [cajole]     msg = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] result: (SwitchStmt) switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     func = ___.readPub(a___, 0);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     func = ___.readPub(a___, 0);
   [cajole]     msg = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (UndefinedLiteral) undefined
   [cajole] result: (UndefinedLiteral) undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var thrown = undefined
   [cajole] result: (Declaration) var thrown = undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) func
   [cajole] result: (Reference) func

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) func()
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(func)()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) func()
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(func)()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ex
   [cajole] result: (Reference) ex

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) thrown = ex
   [cajole] result: (AssignOperation) thrown = ex

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) thrown = ex
   [cajole] result: (ExpressionStmt) thrown = ex

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: tryCatch
   [cajole] input: (TryStmt) try {
   [cajole]   func();
   [cajole] } catch (ex) {
   [cajole]   thrown = ex;
   [cajole] }
   [cajole] result: (TryStmt) try {
   [cajole]   ___.asSimpleFunc(func)();
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (ex) {
   [cajole]     thrown = ex;
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) thrown
   [cajole] result: (Reference) thrown

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) assertEquals
   [cajole] result: (SpecialOperation) ___.primFreeze(assertEquals)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) thrown
   [cajole] result: (Reference) thrown

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) assertEquals(msg, thrown)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) assertEquals(msg, thrown)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   assertEquals(msg, thrown);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (msg) {
   [cajole]   assertEquals(msg, thrown);
   [cajole] }
   [cajole] result: (Conditional) if (msg) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   if (msg) {
   [cajole]     assertEquals(msg, thrown);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   if (msg) {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) fail
   [cajole] result: (SpecialOperation) ___.primFreeze(fail)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Did not throw '
   [cajole] result: (StringLiteral) 'Did not throw '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) msg
   [cajole] result: (Reference) msg

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'an exception'
   [cajole] result: (StringLiteral) 'an exception'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) msg? msg: 'an exception'
   [cajole] result: (ControlOperation) msg? msg: 'an exception'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'Did not throw ' + (msg? msg: 'an exception')
   [cajole] result: (SimpleOperation) 'Did not throw ' + (msg? msg: 'an exception')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) fail('Did not throw ' + (msg? msg: 'an exception'))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) fail('Did not throw ' + (msg? msg: 'an exception'))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   fail('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (thrown) {
   [cajole]   if (msg) {
   [cajole]     assertEquals(msg, thrown);
   [cajole]   }
   [cajole] } else {
   [cajole]   fail('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }
   [cajole] result: (Conditional) if (thrown) {
   [cajole]   if (msg) {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole]   }
   [cajole] } else {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var func, msg switch (arguments.length) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     func = arguments[ 0 ];
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     func = arguments[ 0 ];
   [cajole]     msg = arguments[ 1 ];
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] var thrown = undefined try {
   [cajole]   func();
   [cajole] } catch (ex) {
   [cajole]   thrown = ex;
   [cajole] }
   [cajole] if (thrown) {
   [cajole]   if (msg) {
   [cajole]     assertEquals(msg, thrown);
   [cajole]   }
   [cajole] } else {
   [cajole]   fail('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var func, msg switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole] case 1:
   [cajole]   {
   [cajole]     func = ___.readPub(a___, 0);
   [cajole]     break;
   [cajole]   }
   [cajole] case 2:
   [cajole]   {
   [cajole]     func = ___.readPub(a___, 0);
   [cajole]     msg = ___.readPub(a___, 1);
   [cajole]     break;
   [cajole]   }
   [cajole] default:
   [cajole]   throw 'missing arguments ' + argumetns;
   [cajole] }
   [cajole] var thrown = undefined try {
   [cajole]   ___.asSimpleFunc(func)();
   [cajole] } catch (ex___) {
   [cajole]   try {
   [cajole]     throw ___.tameException(ex___);
   [cajole]   } catch (ex) {
   [cajole]     thrown = ex;
   [cajole]   }
   [cajole] }
   [cajole] if (thrown) {
   [cajole]   if (msg) {
   [cajole]     ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole]   }
   [cajole] } else {
   [cajole]   ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function assertThrows() {
   [cajole]   var func, msg;
   [cajole]   switch (arguments.length) {
   [cajole]   case 1:
   [cajole]     {
   [cajole]       func = arguments[ 0 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   case 2:
   [cajole]     {
   [cajole]       func = arguments[ 0 ];
   [cajole]       msg = arguments[ 1 ];
   [cajole]       break;
   [cajole]     }
   [cajole]   default:
   [cajole]     throw 'missing arguments ' + argumetns;
   [cajole]   }
   [cajole]   var thrown = undefined;
   [cajole]   try {
   [cajole]     func();
   [cajole]   } catch (ex) {
   [cajole]     thrown = ex;
   [cajole]   }
   [cajole]   if (thrown) {
   [cajole]     if (msg) {
   [cajole]       assertEquals(msg, thrown);
   [cajole]     }
   [cajole]   } else {
   [cajole]     fail('Did not throw ' + (msg? msg: 'an exception'));
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: module
   [cajole] input: (Block) {
   [cajole]   function canonInnerHtml(s) {
   [cajole]     s = s.replace(/(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, function (_, tagStart, tagBody) {
   [cajole]                     var attrs = [ ];
   [cajole]                     for (var m; m = tagBody.match(/^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/);) {
   [cajole]                       var value = m[ 2 ] &amp;&amp; !/^[\&quot;\']/.test(m[ 2 ]) ? '&quot;' + m[ 2 ] + '&quot;': m[ 2 ];
   [cajole]                       attrs.push(m[ 1 ] + (value? '=' + value: ''));
   [cajole]                       tagBody = tagBody.substring(m[ 0 ].length);
   [cajole]                     }
   [cajole]                     attrs.sort();
   [cajole]                     return tagStart + ' ' + attrs.join(' ') + '&gt;';
   [cajole]                   });
   [cajole]     s = s.replace(/(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, function (_, open, name, body) {
   [cajole]                     return open + name.toLowerCase() + body + '&gt;';
   [cajole]                   });
   [cajole]     return s.replace(/^[ \t]*(\r\n?|\n)|\s+$/g, '');
   [cajole]   }
   [cajole]   jsunitRegister('testGetElementById', function testGetElementById() {
   [cajole]                    assertEquals(null, document.getElementById('foo'));
   [cajole]                    assertEquals(null, document.getElementById('bar'));
   [cajole]                    assertEquals(null, document.getElementById('no_such_node'));
   [cajole]                    assertTrue(document.getElementById('test-get-element-by-id') != null);
   [cajole]                    assertEquals(null, document.getElementById('xyz-test-get-element-by-id'));
   [cajole]                    assertTrue(document.getElementById('test-get-element-by-id-2') != null);
   [cajole]                    pass('test-get-element-by-id');
   [cajole]                  });
   [cajole]   jsunitRegister('testElementId', function testElementId() {
   [cajole]                    var el = document.getElementById('test-element-id');
   [cajole]                    assertEquals('test-element-id', el.id);
   [cajole]                    assertEquals('test-element-id', el.getAttribute('id'));
   [cajole]                    pass('test-element-id');
   [cajole]                  });
   [cajole]   jsunitRegister('testCreateElement', function testCreateElement() {
   [cajole]                    var newNode = document.createElement('DIV');
   [cajole]                    assertEquals('', newNode.id);
   [cajole]                    newNode.id = 'newNodeId';
   [cajole]                    assertEquals('newNodeId', newNode.id);
   [cajole]                    newNode.id = '#bog&lt;us&gt;';
   [cajole]                    assertEquals('newNodeId', newNode.id);
   [cajole]                    newNode.id = 'not:bogus';
   [cajole]                    assertEquals('not:bogus', newNode.id);
   [cajole]                    assertEquals(1, newNode.nodeType);
   [cajole]                    var el = document.getElementById('test-create-element');
   [cajole]                    el.appendChild(newNode);
   [cajole]                    assertEquals(document.getElementById('not:bogus').tagName, newNode.tagName);
   [cajole]                    assertEquals(newNode.tagName, el.firstChild.tagName);
   [cajole]                    assertEquals(newNode.tagName, el.lastChild.tagName);
   [cajole]                    var text = document.createTextNode({
   [cajole]                                                         'toString': function () {
   [cajole]                                                           return 'howdy &lt;there&gt;';
   [cajole]                                                         }
   [cajole]                                                       });
   [cajole]                    assertEquals(3, text.nodeType);
   [cajole]                    assertEquals('howdy &lt;there&gt;', text.data);
   [cajole]                    newNode.appendChild(text);
   [cajole]                    assertEquals(3, newNode.firstChild.nodeType);
   [cajole]                    assertEquals('howdy &amp;lt;there&amp;gt;', newNode.innerHTML);
   [cajole]                    pass('test-create-element');
   [cajole]                  });
   [cajole]   jsunitRegister('testInnerHtml', function testInnerHtml() {
   [cajole]                    var container = document.getElementById('test-inner-html');
   [cajole]                    assertEquals('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', canonInnerHtml(container.innerHTML));
   [cajole]                    container.innerHTML = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;';
   [cajole]                    assertEquals('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                    pass('test-inner-html');
   [cajole]                  });
   [cajole]   jsunitRegister('testForms', function testForms() {
   [cajole]                    var form = document.createElement('FORM');
   [cajole]                    assertEquals('return false', directAccess.getAttribute(form, 'onsubmit'));
   [cajole]                    var container = document.getElementById('test-forms');
   [cajole]                    container.innerHTML = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;';
   [cajole]                    assertEquals('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', canonInnerHtml(directAccess.getInnerHTML(container)));
   [cajole]                    pass('test-forms');
   [cajole]                  });
   [cajole]   function foo() {
   [cajole]     var container = document.getElementById('test-forms');
   [cajole]     var div = document.createElement('blockquote');
   [cajole]     div.innerHTML = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;';
   [cajole]     container.appendChild(div);
   [cajole]   }
   [cajole]   jsunitRegister('testCantLoadScript', function testCantLoadScript() {
   [cajole]                    try {
   [cajole]                      document.createElement('SCRIPT');
   [cajole]                      fail('successfully created a script tag');
   [cajole]                    } catch (e) {
   [cajole]                    }
   [cajole]                    try {
   [cajole]                      document.createElement('script');
   [cajole]                      fail('successfully created a script tag');
   [cajole]                    } catch (e) {
   [cajole]                    }
   [cajole]                    try {
   [cajole]                      document.createElement('scRipt');
   [cajole]                      fail('successfully created a script tag');
   [cajole]                    } catch (e) {
   [cajole]                    }
   [cajole]                    try {
   [cajole]                      var i = 0;
   [cajole]                      var node = document.createElement({
   [cajole]                                                          'toString': function () {
   [cajole]                                                            return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                          }
   [cajole]                                                        });
   [cajole]                      assertEquals('DIV', node.tagName);
   [cajole]                    } catch (e) {
   [cajole]                    }
   [cajole]                    pass('test-no-script');
   [cajole]                  });
   [cajole]   jsunitRegister('testAddEventListener', function testAddEventListener() {
   [cajole]                    var container = document.getElementById('test-add-event-listener');
   [cajole]                    container.addEventListener('click', function (node, event) {
   [cajole]                                                 console.log('received event');
   [cajole]                                                 assertEquals('P', node.tagName);
   [cajole]                                                 assertEquals('click', event.type);
   [cajole]                                                 pass('test-add-event-listener');
   [cajole]                                               });
   [cajole]                  });
   [cajole]   jsunitRegister('testGetElementsByTagName', function testGetElementsByTagName() {
   [cajole]                    var container = document.getElementById('test-get-elements-by-tag-name');
   [cajole]                    var items = container.getElementsByTagName('li');
   [cajole]                    assertEquals(5, items.length);
   [cajole]                    for (var i = 0; i &lt; items.length; ++i) {
   [cajole]                      assertEquals('LI', items[ i ].tagName);
   [cajole]                    }
   [cajole]                    assertEquals('One', items[ 0 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                    assertEquals('Two', items[ 1 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                    assertEquals('Three', items[ 2 ].firstChild.data.replace(/^\s+|\s+$/g, ''));
   [cajole]                    assertEquals('Pi', items[ 3 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                    assertEquals('sqrt(10)', items[ 4 ].innerHTML.replace(/^\s+|\s+$/g, ''));
   [cajole]                    pass('test-get-elements-by-tag-name');
   [cajole]                  });
   [cajole]   var console;
   [cajole]   function fail(msg) {
   [cajole]     if (typeof console !== 'undefined') {
   [cajole]       console.trace();
   [cajole]       console.log(msg);
   [cajole]     }
   [cajole]     throw new Error(msg);
   [cajole]   }
   [cajole]   function assertEquals() {
   [cajole]     function commonPrefix(a, b) {
   [cajole]       var n = 0;
   [cajole]       while (n &lt; a.length &amp;&amp; n &lt; b.length &amp;&amp; a.charAt(n) === b.charAt(n)) {
   [cajole]         ++n;
   [cajole]       }
   [cajole]       return n;
   [cajole]     }
   [cajole]     function commonSuffix(a, b, limit) {
   [cajole]       var i = a.length;
   [cajole]       var j = b.length;
   [cajole]       while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; a.charAt(i - 1) === b.charAt(j - 1)) {
   [cajole]         --i;
   [cajole]         --j;
   [cajole]       }
   [cajole]       return a.length - i;
   [cajole]     }
   [cajole]     var msg;
   [cajole]     var a;
   [cajole]     var b;
   [cajole]     switch (arguments.length) {
   [cajole]     case 2:
   [cajole]       {
   [cajole]         msg = null;
   [cajole]         a = arguments[ 0 ];
   [cajole]         b = arguments[ 1 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     case 3:
   [cajole]       {
   [cajole]         msg = arguments[ 0 ];
   [cajole]         a = arguments[ 1 ];
   [cajole]         b = arguments[ 2 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + arguments;
   [cajole]     }
   [cajole]     if (a !== b) {
   [cajole]       if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]         var prefix = commonPrefix(a, b);
   [cajole]         var suffix = commonSuffix(a, b, prefix);
   [cajole]         msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a.substring(0, prefix) + '#' + a.substring(prefix, a.length - suffix) + '#' + a.substring(a.length - suffix) + '&gt;&gt;' + ' != &lt;&lt;' + b.substring(0, prefix) + '#' + b.substring(prefix, b.length - suffix) + '#' + b.substring(b.length - suffix) + '&gt;&gt;';
   [cajole]       } else {
   [cajole]         msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]       }
   [cajole]       fail(msg);
   [cajole]     }
   [cajole]   }
   [cajole]   function assertTrue() {
   [cajole]     switch (arguments.length) {
   [cajole]     case 1:
   [cajole]       {
   [cajole]         assertEquals(true, arguments[ 0 ]);
   [cajole]         break;
   [cajole]       }
   [cajole]     case 2:
   [cajole]       {
   [cajole]         assertEquals(arguments[ 0 ], true, arguments[ 1 ]);
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + arguments;
   [cajole]     }
   [cajole]   }
   [cajole]   function assertFalse() {
   [cajole]     switch (arguments.length) {
   [cajole]     case 1:
   [cajole]       {
   [cajole]         assertEquals(false, arguments[ 0 ]);
   [cajole]         break;
   [cajole]       }
   [cajole]     case 2:
   [cajole]       {
   [cajole]         assertEquals(arguments[ 0 ], false, arguments[ 1 ]);
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + arguments;
   [cajole]     }
   [cajole]   }
   [cajole]   function assertLessThan() {
   [cajole]     var msg, a, b;
   [cajole]     switch (arguments.length) {
   [cajole]     case 2:
   [cajole]       {
   [cajole]         msg = null;
   [cajole]         a = arguments[ 0 ];
   [cajole]         b = arguments[ 1 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     case 3:
   [cajole]       {
   [cajole]         msg = arguments[ 0 ];
   [cajole]         a = arguments[ 1 ];
   [cajole]         b = arguments[ 2 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + argumetns;
   [cajole]     }
   [cajole]     if (! (a &lt; b)) {
   [cajole]       fail((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole]     }
   [cajole]   }
   [cajole]   function assertNull() {
   [cajole]     var msg, a;
   [cajole]     switch (arguments.length) {
   [cajole]     case 1:
   [cajole]       {
   [cajole]         msg = null;
   [cajole]         a = arguments[ 0 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     case 2:
   [cajole]       {
   [cajole]         msg = arguments[ 0 ];
   [cajole]         a = arguments[ 1 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + argumetns;
   [cajole]     }
   [cajole]     if (a !== null) {
   [cajole]       fail((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole]     }
   [cajole]   }
   [cajole]   function assertThrows() {
   [cajole]     var func, msg;
   [cajole]     switch (arguments.length) {
   [cajole]     case 1:
   [cajole]       {
   [cajole]         func = arguments[ 0 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     case 2:
   [cajole]       {
   [cajole]         func = arguments[ 0 ];
   [cajole]         msg = arguments[ 1 ];
   [cajole]         break;
   [cajole]       }
   [cajole]     default:
   [cajole]       throw 'missing arguments ' + argumetns;
   [cajole]     }
   [cajole]     var thrown = undefined;
   [cajole]     try {
   [cajole]       func();
   [cajole]     } catch (ex) {
   [cajole]       thrown = ex;
   [cajole]     }
   [cajole]     if (thrown) {
   [cajole]       if (msg) {
   [cajole]         assertEquals(msg, thrown);
   [cajole]       }
   [cajole]     } else {
   [cajole]       fail('Did not throw ' + (msg? msg: 'an exception'));
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var document = ___.readImports(IMPORTS___, 'document');
   [cajole]   var Error = ___.readImports(IMPORTS___, 'Error');
   [cajole]   var argumetns = ___.readImports(IMPORTS___, 'argumetns');
   [cajole]   var jsunitRegister = ___.readImports(IMPORTS___, 'jsunitRegister');
   [cajole]   var canonInnerHtml;
   [cajole]   canonInnerHtml = ___.simpleFunc(function canonInnerHtml(s) {
   [cajole]                                     var x0___;
   [cajole]                                     var x1___;
   [cajole]                                     var x2___;
   [cajole]                                     var x3___;
   [cajole]                                     var x4___;
   [cajole]                                     var x5___;
   [cajole]                                     var x6___;
   [cajole]                                     var x7___;
   [cajole]                                     var x8___;
   [cajole]                                     s = (x2___ = s, (x0___ = /(&lt;\w+)\s+([^\s&gt;][^&gt;]*)&gt;/g, x1___ = ___.primFreeze(___.simpleFunc(function (_, tagStart, tagBody) {
   [cajole]                                                                                                                                  var x0___;
   [cajole]                                                                                                                                  var x1___;
   [cajole]                                                                                                                                  var x2___;
   [cajole]                                                                                                                                  var x3___;
   [cajole]                                                                                                                                  var x4___;
   [cajole]                                                                                                                                  var x5___;
   [cajole]                                                                                                                                  var x6___;
   [cajole]                                                                                                                                  var x7___;
   [cajole]                                                                                                                                  var x8___;
   [cajole]                                                                                                                                  var x9___;
   [cajole]                                                                                                                                  var x10___;
   [cajole]                                                                                                                                  var x11___;
   [cajole]                                                                                                                                  var attrs = [ ];
   [cajole]                                                                                                                                  for (var m; m = (x1___ = tagBody, x0___ = /^\s*(\w+)(?:\s*=\s*(&quot;[^\&quot;]*&quot;|'[^\']*'|[^\'\&quot;\s&gt;]+))?/, x1___.match_canCall___? x1___.match(x0___): ___.callPub(x1___, 'match', [ x0___ ]));) {
   [cajole]                                                                                                                                    var value = ___.readPub(m, 2) &amp;&amp; ! (x3___ = /^[\&quot;\']/, x2___ = ___.readPub(m, 2), x3___.test_canCall___? x3___.test(x2___): ___.callPub(x3___, 'test', [ x2___ ])) ? '&quot;' + ___.readPub(m, 2) + '&quot;': ___.readPub(m, 2);
   [cajole]                                                                                                                                    x5___ = attrs, x4___ = ___.readPub(m, 1) + (value? '=' + value: ''), x5___.push_canCall___? x5___.push(x4___): ___.callPub(x5___, 'push', [ x4___ ]);
   [cajole]                                                                                                                                    tagBody = (x8___ = tagBody, x6___ = (x7___ = ___.readPub(m, 0), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')), x8___.substring_canCall___? x8___.substring(x6___): ___.callPub(x8___, 'substring', [ x6___ ]));
   [cajole]                                                                                                                                  }
   [cajole]                                                                                                                                  x9___ = attrs, undefined, x9___.sort_canCall___? x9___.sort(): ___.callPub(x9___, 'sort', [ ]);
   [cajole]                                                                                                                                  return tagStart + ' ' + (x11___ = attrs, x10___ = ' ', x11___.join_canCall___? x11___.join(x10___): ___.callPub(x11___, 'join', [ x10___ ])) + '&gt;';
   [cajole]                                                                                                                                }))), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                     s = (x5___ = s, (x3___ = /(&lt;\/?)(\w+)([^&gt;]*)&gt;/g, x4___ = ___.primFreeze(___.simpleFunc(function (_, open, name, body) {
   [cajole]                                                                                                                              var x0___;
   [cajole]                                                                                                                              return open + (x0___ = name, undefined, x0___.toLowerCase_canCall___? x0___.toLowerCase(): ___.callPub(x0___, 'toLowerCase', [ ])) + body + '&gt;';
   [cajole]                                                                                                                            }))), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ]));
   [cajole]                                     return x8___ = s, (x6___ = /^[ \t]*(\r\n?|\n)|\s+$/g, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]);
   [cajole]                                   });
   [cajole]   var pass = ___.readImports(IMPORTS___, 'pass');
   [cajole]   var directAccess = ___.readImports(IMPORTS___, 'directAccess');
   [cajole]   var foo;
   [cajole]   foo = ___.simpleFunc(function foo() {
   [cajole]                          var x0___;
   [cajole]                          var x1___;
   [cajole]                          var x2___;
   [cajole]                          var x3___;
   [cajole]                          var x4___;
   [cajole]                          var x5___;
   [cajole]                          var x6___;
   [cajole]                          var x7___;
   [cajole]                          var container = (x1___ = document, x0___ = 'test-forms', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                          var div = (x3___ = document, x2___ = 'blockquote', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]));
   [cajole]                          x4___ = div, x5___ = 'event dispatched to &lt;code&gt;foo()&lt;/code&gt;', x4___.innerHTML_canSet___? (x4___.innerHTML = x5___): ___.setPub(x4___, 'innerHTML', x5___);
   [cajole]                          x7___ = container, x6___ = div, x7___.appendChild_canCall___? x7___.appendChild(x6___): ___.callPub(x7___, 'appendChild', [ x6___ ]);
   [cajole]                        });
   [cajole]   var fail;
   [cajole]   fail = ___.simpleFunc(function fail(msg) {
   [cajole]                           var x0___;
   [cajole]                           var x1___;
   [cajole]                           var x2___;
   [cajole]                           if (typeof console !== 'undefined') {
   [cajole]                             x0___ = console, undefined, x0___.trace_canCall___? x0___.trace(): ___.callPub(x0___, 'trace', [ ]);
   [cajole]                             x2___ = console, x1___ = msg, x2___.log_canCall___? x2___.log(x1___): ___.callPub(x2___, 'log', [ x1___ ]);
   [cajole]                           }
   [cajole]                           throw new (___.asCtor(Error))(msg);
   [cajole]                         });
   [cajole]   var assertEquals;
   [cajole]   assertEquals = ___.simpleFunc(function assertEquals() {
   [cajole]                                   var a___ = ___.args(arguments);
   [cajole]                                   var commonPrefix;
   [cajole]                                   commonPrefix = ___.simpleFunc(function commonPrefix(a, b) {
   [cajole]                                                                   var x0___;
   [cajole]                                                                   var x1___;
   [cajole]                                                                   var x2___;
   [cajole]                                                                   var x3___;
   [cajole]                                                                   var x4___;
   [cajole]                                                                   var x5___;
   [cajole]                                                                   var n = 0;
   [cajole]                                                                   while (n &lt; (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) &amp;&amp; n &lt; (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')) &amp;&amp; (x3___ = a, x2___ = n, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = n, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]                                                                     ++n;
   [cajole]                                                                   }
   [cajole]                                                                   return n;
   [cajole]                                                                 });
   [cajole]                                   var commonSuffix;
   [cajole]                                   commonSuffix = ___.simpleFunc(function commonSuffix(a, b, limit) {
   [cajole]                                                                   var x0___;
   [cajole]                                                                   var x1___;
   [cajole]                                                                   var x2___;
   [cajole]                                                                   var x3___;
   [cajole]                                                                   var x4___;
   [cajole]                                                                   var x5___;
   [cajole]                                                                   var x6___;
   [cajole]                                                                   var i = (x0___ = a, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                   var j = (x1___ = b, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'));
   [cajole]                                                                   while (i &gt; limit &amp;&amp; j &gt; limit &amp;&amp; (x3___ = a, x2___ = i - 1, x3___.charAt_canCall___? x3___.charAt(x2___): ___.callPub(x3___, 'charAt', [ x2___ ])) === (x5___ = b, x4___ = j - 1, x5___.charAt_canCall___? x5___.charAt(x4___): ___.callPub(x5___, 'charAt', [ x4___ ]))) {
   [cajole]                                                                     --i;
   [cajole]                                                                     --j;
   [cajole]                                                                   }
   [cajole]                                                                   return (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - i;
   [cajole]                                                                 });
   [cajole]                                   var x0___;
   [cajole]                                   var x1___;
   [cajole]                                   var x2___;
   [cajole]                                   var x3___;
   [cajole]                                   var x4___;
   [cajole]                                   var x5___;
   [cajole]                                   var x6___;
   [cajole]                                   var x7___;
   [cajole]                                   var x8___;
   [cajole]                                   var x9___;
   [cajole]                                   var x10___;
   [cajole]                                   var x11___;
   [cajole]                                   var x12___;
   [cajole]                                   var x13___;
   [cajole]                                   var x14___;
   [cajole]                                   var x15___;
   [cajole]                                   var x16___;
   [cajole]                                   var x17___;
   [cajole]                                   var x18___;
   [cajole]                                   var x19___;
   [cajole]                                   var x20___;
   [cajole]                                   ;
   [cajole]                                   ;
   [cajole]                                   var msg;
   [cajole]                                   var a;
   [cajole]                                   var b;
   [cajole]                                   switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                   case 2:
   [cajole]                                     {
   [cajole]                                       msg = null;
   [cajole]                                       a = ___.readPub(a___, 0);
   [cajole]                                       b = ___.readPub(a___, 1);
   [cajole]                                       break;
   [cajole]                                     }
   [cajole]                                   case 3:
   [cajole]                                     {
   [cajole]                                       msg = ___.readPub(a___, 0);
   [cajole]                                       a = ___.readPub(a___, 1);
   [cajole]                                       b = ___.readPub(a___, 2);
   [cajole]                                       break;
   [cajole]                                     }
   [cajole]                                   default:
   [cajole]                                     throw 'missing arguments ' + a___;
   [cajole]                                   }
   [cajole]                                   if (a !== b) {
   [cajole]                                     if (typeof a === 'string' &amp;&amp; typeof b === 'string') {
   [cajole]                                       var prefix = ___.asSimpleFunc(___.primFreeze(commonPrefix))(a, b);
   [cajole]                                       var suffix = ___.asSimpleFunc(___.primFreeze(commonSuffix))(a, b, prefix);
   [cajole]                                       msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + (x3___ = a, (x1___ = 0, x2___ = prefix), x3___.substring_canCall___? x3___.substring(x1___, x2___): ___.callPub(x3___, 'substring', [ x1___, x2___ ])) + '#' + (x7___ = a, (x4___ = prefix, x5___ = (x6___ = a, x6___.length_canRead___? x6___.length: ___.readPub(x6___, 'length')) - suffix), x7___.substring_canCall___? x7___.substring(x4___, x5___): ___.callPub(x7___, 'substring', [ x4___, x5___ ])) + '#' + (x10___ = a, x8___ = (x9___ = a, x9___.length_canRead___? x9___.length: ___.readPub(x9___, 'length')) - suffix, x10___.substring_canCall___? x10___.substring(x8___): ___.callPub(x10___, 'substring', [ x8___ ])) + '&gt;&gt;' + ' != &lt;&lt;' + (x13___ = b, (x11___ = 0, x12___ = prefix), x13___.substring_canCall___? x13___.substring(x11___, x12___): ___.callPub(x13___, 'substring', [ x11___, x12___ ])) + '#' + (x17___ = b, (x14___ = prefix, x15___ = (x16___ = b, x16___.length_canRead___? x16___.length: ___.readPub(x16___, 'length')) - suffix), x17___.substring_canCall___? x17___.substring(x14___, x15___): ___.callPub(x17___, 'substring', [ x14___, x15___ ])) + '#' + (x20___ = b, x18___ = (x19___ = b, x19___.length_canRead___? x19___.length: ___.readPub(x19___, 'length')) - suffix, x20___.substring_canCall___? x20___.substring(x18___): ___.callPub(x20___, 'substring', [ x18___ ])) + '&gt;&gt;';
   [cajole]                                     } else {
   [cajole]                                       msg = (msg? msg + ' :: ': '') + '&lt;&lt;' + a + '&gt;&gt; : ' + typeof a + ' != &lt;&lt;' + b + '&gt;&gt; : ' + typeof b;
   [cajole]                                     }
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(fail))(msg);
   [cajole]                                   }
   [cajole]                                 });
   [cajole]   var assertTrue;
   [cajole]   assertTrue = ___.simpleFunc(function assertTrue() {
   [cajole]                                 var a___ = ___.args(arguments);
   [cajole]                                 var x0___;
   [cajole]                                 switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                 case 1:
   [cajole]                                   {
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(assertEquals))(true, ___.readPub(a___, 0));
   [cajole]                                     break;
   [cajole]                                   }
   [cajole]                                 case 2:
   [cajole]                                   {
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), true, ___.readPub(a___, 1));
   [cajole]                                     break;
   [cajole]                                   }
   [cajole]                                 default:
   [cajole]                                   throw 'missing arguments ' + a___;
   [cajole]                                 }
   [cajole]                               });
   [cajole]   var assertFalse;
   [cajole]   assertFalse = ___.simpleFunc(function assertFalse() {
   [cajole]                                  var a___ = ___.args(arguments);
   [cajole]                                  var x0___;
   [cajole]                                  switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                  case 1:
   [cajole]                                    {
   [cajole]                                      ___.asSimpleFunc(___.primFreeze(assertEquals))(false, ___.readPub(a___, 0));
   [cajole]                                      break;
   [cajole]                                    }
   [cajole]                                  case 2:
   [cajole]                                    {
   [cajole]                                      ___.asSimpleFunc(___.primFreeze(assertEquals))(___.readPub(a___, 0), false, ___.readPub(a___, 1));
   [cajole]                                      break;
   [cajole]                                    }
   [cajole]                                  default:
   [cajole]                                    throw 'missing arguments ' + a___;
   [cajole]                                  }
   [cajole]                                });
   [cajole]   var assertLessThan;
   [cajole]   assertLessThan = ___.simpleFunc(function assertLessThan() {
   [cajole]                                     var a___ = ___.args(arguments);
   [cajole]                                     var x0___;
   [cajole]                                     var msg, a, b;
   [cajole]                                     switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                     case 2:
   [cajole]                                       {
   [cajole]                                         msg = null;
   [cajole]                                         a = ___.readPub(a___, 0);
   [cajole]                                         b = ___.readPub(a___, 1);
   [cajole]                                         break;
   [cajole]                                       }
   [cajole]                                     case 3:
   [cajole]                                       {
   [cajole]                                         msg = ___.readPub(a___, 0);
   [cajole]                                         a = ___.readPub(a___, 1);
   [cajole]                                         b = ___.readPub(a___, 2);
   [cajole]                                         break;
   [cajole]                                       }
   [cajole]                                     default:
   [cajole]                                       throw 'missing arguments ' + argumetns;
   [cajole]                                     }
   [cajole]                                     if (! (a &lt; b)) {
   [cajole]                                       ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + '!(&lt;&lt;' + a + '&gt;&gt;: ' + typeof a + ' &lt; ' + '&lt;&lt;' + b + '&gt;&gt;: ' + typeof b + ')');
   [cajole]                                     }
   [cajole]                                   });
   [cajole]   var assertNull;
   [cajole]   assertNull = ___.simpleFunc(function assertNull() {
   [cajole]                                 var a___ = ___.args(arguments);
   [cajole]                                 var x0___;
   [cajole]                                 var msg, a;
   [cajole]                                 switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                 case 1:
   [cajole]                                   {
   [cajole]                                     msg = null;
   [cajole]                                     a = ___.readPub(a___, 0);
   [cajole]                                     break;
   [cajole]                                   }
   [cajole]                                 case 2:
   [cajole]                                   {
   [cajole]                                     msg = ___.readPub(a___, 0);
   [cajole]                                     a = ___.readPub(a___, 1);
   [cajole]                                     break;
   [cajole]                                   }
   [cajole]                                 default:
   [cajole]                                   throw 'missing arguments ' + argumetns;
   [cajole]                                 }
   [cajole]                                 if (a !== null) {
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(fail))((msg? msg + ' :: ': '') + 'Expected null, not ' + '&lt;&lt;' + a + '&gt;&gt;: ' + typeof a);
   [cajole]                                 }
   [cajole]                               });
   [cajole]   var assertThrows;
   [cajole]   assertThrows = ___.simpleFunc(function assertThrows() {
   [cajole]                                   var a___ = ___.args(arguments);
   [cajole]                                   var x0___;
   [cajole]                                   var func, msg;
   [cajole]                                   switch (x0___ = a___, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) {
   [cajole]                                   case 1:
   [cajole]                                     {
   [cajole]                                       func = ___.readPub(a___, 0);
   [cajole]                                       break;
   [cajole]                                     }
   [cajole]                                   case 2:
   [cajole]                                     {
   [cajole]                                       func = ___.readPub(a___, 0);
   [cajole]                                       msg = ___.readPub(a___, 1);
   [cajole]                                       break;
   [cajole]                                     }
   [cajole]                                   default:
   [cajole]                                     throw 'missing arguments ' + argumetns;
   [cajole]                                   }
   [cajole]                                   var thrown = undefined;
   [cajole]                                   try {
   [cajole]                                     ___.asSimpleFunc(func)();
   [cajole]                                   } catch (ex___) {
   [cajole]                                     try {
   [cajole]                                       throw ___.tameException(ex___);
   [cajole]                                     } catch (ex) {
   [cajole]                                       thrown = ex;
   [cajole]                                     }
   [cajole]                                   }
   [cajole]                                   if (thrown) {
   [cajole]                                     if (msg) {
   [cajole]                                       ___.asSimpleFunc(___.primFreeze(assertEquals))(msg, thrown);
   [cajole]                                     }
   [cajole]                                   } else {
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(fail))('Did not throw ' + (msg? msg: 'an exception'));
   [cajole]                                   }
   [cajole]                                 });
   [cajole]   ;
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testGetElementById', ___.primFreeze(___.simpleFunc(function testGetElementById() {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          var x1___;
   [cajole]                                                                                          var x2___;
   [cajole]                                                                                          var x3___;
   [cajole]                                                                                          var x4___;
   [cajole]                                                                                          var x5___;
   [cajole]                                                                                          var x6___;
   [cajole]                                                                                          var x7___;
   [cajole]                                                                                          var x8___;
   [cajole]                                                                                          var x9___;
   [cajole]                                                                                          var x10___;
   [cajole]                                                                                          var x11___;
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x1___ = document, x0___ = 'foo', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ])));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x3___ = document, x2___ = 'bar', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x5___ = document, x4___ = 'no_such_node', x5___.getElementById_canCall___? x5___.getElementById(x4___): ___.callPub(x5___, 'getElementById', [ x4___ ])));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertTrue))((x7___ = document, x6___ = 'test-get-element-by-id', x7___.getElementById_canCall___? x7___.getElementById(x6___): ___.callPub(x7___, 'getElementById', [ x6___ ])) != null);
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertEquals))(null, (x9___ = document, x8___ = 'xyz-test-get-element-by-id', x9___.getElementById_canCall___? x9___.getElementById(x8___): ___.callPub(x9___, 'getElementById', [ x8___ ])));
   [cajole]                                                                                          ___.asSimpleFunc(___.primFreeze(assertTrue))((x11___ = document, x10___ = 'test-get-element-by-id-2', x11___.getElementById_canCall___? x11___.getElementById(x10___): ___.callPub(x11___, 'getElementById', [ x10___ ])) != null);
   [cajole]                                                                                          ___.asSimpleFunc(pass)('test-get-element-by-id');
   [cajole]                                                                                        })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testElementId', ___.primFreeze(___.simpleFunc(function testElementId() {
   [cajole]                                                                                     var x0___;
   [cajole]                                                                                     var x1___;
   [cajole]                                                                                     var x2___;
   [cajole]                                                                                     var x3___;
   [cajole]                                                                                     var x4___;
   [cajole]                                                                                     var el = (x1___ = document, x0___ = 'test-element-id', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                     ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x2___ = el, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                     ___.asSimpleFunc(___.primFreeze(assertEquals))('test-element-id', (x4___ = el, x3___ = 'id', x4___.getAttribute_canCall___? x4___.getAttribute(x3___): ___.callPub(x4___, 'getAttribute', [ x3___ ])));
   [cajole]                                                                                     ___.asSimpleFunc(pass)('test-element-id');
   [cajole]                                                                                   })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testCreateElement', ___.primFreeze(___.simpleFunc(function testCreateElement() {
   [cajole]                                                                                         var x0___;
   [cajole]                                                                                         var x1___;
   [cajole]                                                                                         var x2___;
   [cajole]                                                                                         var x3___;
   [cajole]                                                                                         var x4___;
   [cajole]                                                                                         var x5___;
   [cajole]                                                                                         var x6___;
   [cajole]                                                                                         var x7___;
   [cajole]                                                                                         var x8___;
   [cajole]                                                                                         var x9___;
   [cajole]                                                                                         var x10___;
   [cajole]                                                                                         var x11___;
   [cajole]                                                                                         var x12___;
   [cajole]                                                                                         var x13___;
   [cajole]                                                                                         var x14___;
   [cajole]                                                                                         var x15___;
   [cajole]                                                                                         var x16___;
   [cajole]                                                                                         var x17___;
   [cajole]                                                                                         var x18___;
   [cajole]                                                                                         var x19___;
   [cajole]                                                                                         var x20___;
   [cajole]                                                                                         var x21___;
   [cajole]                                                                                         var x22___;
   [cajole]                                                                                         var x23___;
   [cajole]                                                                                         var x24___;
   [cajole]                                                                                         var x25___;
   [cajole]                                                                                         var x26___;
   [cajole]                                                                                         var x27___;
   [cajole]                                                                                         var x28___;
   [cajole]                                                                                         var x29___;
   [cajole]                                                                                         var x30___;
   [cajole]                                                                                         var x31___;
   [cajole]                                                                                         var x32___;
   [cajole]                                                                                         var x33___;
   [cajole]                                                                                         var x34___;
   [cajole]                                                                                         var x35___;
   [cajole]                                                                                         var newNode = (x1___ = document, x0___ = 'DIV', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('', (x2___ = newNode, x2___.id_canRead___? x2___.id: ___.readPub(x2___, 'id')));
   [cajole]                                                                                         x3___ = newNode, x4___ = 'newNodeId', x3___.id_canSet___? (x3___.id = x4___): ___.setPub(x3___, 'id', x4___);
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x5___ = newNode, x5___.id_canRead___? x5___.id: ___.readPub(x5___, 'id')));
   [cajole]                                                                                         x6___ = newNode, x7___ = '#bog&lt;us&gt;', x6___.id_canSet___? (x6___.id = x7___): ___.setPub(x6___, 'id', x7___);
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('newNodeId', (x8___ = newNode, x8___.id_canRead___? x8___.id: ___.readPub(x8___, 'id')));
   [cajole]                                                                                         x9___ = newNode, x10___ = 'not:bogus', x9___.id_canSet___? (x9___.id = x10___): ___.setPub(x9___, 'id', x10___);
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('not:bogus', (x11___ = newNode, x11___.id_canRead___? x11___.id: ___.readPub(x11___, 'id')));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))(1, (x12___ = newNode, x12___.nodeType_canRead___? x12___.nodeType: ___.readPub(x12___, 'nodeType')));
   [cajole]                                                                                         var el = (x14___ = document, x13___ = 'test-create-element', x14___.getElementById_canCall___? x14___.getElementById(x13___): ___.callPub(x14___, 'getElementById', [ x13___ ]));
   [cajole]                                                                                         x16___ = el, x15___ = newNode, x16___.appendChild_canCall___? x16___.appendChild(x15___): ___.callPub(x16___, 'appendChild', [ x15___ ]);
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))((x17___ = (x19___ = document, x18___ = 'not:bogus', x19___.getElementById_canCall___? x19___.getElementById(x18___): ___.callPub(x19___, 'getElementById', [ x18___ ])), x17___.tagName_canRead___? x17___.tagName: ___.readPub(x17___, 'tagName')), (x20___ = newNode, x20___.tagName_canRead___? x20___.tagName: ___.readPub(x20___, 'tagName')));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))((x21___ = newNode, x21___.tagName_canRead___? x21___.tagName: ___.readPub(x21___, 'tagName')), (x22___ = (x23___ = el, x23___.firstChild_canRead___? x23___.firstChild: ___.readPub(x23___, 'firstChild')), x22___.tagName_canRead___? x22___.tagName: ___.readPub(x22___, 'tagName')));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))((x24___ = newNode, x24___.tagName_canRead___? x24___.tagName: ___.readPub(x24___, 'tagName')), (x25___ = (x26___ = el, x26___.lastChild_canRead___? x26___.lastChild: ___.readPub(x26___, 'lastChild')), x25___.tagName_canRead___? x25___.tagName: ___.readPub(x25___, 'tagName')));
   [cajole]                                                                                         var text = (x28___ = document, x27___ = {
   [cajole]                                                                                                       'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                   return 'howdy &lt;there&gt;';
   [cajole]                                                                                                                                                 }))
   [cajole]                                                                                                     }, x28___.createTextNode_canCall___? x28___.createTextNode(x27___): ___.callPub(x28___, 'createTextNode', [ x27___ ]));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x29___ = text, x29___.nodeType_canRead___? x29___.nodeType: ___.readPub(x29___, 'nodeType')));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &lt;there&gt;', (x30___ = text, x30___.data_canRead___? x30___.data: ___.readPub(x30___, 'data')));
   [cajole]                                                                                         x32___ = newNode, x31___ = text, x32___.appendChild_canCall___? x32___.appendChild(x31___): ___.callPub(x32___, 'appendChild', [ x31___ ]);
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))(3, (x33___ = (x34___ = newNode, x34___.firstChild_canRead___? x34___.firstChild: ___.readPub(x34___, 'firstChild')), x33___.nodeType_canRead___? x33___.nodeType: ___.readPub(x33___, 'nodeType')));
   [cajole]                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('howdy &amp;lt;there&amp;gt;', (x35___ = newNode, x35___.innerHTML_canRead___? x35___.innerHTML: ___.readPub(x35___, 'innerHTML')));
   [cajole]                                                                                         ___.asSimpleFunc(pass)('test-create-element');
   [cajole]                                                                                       })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testInnerHtml', ___.primFreeze(___.simpleFunc(function testInnerHtml() {
   [cajole]                                                                                     var x0___;
   [cajole]                                                                                     var x1___;
   [cajole]                                                                                     var x2___;
   [cajole]                                                                                     var x3___;
   [cajole]                                                                                     var x4___;
   [cajole]                                                                                     var x5___;
   [cajole]                                                                                     var x6___;
   [cajole]                                                                                     var container = (x1___ = document, x0___ = 'test-inner-html', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                     ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;link&quot; href=&quot;http://foo.com?a=b&amp;amp;c=d&quot;' + ' title=&quot;&amp;lt;click me!&amp;gt;&quot;&gt;' + 'Test &lt;em id=&quot;em&quot;&gt;Not&lt;/em&gt;&amp;gt; run yet.&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x2___ = container, x2___.innerHTML_canRead___? x2___.innerHTML: ___.readPub(x2___, 'innerHTML'))));
   [cajole]                                                                                     x3___ = container, x4___ = '&lt;a  id=&quot;foo&quot; class=&quot;green blue&quot; href=&quot;http://bar.com/baz&quot;' + ' target=&quot;foo&quot; title=&quot;A link&quot; &gt;' + 'A &amp; B &amp;amp; C&lt;&lt;/a &gt;', x3___.innerHTML_canSet___? (x3___.innerHTML = x4___): ___.setPub(x3___, 'innerHTML', x4___);
   [cajole]                                                                                     ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;a class=&quot;green blue&quot; href=&quot;http://gadget-proxy/' + '?url=http%3A%2F%2Fbar.com%2Fbaz&amp;amp;mimeType=*%2F*&quot; id=&quot;foo-xyz___&quot;' + ' target=&quot;_blank&quot; title=&quot;A link&quot;&gt;A &amp;amp; B &amp;amp; C&amp;lt;&lt;/a&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x6___ = directAccess, x5___ = container, x6___.getInnerHTML_canCall___? x6___.getInnerHTML(x5___): ___.callPub(x6___, 'getInnerHTML', [ x5___ ]))));
   [cajole]                                                                                     ___.asSimpleFunc(pass)('test-inner-html');
   [cajole]                                                                                   })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testForms', ___.primFreeze(___.simpleFunc(function testForms() {
   [cajole]                                                                                 var x0___;
   [cajole]                                                                                 var x1___;
   [cajole]                                                                                 var x2___;
   [cajole]                                                                                 var x3___;
   [cajole]                                                                                 var x4___;
   [cajole]                                                                                 var x5___;
   [cajole]                                                                                 var x6___;
   [cajole]                                                                                 var x7___;
   [cajole]                                                                                 var x8___;
   [cajole]                                                                                 var x9___;
   [cajole]                                                                                 var x10___;
   [cajole]                                                                                 var form = (x1___ = document, x0___ = 'FORM', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]));
   [cajole]                                                                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('return false', (x4___ = directAccess, (x2___ = form, x3___ = 'onsubmit'), x4___.getAttribute_canCall___? x4___.getAttribute(x2___, x3___): ___.callPub(x4___, 'getAttribute', [ x2___, x3___ ])));
   [cajole]                                                                                 var container = (x6___ = document, x5___ = 'test-forms', x6___.getElementById_canCall___? x6___.getElementById(x5___): ___.callPub(x6___, 'getElementById', [ x5___ ]));
   [cajole]                                                                                 x7___ = container, x8___ = '&lt;form onsubmit=&quot;foo()&quot;&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', x7___.innerHTML_canSet___? (x7___.innerHTML = x8___): ___.setPub(x7___, 'innerHTML', x8___);
   [cajole]                                                                                 ___.asSimpleFunc(___.primFreeze(assertEquals))('&lt;form onsubmit=\'' + 'try { plugin_dispatchEvent___' + '(this, event || window.event, 0, &quot;foo&quot;);' + ' } finally { return false; }\'&gt;' + '&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;&lt;/form&gt;', ___.asSimpleFunc(___.primFreeze(canonInnerHtml))((x10___ = directAccess, x9___ = container, x10___.getInnerHTML_canCall___? x10___.getInnerHTML(x9___): ___.callPub(x10___, 'getInnerHTML', [ x9___ ]))));
   [cajole]                                                                                 ___.asSimpleFunc(pass)('test-forms');
   [cajole]                                                                               })));
   [cajole]   ;
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testCantLoadScript', ___.primFreeze(___.simpleFunc(function testCantLoadScript() {
   [cajole]                                                                                          var x0___;
   [cajole]                                                                                          var x1___;
   [cajole]                                                                                          var x2___;
   [cajole]                                                                                          var x3___;
   [cajole]                                                                                          var x4___;
   [cajole]                                                                                          var x5___;
   [cajole]                                                                                          var x6___;
   [cajole]                                                                                          var x7___;
   [cajole]                                                                                          var x8___;
   [cajole]                                                                                          try {
   [cajole]                                                                                            x1___ = document, x0___ = 'SCRIPT', x1___.createElement_canCall___? x1___.createElement(x0___): ___.callPub(x1___, 'createElement', [ x0___ ]);
   [cajole]                                                                                            ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                          } catch (ex___) {
   [cajole]                                                                                            try {
   [cajole]                                                                                              throw ___.tameException(ex___);
   [cajole]                                                                                            } catch (e) {
   [cajole]                                                                                            }
   [cajole]                                                                                          }
   [cajole]                                                                                          try {
   [cajole]                                                                                            x3___ = document, x2___ = 'script', x3___.createElement_canCall___? x3___.createElement(x2___): ___.callPub(x3___, 'createElement', [ x2___ ]);
   [cajole]                                                                                            ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                          } catch (ex___) {
   [cajole]                                                                                            try {
   [cajole]                                                                                              throw ___.tameException(ex___);
   [cajole]                                                                                            } catch (e) {
   [cajole]                                                                                            }
   [cajole]                                                                                          }
   [cajole]                                                                                          try {
   [cajole]                                                                                            x5___ = document, x4___ = 'scRipt', x5___.createElement_canCall___? x5___.createElement(x4___): ___.callPub(x5___, 'createElement', [ x4___ ]);
   [cajole]                                                                                            ___.asSimpleFunc(___.primFreeze(fail))('successfully created a script tag');
   [cajole]                                                                                          } catch (ex___) {
   [cajole]                                                                                            try {
   [cajole]                                                                                              throw ___.tameException(ex___);
   [cajole]                                                                                            } catch (e) {
   [cajole]                                                                                            }
   [cajole]                                                                                          }
   [cajole]                                                                                          try {
   [cajole]                                                                                            var i = 0;
   [cajole]                                                                                            var node = (x7___ = document, x6___ = {
   [cajole]                                                                                                          'toString': ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                      return ++i &amp; 1? 'DIV': 'SCRIPT';
   [cajole]                                                                                                                                                    }))
   [cajole]                                                                                                        }, x7___.createElement_canCall___? x7___.createElement(x6___): ___.callPub(x7___, 'createElement', [ x6___ ]));
   [cajole]                                                                                            ___.asSimpleFunc(___.primFreeze(assertEquals))('DIV', (x8___ = node, x8___.tagName_canRead___? x8___.tagName: ___.readPub(x8___, 'tagName')));
   [cajole]                                                                                          } catch (ex___) {
   [cajole]                                                                                            try {
   [cajole]                                                                                              throw ___.tameException(ex___);
   [cajole]                                                                                            } catch (e) {
   [cajole]                                                                                            }
   [cajole]                                                                                          }
   [cajole]                                                                                          ___.asSimpleFunc(pass)('test-no-script');
   [cajole]                                                                                        })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testAddEventListener', ___.primFreeze(___.simpleFunc(function testAddEventListener() {
   [cajole]                                                                                            var x0___;
   [cajole]                                                                                            var x1___;
   [cajole]                                                                                            var x2___;
   [cajole]                                                                                            var x3___;
   [cajole]                                                                                            var x4___;
   [cajole]                                                                                            var container = (x1___ = document, x0___ = 'test-add-event-listener', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                            x4___ = container, (x2___ = 'click', x3___ = ___.primFreeze(___.simpleFunc(function (node, event) {
   [cajole]                                                                                                                                                                         var x0___;
   [cajole]                                                                                                                                                                         var x1___;
   [cajole]                                                                                                                                                                         var x2___;
   [cajole]                                                                                                                                                                         var x3___;
   [cajole]                                                                                                                                                                         x1___ = console, x0___ = 'received event', x1___.log_canCall___? x1___.log(x0___): ___.callPub(x1___, 'log', [ x0___ ]);
   [cajole]                                                                                                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('P', (x2___ = node, x2___.tagName_canRead___? x2___.tagName: ___.readPub(x2___, 'tagName')));
   [cajole]                                                                                                                                                                         ___.asSimpleFunc(___.primFreeze(assertEquals))('click', (x3___ = event, x3___.type_canRead___? x3___.type: ___.readPub(x3___, 'type')));
   [cajole]                                                                                                                                                                         ___.asSimpleFunc(pass)('test-add-event-listener');
   [cajole]                                                                                                                                                                       }))), x4___.addEventListener_canCall___? x4___.addEventListener(x2___, x3___): ___.callPub(x4___, 'addEventListener', [ x2___, x3___ ]);
   [cajole]                                                                                          })));
   [cajole]   ___.asSimpleFunc(jsunitRegister)('testGetElementsByTagName', ___.primFreeze(___.simpleFunc(function testGetElementsByTagName() {
   [cajole]                                                                                                var x0___;
   [cajole]                                                                                                var x1___;
   [cajole]                                                                                                var x2___;
   [cajole]                                                                                                var x3___;
   [cajole]                                                                                                var x4___;
   [cajole]                                                                                                var x5___;
   [cajole]                                                                                                var x6___;
   [cajole]                                                                                                var x7___;
   [cajole]                                                                                                var x8___;
   [cajole]                                                                                                var x9___;
   [cajole]                                                                                                var x10___;
   [cajole]                                                                                                var x11___;
   [cajole]                                                                                                var x12___;
   [cajole]                                                                                                var x13___;
   [cajole]                                                                                                var x14___;
   [cajole]                                                                                                var x15___;
   [cajole]                                                                                                var x16___;
   [cajole]                                                                                                var x17___;
   [cajole]                                                                                                var x18___;
   [cajole]                                                                                                var x19___;
   [cajole]                                                                                                var x20___;
   [cajole]                                                                                                var x21___;
   [cajole]                                                                                                var x22___;
   [cajole]                                                                                                var x23___;
   [cajole]                                                                                                var x24___;
   [cajole]                                                                                                var x25___;
   [cajole]                                                                                                var x26___;
   [cajole]                                                                                                var x27___;
   [cajole]                                                                                                var container = (x1___ = document, x0___ = 'test-get-elements-by-tag-name', x1___.getElementById_canCall___? x1___.getElementById(x0___): ___.callPub(x1___, 'getElementById', [ x0___ ]));
   [cajole]                                                                                                var items = (x3___ = container, x2___ = 'li', x3___.getElementsByTagName_canCall___? x3___.getElementsByTagName(x2___): ___.callPub(x3___, 'getElementsByTagName', [ x2___ ]));
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))(5, (x4___ = items, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')));
   [cajole]                                                                                                for (var i = 0; i &lt; (x5___ = items, x5___.length_canRead___? x5___.length: ___.readPub(x5___, 'length')); ++i) {
   [cajole]                                                                                                  ___.asSimpleFunc(___.primFreeze(assertEquals))('LI', (x6___ = ___.readPub(items, i), x6___.tagName_canRead___? x6___.tagName: ___.readPub(x6___, 'tagName')));
   [cajole]                                                                                                }
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('One', (x9___ = (x10___ = ___.readPub(items, 0), x10___.innerHTML_canRead___? x10___.innerHTML: ___.readPub(x10___, 'innerHTML')), (x7___ = /^\s+|\s+$/g, x8___ = ''), x9___.replace_canCall___? x9___.replace(x7___, x8___): ___.callPub(x9___, 'replace', [ x7___, x8___ ])));
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('Two', (x13___ = (x14___ = ___.readPub(items, 1), x14___.innerHTML_canRead___? x14___.innerHTML: ___.readPub(x14___, 'innerHTML')), (x11___ = /^\s+|\s+$/g, x12___ = ''), x13___.replace_canCall___? x13___.replace(x11___, x12___): ___.callPub(x13___, 'replace', [ x11___, x12___ ])));
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('Three', (x17___ = (x18___ = (x19___ = ___.readPub(items, 2), x19___.firstChild_canRead___? x19___.firstChild: ___.readPub(x19___, 'firstChild')), x18___.data_canRead___? x18___.data: ___.readPub(x18___, 'data')), (x15___ = /^\s+|\s+$/g, x16___ = ''), x17___.replace_canCall___? x17___.replace(x15___, x16___): ___.callPub(x17___, 'replace', [ x15___, x16___ ])));
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('Pi', (x22___ = (x23___ = ___.readPub(items, 3), x23___.innerHTML_canRead___? x23___.innerHTML: ___.readPub(x23___, 'innerHTML')), (x20___ = /^\s+|\s+$/g, x21___ = ''), x22___.replace_canCall___? x22___.replace(x20___, x21___): ___.callPub(x22___, 'replace', [ x20___, x21___ ])));
   [cajole]                                                                                                ___.asSimpleFunc(___.primFreeze(assertEquals))('sqrt(10)', (x26___ = (x27___ = ___.readPub(items, 4), x27___.innerHTML_canRead___? x27___.innerHTML: ___.readPub(x27___, 'innerHTML')), (x24___ = /^\s+|\s+$/g, x25___ = ''), x26___.replace_canCall___? x26___.replace(x24___, x25___): ___.callPub(x26___, 'replace', [ x24___, x25___ ])));
   [cajole]                                                                                                ___.asSimpleFunc(pass)('test-get-elements-by-tag-name');
   [cajole]                                                                                              })));
   [cajole]   var console;
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole] }


AllTests:
    [javac] Compiling 66 source files to /opt/svn/google-caja/src/ant-lib
     [copy] Copying 132 files to /opt/svn/google-caja/src/ant-lib

runtests:
    [instr] processing instrumentation path ...
    [instr] instrumentation path processed in 944 ms
    [instr] [692 class(es) instrumented, 192 resource(s) copied]
    [instr] metadata merged into [/opt/svn/google-caja/src/ant-reports/coverage/metadata.em] {in 980 ms}
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-reports/tests
    [junit] Running com.google.caja.AllTests
    [junit] Tests run: 628, Failures: 0, Errors: 0, Time elapsed: 51.596 sec
   [report] processing input files ...
   [report] 2 file(s) read and merged in 97 ms
   [report] writing [html] report to [/opt/svn/google-caja/src/ant-reports/coverage/index.html] ...
[junitreport] Transform time: 466ms

BUILD SUCCESSFUL
Total time: 1 minute 3 seconds
</log>
</target>
<varz name="target.coverage.status" value="1"/>
<varz name="target.coverage.time" value="63"/>
<varz name="emma.pct" value="84"/>
<varz name="emma.covered" value="15784.4"/>
<varz name="emma.total" value="18776"/>
<target name="tests">
  <log>Buildfile: build.xml

dirs:

Primitives:

Reporting:

Lexer:

ParserCore:

CssParser:

HtmlParser:

JsParser:

Quasiliterals:

Rendering:

Config:

Schemas:

PluginCompiler:

build.info:

pluginc:

CajolingService:

CajoledTests:

AllTests:

runtests:
    [junit] Running com.google.caja.config.ConfigUtilTest
    [junit] Tests run: 12, Failures: 0, Errors: 0, Time elapsed: 0.146 sec
    [junit] Running com.google.caja.demos.calendar.EventStoreTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.746 sec
    [junit] Running com.google.caja.demos.calendar.HcalTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 1.627 sec
    [junit] Running com.google.caja.demos.calendar.LayoutTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 1.15 sec
    [junit] Running com.google.caja.demos.calendar.RRuleTest
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 2.328 sec
    [junit] Running com.google.caja.lang.css.CssSchemaTest
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 0.245 sec
    [junit] Running com.google.caja.lang.html.HtmlSchemaTest
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 0.214 sec
    [junit] Running com.google.caja.lexer.CharProducerTest
    [junit] Tests run: 6, Failures: 0, Errors: 0, Time elapsed: 0.058 sec
    [junit] Running com.google.caja.lexer.CommentLexerTest
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 0.065 sec
    [junit] Running com.google.caja.lexer.CssLexerTest
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 0.152 sec
    [junit] Running com.google.caja.lexer.HtmlLexerTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.087 sec
    [junit] Running com.google.caja.lexer.JsLexerTest
    [junit] Tests run: 17, Failures: 0, Errors: 0, Time elapsed: 0.087 sec
    [junit] Running com.google.caja.lexer.LookaheadCharProducerTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.039 sec
    [junit] Running com.google.caja.lexer.PunctuationTrieTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.039 sec
    [junit] Running com.google.caja.lexer.escaping.EscapingTest
    [junit] Tests run: 11, Failures: 0, Errors: 0, Time elapsed: 0.045 sec
    [junit] Running com.google.caja.opensocial.DefaultGadgetRewriterTest
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 2.013 sec
    [junit] Running com.google.caja.opensocial.GadgetParserTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.135 sec
    [junit] Running com.google.caja.opensocial.applet.ExpressionLanguageStageTest
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 0.159 sec
    [junit] Running com.google.caja.opensocial.service.CajolingServiceTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.074 sec
    [junit] Running com.google.caja.parser.ParseTreeNodeTest
    [junit] Tests run: 38, Failures: 0, Errors: 0, Time elapsed: 0.086 sec
    [junit] Running com.google.caja.parser.ParserBaseTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.037 sec
    [junit] Running com.google.caja.parser.css.CssParserTest
    [junit] Tests run: 6, Failures: 0, Errors: 0, Time elapsed: 0.2 sec
    [junit] Running com.google.caja.parser.css.CssPropertySignatureTest
    [junit] Tests run: 6, Failures: 0, Errors: 0, Time elapsed: 0.059 sec
    [junit] Running com.google.caja.parser.css.CssTreeTest
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 0.211 sec
    [junit] Running com.google.caja.parser.html.DomParserTest
    [junit] Tests run: 54, Failures: 0, Errors: 0, Time elapsed: 0.332 sec
    [junit] Running com.google.caja.parser.html.JsHtmlParserTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.147 sec
    [junit] Running com.google.caja.parser.js.FuzzedParserTest
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 0.144 sec
    [junit] Running com.google.caja.parser.js.NumberLiteralTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.042 sec
    [junit] Running com.google.caja.parser.js.ParserTest
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.896 sec
    [junit] Running com.google.caja.parser.js.StringLiteralTest
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 0.909 sec
    [junit] Running com.google.caja.parser.quasiliteral.DefaultCajaRewriterTest
    [junit] Tests run: 103, Failures: 0, Errors: 0, Time elapsed: 31.629 sec
    [junit] Running com.google.caja.parser.quasiliteral.IllegalReferenceCheckRewriterTest
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 0.195 sec
    [junit] Running com.google.caja.parser.quasiliteral.MatchTest
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.181 sec
    [junit] Running com.google.caja.parser.quasiliteral.QuasiBuilderTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.111 sec
    [junit] Running com.google.caja.parser.quasiliteral.RewriterTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.148 sec
    [junit] Running com.google.caja.parser.quasiliteral.ScopeTest
    [junit] Tests run: 26, Failures: 0, Errors: 0, Time elapsed: 0.204 sec
    [junit] Running com.google.caja.plugin.CompiledPluginTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 4.749 sec
    [junit] Running com.google.caja.plugin.CssCompilerTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.184 sec
    [junit] Running com.google.caja.plugin.CssPropertyPatternsTest
    [junit] Tests run: 9, Failures: 0, Errors: 0, Time elapsed: 0.608 sec
    [junit] Running com.google.caja.plugin.CssRewriterTest
    [junit] Tests run: 14, Failures: 0, Errors: 0, Time elapsed: 0.536 sec
    [junit] Running com.google.caja.plugin.CssTemplateTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.495 sec
    [junit] Running com.google.caja.plugin.CssValidatorTest
    [junit] Tests run: 12, Failures: 0, Errors: 0, Time elapsed: 0.509 sec
    [junit] Running com.google.caja.plugin.DomProcessingEventsTest
    [junit] Tests run: 11, Failures: 0, Errors: 0, Time elapsed: 1.408 sec
    [junit] Running com.google.caja.plugin.ExpressionSanitizerTest
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 0.289 sec
    [junit] Running com.google.caja.plugin.GxpCompilerTest
    [junit] Tests run: 23, Failures: 0, Errors: 0, Time elapsed: 0.718 sec
    [junit] Running com.google.caja.plugin.GxpValidatorTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.265 sec
    [junit] Running com.google.caja.plugin.HtmlCompiledPluginTest
    [junit] Tests run: 26, Failures: 0, Errors: 0, Time elapsed: 10.758 sec
    [junit] Running com.google.caja.plugin.HtmlCompilerTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.569 sec
    [junit] Running com.google.caja.plugin.HtmlSanitizerTest
    [junit] Tests run: 20, Failures: 0, Errors: 0, Time elapsed: 0.53 sec
    [junit] Running com.google.caja.plugin.JsHtmlSanitizerTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.657 sec
    [junit] Running com.google.caja.plugin.stages.DebuggingSymbolsStageTest
    [junit] Tests run: 11, Failures: 0, Errors: 0, Time elapsed: 4.851 sec
    [junit] Running com.google.caja.plugin.stages.OpenTemplateStageTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.54 sec
    [junit] Running com.google.caja.plugin.stages.RewriteHtmlStageTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.235 sec
    [junit] Running com.google.caja.render.JsMinimalPrinterTest
    [junit] Tests run: 21, Failures: 0, Errors: 0, Time elapsed: 0.744 sec
    [junit] Running com.google.caja.render.JsPrettyPrinterTest
    [junit] Tests run: 18, Failures: 0, Errors: 0, Time elapsed: 0.794 sec
    [junit] Running com.google.caja.render.SideBySideRendererTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.074 sec
    [junit] Running com.google.caja.reporting.AbstractMessageQueueTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.036 sec
    [junit] Running com.google.caja.reporting.BuildInfoTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.04 sec
    [junit] Running com.google.caja.reporting.SnippetProducerTest
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.041 sec
    [junit] Running com.google.caja.util.JoinTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.031 sec
    [junit] Running com.google.caja.util.SparseBitSetTest
    [junit] Tests run: 5, Failures: 0, Errors: 0, Time elapsed: 0.125 sec
[junitreport] Transform time: 2503ms

BUILD SUCCESSFUL
Total time: 1 minute 42 seconds
</log>
</target>
<varz name="target.tests.status" value="1"/>
<varz name="target.tests.time" value="102"/>
<varz name="junit.total" value="634"/>
<varz name="junit.errors" value="0"/>
<varz name="junit.failures" value="0"/>
<varz name="junit.pct" value="0.0"/>
<target name="docs">
  <log>Buildfile: build.xml

docs:
  [javadoc] Generating Javadoc
  [javadoc] Javadoc execution
  [javadoc] Loading source files for package com.google.caja...
  [javadoc] Loading source files for package com.google.caja.config...
  [javadoc] Loading source files for package com.google.caja.lang.css...
  [javadoc] Loading source files for package com.google.caja.lang.html...
  [javadoc] Loading source files for package com.google.caja.lexer...
  [javadoc] Loading source files for package com.google.caja.lexer.escaping...
  [javadoc] Loading source files for package com.google.caja.opensocial...
  [javadoc] Loading source files for package com.google.caja.opensocial.applet...
  [javadoc] Loading source files for package com.google.caja.opensocial.service...
  [javadoc] Loading source files for package com.google.caja.parser...
  [javadoc] Loading source files for package com.google.caja.parser.css...
  [javadoc] Loading source files for package com.google.caja.parser.html...
  [javadoc] Loading source files for package com.google.caja.parser.js...
  [javadoc] Loading source files for package com.google.caja.parser.quasiliteral...
  [javadoc] Loading source files for package com.google.caja.plugin...
  [javadoc] Loading source files for package com.google.caja.plugin.stages...
  [javadoc] Loading source files for package com.google.caja.render...
  [javadoc] Loading source files for package com.google.caja.reporting...
  [javadoc] Loading source files for package com.google.caja.tools...
  [javadoc] Loading source files for package com.google.caja.util...
  [javadoc] Constructing Javadoc information...
  [javadoc] Standard Doclet version 1.6.0
  [javadoc] Building tree for all the packages and classes...
  [javadoc] Building index for all the packages and classes...
  [javadoc] Building index for all classes...

BUILD SUCCESSFUL
Total time: 8 seconds
</log>
</target>
<varz name="target.docs.status" value="1"/>
<varz name="target.docs.time" value="9"/>
<target name="demos">
  <log>Buildfile: build.xml

dirs:

Primitives:

Reporting:

Lexer:

ParserCore:

CssParser:

HtmlParser:

JsParser:

Quasiliterals:

Rendering:

Config:

Schemas:

PluginCompiler:

build.info:

pluginc:

CajolingService:

CajoledTests:

AllTests:

dirs:

Primitives:

Reporting:

Lexer:

ParserCore:

CssParser:

HtmlParser:

JsParser:

Quasiliterals:

Rendering:

Config:

Schemas:

PluginCompiler:

build.info:

pluginc:

MinifiedJsDemos:
   [minify] compiling 2 files to /opt/svn/google-caja/src/ant-lib/com/google/caja/demos/calendar/html-interp-minified.js
   [minify] LINT:html-interp.js:1004+19: Semicolon inserted
   [minify] compiling 24 files to /opt/svn/google-caja/src/ant-lib/com/google/caja/demos/calendar/calendar-minified.js
   [minify] LINT:time-cajita.js:485+39: Semicolon inserted
   [minify] LINT:generators-cajita.js:110+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:156+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:214+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:244+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:307+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:394+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:504+2: Semicolon inserted
   [minify] LINT:generators-cajita.js:558+2: Semicolon inserted

MinifiedJs:

calendar:
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-www/calendar
     [copy] Copying 6 files to /opt/svn/google-caja/src/ant-www/calendar

lolcat-search:
   [cajole] mkdir /opt/svn/google-caja/src/ant-www/lolcat-search
   [cajole] compiling 1 files to /opt/svn/google-caja/src/ant-www/lolcat-search/searchbox-cajoled.js
   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) emitCss___
   [cajole] result: (Identifier) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) emitCss___
   [cajole] result: (Reference) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '.'
   [cajole] result: (StringLiteral) '.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' #results-'
   [cajole] result: (StringLiteral) ' #results-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.'
   [cajole] result: (StringLiteral) ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' form {\n  display: inline\n}'
   [cajole] result: (StringLiteral) ' form {\n  display: inline\n}'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ArrayConstructor) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ]
   [cajole] result: (ArrayConstructor) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) join
   [cajole] result: (Identifier) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) join
   [cajole] result: (Reference) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join
   [cajole] result: (SpecialOperation) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getIdClass___
   [cajole] result: (Identifier) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getIdClass___
   [cajole] result: (Reference) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___()
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___())
   [cajole] result: (SpecialOperation) [ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___())

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c_1___
   [cajole] result: (Identifier) c_1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c_1___
   [cajole] result: (Reference) c_1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.c_1___
   [cajole] result: (SpecialOperation) IMPORTS___.c_1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) ___
   [cajole] result: (Identifier) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) ___
   [cajole] result: (Reference) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) simpleFunc
   [cajole] result: (Identifier) simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) simpleFunc
   [cajole] result: (Reference) simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.simpleFunc
   [cajole] result: (SpecialOperation) ___.simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) 
   [cajole] result: (Identifier) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) thisNode___
   [cajole] result: (Identifier) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FormalParam) thisNode___
   [cajole] result: (FormalParam) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) event
   [cajole] result: (Identifier) event

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FormalParam) event
   [cajole] result: (FormalParam) event

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) doSearch
   [cajole] result: (SpecialOperation) ___.primFreeze(doSearch)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) thisNode___
   [cajole] result: (Identifier) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) thisNode___
   [cajole] result: (Reference) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) doSearch(thisNode___)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) doSearch(thisNode___)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Block) {
   [cajole]   doSearch(thisNode___);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FunctionConstructor) function (thisNode___, event) {
   [cajole]   doSearch(thisNode___);
   [cajole] }
   [cajole] result: (FunctionConstructor) function (thisNode___, event) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.simpleFunc(function (thisNode___, event) {
   [cajole]                  doSearch(thisNode___);
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.simpleFunc(function (thisNode___, event) {
   [cajole]                  ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole]                })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (AssignOperation) IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                      doSearch(thisNode___);
   [cajole]                                    })
   [cajole] result: (AssignOperation) IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                      ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole]                                    })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                      doSearch(thisNode___);
   [cajole]                                    })
   [cajole] result: (ExpressionStmt) IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                      ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole]                                    })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) searchEngine
   [cajole] result: (Reference) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) searchEngine
   [cajole] result: (ExpressionStmt) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultConsumer
   [cajole] result: (Reference) resultConsumer

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultConsumer
   [cajole] result: (ExpressionStmt) resultConsumer

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var resultsOfLastSearch = [ ]
   [cajole] result: (Declaration) var resultsOfLastSearch = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) button
   [cajole] result: (Reference) button

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) button.getForm()
   [cajole] result: (SpecialOperation) x0___ = button, undefined, x0___.getForm_canCall___? x0___.getForm(): ___.callPub(x0___, 'getForm', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var form = button.getForm()
   [cajole] result: (Declaration) var form = (x0___ = button, undefined, x0___.getForm_canCall___? x0___.getForm(): ___.callPub(x0___, 'getForm', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^\s+|\s+$/g
   [cajole] result: (RegexpLiteral) /^\s+|\s+$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) form
   [cajole] result: (Reference) form

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) form.getElements()
   [cajole] result: (SpecialOperation) x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) form.getElements().q
   [cajole] result: (SpecialOperation) x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) form.getElements().q.getValue()
   [cajole] result: (SpecialOperation) x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) form.getElements().q.getValue().replace(/^\s+|\s+$/g, '')
   [cajole] result: (SpecialOperation) x3___ = (x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])), (x1___ = /^\s+|\s+$/g, x2___ = ''), x3___.replace_canCall___? x3___.replace(x1___, x2___): ___.callPub(x3___, 'replace', [ x1___, x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var query = form.getElements().q.getValue().replace(/^\s+|\s+$/g, '')
   [cajole] result: (Declaration) var query = (x3___ = (x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])), (x1___ = /^\s+|\s+$/g, x2___ = ''), x3___.replace_canCall___? x3___.replace(x1___, x2___): ___.callPub(x3___, 'replace', [ x1___, x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) query
   [cajole] result: (Reference) query

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !query
   [cajole] result: (SimpleOperation) !query

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) form
   [cajole] result: (Reference) form

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) form.getElements()
   [cajole] result: (SpecialOperation) x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) form.getElements().q
   [cajole] result: (SpecialOperation) x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) form.getElements().q.focus()
   [cajole] result: (SpecialOperation) x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) form.getElements().q.focus()
   [cajole] result: (ExpressionStmt) x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (UndefinedLiteral) undefined
   [cajole] result: (UndefinedLiteral) undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return undefined
   [cajole] result: (ReturnStmt) return undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   form.getElements().q.focus();
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ]);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!query) {
   [cajole]   form.getElements().q.focus();
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Conditional) if (!query) {
   [cajole]   x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ]);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) query
   [cajole] result: (Reference) query

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) results
   [cajole] result: (Reference) results

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) results.slice(0)
   [cajole] result: (SpecialOperation) x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) resultsOfLastSearch = results.slice(0)
   [cajole] result: (AssignOperation) resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultsOfLastSearch = results.slice(0)
   [cajole] result: (ExpressionStmt) resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'results'
   [cajole] result: (StringLiteral) 'results'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('results')
   [cajole] result: (SpecialOperation) x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var resultList = document.getElementById('results')
   [cajole] result: (Declaration) var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var child
   [cajole] result: (Declaration) var child

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultList
   [cajole] result: (Reference) resultList

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) resultList.getFirstChild()
   [cajole] result: (SpecialOperation) x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) child = resultList.getFirstChild()
   [cajole] result: (AssignOperation) child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) child
   [cajole] result: (Reference) child

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultList
   [cajole] result: (Reference) resultList

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) resultList.removeChild(child)
   [cajole] result: (SpecialOperation) x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultList.removeChild(child)
   [cajole] result: (ExpressionStmt) x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   resultList.removeChild(child);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var child; child = resultList.getFirstChild();) {
   [cajole]   resultList.removeChild(child);
   [cajole] }
   [cajole] result: (ForLoop) for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]   x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) results
   [cajole] result: (Reference) results

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) results.length
   [cajole] result: (SpecialOperation) x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var n = results.length
   [cajole] result: (Declaration) var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !n
   [cajole] result: (SimpleOperation) !n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultList
   [cajole] result: (Reference) resultList

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) StringInterpolation
   [cajole] result: (Reference) StringInterpolation

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;center&gt;No results&lt;/center&gt;'
   [cajole] result: (StringLiteral) '&lt;center&gt;No results&lt;/center&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ '&lt;center&gt;No results&lt;/center&gt;' ]
   [cajole] result: (ArrayConstructor) [ '&lt;center&gt;No results&lt;/center&gt;' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ])
   [cajole] result: (SpecialOperation) new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ])
   [cajole] result: (SpecialOperation) x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ])
   [cajole] result: (ExpressionStmt) x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (UndefinedLiteral) undefined
   [cajole] result: (UndefinedLiteral) undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return undefined
   [cajole] result: (ReturnStmt) return undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!n) {
   [cajole]   resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Conditional) if (!n) {
   [cajole]   x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = 0
   [cajole] result: (Declaration) var i = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &lt; n
   [cajole] result: (SimpleOperation) i &lt; n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) ++i
   [cajole] result: (AssignOperation) ++i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ++i
   [cajole] result: (ExpressionStmt) ++i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) results
   [cajole] result: (Reference) results

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) results[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(results, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var result = results[ i ]
   [cajole] result: (Declaration) var result = ___.readPub(results, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'LI'
   [cajole] result: (StringLiteral) 'LI'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.createElement('LI')
   [cajole] result: (SpecialOperation) x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var li = document.createElement('LI')
   [cajole] result: (Declaration) var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /&lt;\/?[A-Za-z][^&gt;]*&gt;/g
   [cajole] result: (RegexpLiteral) /&lt;\/?[A-Za-z][^&gt;]*&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' '
   [cajole] result: (StringLiteral) ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) result.snippetHtml
   [cajole] result: (SpecialOperation) x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ')
   [cajole] result: (SpecialOperation) x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ')
   [cajole] result: (Declaration) var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /&lt;\/?[A-Za-z][^&gt;]*&gt;/g
   [cajole] result: (RegexpLiteral) /&lt;\/?[A-Za-z][^&gt;]*&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' '
   [cajole] result: (StringLiteral) ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) result.titleHtml
   [cajole] result: (SpecialOperation) x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ')
   [cajole] result: (SpecialOperation) x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ')
   [cajole] result: (Declaration) var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) li
   [cajole] result: (Reference) li

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) StringInterpolation
   [cajole] result: (Reference) StringInterpolation

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;b&gt;'
   [cajole] result: (StringLiteral) '&lt;b&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) titleText
   [cajole] result: (Reference) titleText

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;'
   [cajole] result: (StringLiteral) '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) result.url
   [cajole] result: (SpecialOperation) x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;/a&gt;&lt;/tt&gt;'
   [cajole] result: (StringLiteral) '&lt;/a&gt;&lt;/tt&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]
   [cajole] result: (ArrayConstructor) [ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ])
   [cajole] result: (SpecialOperation) new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ])
   [cajole] result: (SpecialOperation) x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ])
   [cajole] result: (ExpressionStmt) x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'click'
   [cajole] result: (StringLiteral) 'click'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) showResult
   [cajole] result: (SpecialOperation) ___.primFreeze(showResult)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) showResult(i)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(showResult))(i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return showResult(i)
   [cajole] result: (ReturnStmt) return ___.asSimpleFunc(___.primFreeze(showResult))(i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return showResult(i)
   [cajole] result: (ParseTreeNodeContainer) return ___.asSimpleFunc(___.primFreeze(showResult))(i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function () {
   [cajole]   return showResult(i);
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return function () {
   [cajole]   return showResult(i);
   [cajole] }
   [cajole] result: (ReturnStmt) return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                        return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                      }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return function () {
   [cajole]   return showResult(i);
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                        return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                      }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (i) {
   [cajole]   return function () {
   [cajole]     return showResult(i);
   [cajole]   };
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                 return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                        return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                      }));
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) (function (i) {
   [cajole]    return function () {
   [cajole]      return showResult(i);
   [cajole]    };
   [cajole]  })(i)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                  return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                         return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                       }));
   [cajole]                                                })))(i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) li
   [cajole] result: (Reference) li

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) li.addEventListener('click', (function (i) {
   [cajole]                                 return function () {
   [cajole]                                   return showResult(i);
   [cajole]                                 };
   [cajole]                               })(i))
   [cajole] result: (SpecialOperation) x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                           return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                  return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                }));
   [cajole]                                                                                         })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) li.addEventListener('click', (function (i) {
   [cajole]                                 return function () {
   [cajole]                                   return showResult(i);
   [cajole]                                 };
   [cajole]                               })(i))
   [cajole] result: (ExpressionStmt) x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                           return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                  return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                }));
   [cajole]                                                                                         })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) li
   [cajole] result: (Reference) li

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultList
   [cajole] result: (Reference) resultList

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) resultList.appendChild(li)
   [cajole] result: (SpecialOperation) x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultList.appendChild(li)
   [cajole] result: (ExpressionStmt) x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var result = results[ i ];
   [cajole]   var li = document.createElement('LI');
   [cajole]   var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]   li.addEventListener('click', (function (i) {
   [cajole]                                   return function () {
   [cajole]                                     return showResult(i);
   [cajole]                                   };
   [cajole]                                 })(i));
   [cajole]   resultList.appendChild(li);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var result = ___.readPub(results, i);
   [cajole]   var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]   var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]   var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]   x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]   x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                             return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                    return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                  }));
   [cajole]                                                                                           })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]   x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = 0; i &lt; n; ++i) {
   [cajole]   var result = results[ i ];
   [cajole]   var li = document.createElement('LI');
   [cajole]   var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]   li.addEventListener('click', (function (i) {
   [cajole]                                   return function () {
   [cajole]                                     return showResult(i);
   [cajole]                                   };
   [cajole]                                 })(i));
   [cajole]   resultList.appendChild(li);
   [cajole] }
   [cajole] result: (ForLoop) for (var i = 0; i &lt; n; ++i) {
   [cajole]   var result = ___.readPub(results, i);
   [cajole]   var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]   var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]   var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]   x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]   x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                             return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                    return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                  }));
   [cajole]                                                                                           })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]   x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) resultsOfLastSearch = results.slice(0) var resultList = document.getElementById('results') for (var child; child = resultList.getFirstChild();) {
   [cajole]   resultList.removeChild(child);
   [cajole] }
   [cajole] var n = results.length if (!n) {
   [cajole]   resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]   return undefined;
   [cajole] }
   [cajole] for (var i = 0; i &lt; n; ++i) {
   [cajole]   var result = results[ i ];
   [cajole]   var li = document.createElement('LI');
   [cajole]   var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]   li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]   li.addEventListener('click', (function (i) {
   [cajole]                                   return function () {
   [cajole]                                     return showResult(i);
   [cajole]                                   };
   [cajole]                                 })(i));
   [cajole]   resultList.appendChild(li);
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ])) var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])) for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]   x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole] }
   [cajole] var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')) if (!n) {
   [cajole]   x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]   return undefined;
   [cajole] }
   [cajole] for (var i = 0; i &lt; n; ++i) {
   [cajole]   var result = ___.readPub(results, i);
   [cajole]   var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]   var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]   var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]   x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]   x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                             return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                    return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                  }));
   [cajole]                                                                                           })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]   x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (results) {
   [cajole]   resultsOfLastSearch = results.slice(0);
   [cajole]   var resultList = document.getElementById('results');
   [cajole]   for (var child; child = resultList.getFirstChild();) {
   [cajole]     resultList.removeChild(child);
   [cajole]   }
   [cajole]   var n = results.length;
   [cajole]   if (!n) {
   [cajole]     resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]     return undefined;
   [cajole]   }
   [cajole]   for (var i = 0; i &lt; n; ++i) {
   [cajole]     var result = results[ i ];
   [cajole]     var li = document.createElement('LI');
   [cajole]     var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]     var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]     li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]     li.addEventListener('click', (function (i) {
   [cajole]                                     return function () {
   [cajole]                                       return showResult(i);
   [cajole]                                     };
   [cajole]                                   })(i));
   [cajole]     resultList.appendChild(li);
   [cajole]   }
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var x13___;
   [cajole]                                 var x14___;
   [cajole]                                 var x15___;
   [cajole]                                 var x16___;
   [cajole]                                 var x17___;
   [cajole]                                 var x18___;
   [cajole]                                 var x19___;
   [cajole]                                 var x20___;
   [cajole]                                 var x21___;
   [cajole]                                 var x22___;
   [cajole]                                 var x23___;
   [cajole]                                 var x24___;
   [cajole]                                 var x25___;
   [cajole]                                 var x26___;
   [cajole]                                 var x27___;
   [cajole]                                 resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                 var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                 for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                   x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                 }
   [cajole]                                 var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                 if (!n) {
   [cajole]                                   x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                   return undefined;
   [cajole]                                 }
   [cajole]                                 for (var i = 0; i &lt; n; ++i) {
   [cajole]                                   var result = ___.readPub(results, i);
   [cajole]                                   var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                   var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                   var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                   x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                   x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                             return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                    return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                  }));
   [cajole]                                                                                                                           })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                   x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                 }
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) searchEngine
   [cajole] result: (Reference) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) searchEngine.webSearch(query, function (results) {
   [cajole]                          resultsOfLastSearch = results.slice(0);
   [cajole]                          var resultList = document.getElementById('results');
   [cajole]                          for (var child; child = resultList.getFirstChild();) {
   [cajole]                            resultList.removeChild(child);
   [cajole]                          }
   [cajole]                          var n = results.length;
   [cajole]                          if (!n) {
   [cajole]                            resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                            return undefined;
   [cajole]                          }
   [cajole]                          for (var i = 0; i &lt; n; ++i) {
   [cajole]                            var result = results[ i ];
   [cajole]                            var li = document.createElement('LI');
   [cajole]                            var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                            li.addEventListener('click', (function (i) {
   [cajole]                                                            return function () {
   [cajole]                                                              return showResult(i);
   [cajole]                                                            };
   [cajole]                                                          })(i));
   [cajole]                            resultList.appendChild(li);
   [cajole]                          }
   [cajole]                        })
   [cajole] result: (SpecialOperation) x12___ = searchEngine, (x10___ = query, x11___ = ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                                                                  var x0___;
   [cajole]                                                                                  var x1___;
   [cajole]                                                                                  var x2___;
   [cajole]                                                                                  var x3___;
   [cajole]                                                                                  var x4___;
   [cajole]                                                                                  var x5___;
   [cajole]                                                                                  var x6___;
   [cajole]                                                                                  var x7___;
   [cajole]                                                                                  var x8___;
   [cajole]                                                                                  var x9___;
   [cajole]                                                                                  var x10___;
   [cajole]                                                                                  var x11___;
   [cajole]                                                                                  var x12___;
   [cajole]                                                                                  var x13___;
   [cajole]                                                                                  var x14___;
   [cajole]                                                                                  var x15___;
   [cajole]                                                                                  var x16___;
   [cajole]                                                                                  var x17___;
   [cajole]                                                                                  var x18___;
   [cajole]                                                                                  var x19___;
   [cajole]                                                                                  var x20___;
   [cajole]                                                                                  var x21___;
   [cajole]                                                                                  var x22___;
   [cajole]                                                                                  var x23___;
   [cajole]                                                                                  var x24___;
   [cajole]                                                                                  var x25___;
   [cajole]                                                                                  var x26___;
   [cajole]                                                                                  var x27___;
   [cajole]                                                                                  resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                                                                  var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                                                                  for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                                                                    x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                  var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                                                                  if (!n) {
   [cajole]                                                                                    x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                                                                    return undefined;
   [cajole]                                                                                  }
   [cajole]                                                                                  for (var i = 0; i &lt; n; ++i) {
   [cajole]                                                                                    var result = ___.readPub(results, i);
   [cajole]                                                                                    var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                                                                    var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                                                                    var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                                                                    x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                                                                    x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                                                                              return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                                                                     return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                                                                   }));
   [cajole]                                                                                                                                                                            })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                                                                    x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                }))), x12___.webSearch_canCall___? x12___.webSearch(x10___, x11___): ___.callPub(x12___, 'webSearch', [ x10___, x11___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) searchEngine.webSearch(query, function (results) {
   [cajole]                          resultsOfLastSearch = results.slice(0);
   [cajole]                          var resultList = document.getElementById('results');
   [cajole]                          for (var child; child = resultList.getFirstChild();) {
   [cajole]                            resultList.removeChild(child);
   [cajole]                          }
   [cajole]                          var n = results.length;
   [cajole]                          if (!n) {
   [cajole]                            resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                            return undefined;
   [cajole]                          }
   [cajole]                          for (var i = 0; i &lt; n; ++i) {
   [cajole]                            var result = results[ i ];
   [cajole]                            var li = document.createElement('LI');
   [cajole]                            var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                            li.addEventListener('click', (function (i) {
   [cajole]                                                            return function () {
   [cajole]                                                              return showResult(i);
   [cajole]                                                            };
   [cajole]                                                          })(i));
   [cajole]                            resultList.appendChild(li);
   [cajole]                          }
   [cajole]                        })
   [cajole] result: (ExpressionStmt) x12___ = searchEngine, (x10___ = query, x11___ = ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                                                                  var x0___;
   [cajole]                                                                                  var x1___;
   [cajole]                                                                                  var x2___;
   [cajole]                                                                                  var x3___;
   [cajole]                                                                                  var x4___;
   [cajole]                                                                                  var x5___;
   [cajole]                                                                                  var x6___;
   [cajole]                                                                                  var x7___;
   [cajole]                                                                                  var x8___;
   [cajole]                                                                                  var x9___;
   [cajole]                                                                                  var x10___;
   [cajole]                                                                                  var x11___;
   [cajole]                                                                                  var x12___;
   [cajole]                                                                                  var x13___;
   [cajole]                                                                                  var x14___;
   [cajole]                                                                                  var x15___;
   [cajole]                                                                                  var x16___;
   [cajole]                                                                                  var x17___;
   [cajole]                                                                                  var x18___;
   [cajole]                                                                                  var x19___;
   [cajole]                                                                                  var x20___;
   [cajole]                                                                                  var x21___;
   [cajole]                                                                                  var x22___;
   [cajole]                                                                                  var x23___;
   [cajole]                                                                                  var x24___;
   [cajole]                                                                                  var x25___;
   [cajole]                                                                                  var x26___;
   [cajole]                                                                                  var x27___;
   [cajole]                                                                                  resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                                                                  var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                                                                  for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                                                                    x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                  var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                                                                  if (!n) {
   [cajole]                                                                                    x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                                                                    return undefined;
   [cajole]                                                                                  }
   [cajole]                                                                                  for (var i = 0; i &lt; n; ++i) {
   [cajole]                                                                                    var result = ___.readPub(results, i);
   [cajole]                                                                                    var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                                                                    var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                                                                    var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                                                                    x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                                                                    x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                                                                              return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                                                                     return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                                                                   }));
   [cajole]                                                                                                                                                                            })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                                                                    x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                }))), x12___.webSearch_canCall___? x12___.webSearch(x10___, x11___): ___.callPub(x12___, 'webSearch', [ x10___, x11___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var form = button.getForm() var query = form.getElements().q.getValue().replace(/^\s+|\s+$/g, '') if (!query) {
   [cajole]   form.getElements().q.focus();
   [cajole]   return undefined;
   [cajole] }
   [cajole] searchEngine.webSearch(query, function (results) {
   [cajole]                          resultsOfLastSearch = results.slice(0);
   [cajole]                          var resultList = document.getElementById('results');
   [cajole]                          for (var child; child = resultList.getFirstChild();) {
   [cajole]                            resultList.removeChild(child);
   [cajole]                          }
   [cajole]                          var n = results.length;
   [cajole]                          if (!n) {
   [cajole]                            resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                            return undefined;
   [cajole]                          }
   [cajole]                          for (var i = 0; i &lt; n; ++i) {
   [cajole]                            var result = results[ i ];
   [cajole]                            var li = document.createElement('LI');
   [cajole]                            var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                            li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                            li.addEventListener('click', (function (i) {
   [cajole]                                                            return function () {
   [cajole]                                                              return showResult(i);
   [cajole]                                                            };
   [cajole]                                                          })(i));
   [cajole]                            resultList.appendChild(li);
   [cajole]                          }
   [cajole]                        })
   [cajole] result: (ParseTreeNodeContainer) var form = (x0___ = button, undefined, x0___.getForm_canCall___? x0___.getForm(): ___.callPub(x0___, 'getForm', [ ])) var query = (x3___ = (x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])), (x1___ = /^\s+|\s+$/g, x2___ = ''), x3___.replace_canCall___? x3___.replace(x1___, x2___): ___.callPub(x3___, 'replace', [ x1___, x2___ ])) if (!query) {
   [cajole]   x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ]);
   [cajole]   return undefined;
   [cajole] }
   [cajole] x12___ = searchEngine, (x10___ = query, x11___ = ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                                                                  var x0___;
   [cajole]                                                                                  var x1___;
   [cajole]                                                                                  var x2___;
   [cajole]                                                                                  var x3___;
   [cajole]                                                                                  var x4___;
   [cajole]                                                                                  var x5___;
   [cajole]                                                                                  var x6___;
   [cajole]                                                                                  var x7___;
   [cajole]                                                                                  var x8___;
   [cajole]                                                                                  var x9___;
   [cajole]                                                                                  var x10___;
   [cajole]                                                                                  var x11___;
   [cajole]                                                                                  var x12___;
   [cajole]                                                                                  var x13___;
   [cajole]                                                                                  var x14___;
   [cajole]                                                                                  var x15___;
   [cajole]                                                                                  var x16___;
   [cajole]                                                                                  var x17___;
   [cajole]                                                                                  var x18___;
   [cajole]                                                                                  var x19___;
   [cajole]                                                                                  var x20___;
   [cajole]                                                                                  var x21___;
   [cajole]                                                                                  var x22___;
   [cajole]                                                                                  var x23___;
   [cajole]                                                                                  var x24___;
   [cajole]                                                                                  var x25___;
   [cajole]                                                                                  var x26___;
   [cajole]                                                                                  var x27___;
   [cajole]                                                                                  resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                                                                  var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                                                                  for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                                                                    x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                  var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                                                                  if (!n) {
   [cajole]                                                                                    x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                                                                    return undefined;
   [cajole]                                                                                  }
   [cajole]                                                                                  for (var i = 0; i &lt; n; ++i) {
   [cajole]                                                                                    var result = ___.readPub(results, i);
   [cajole]                                                                                    var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                                                                    var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                                                                    var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                                                                    x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                                                                    x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                                                                              return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                                                                     return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                                                                   }));
   [cajole]                                                                                                                                                                            })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                                                                    x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                                                                  }
   [cajole]                                                                                }))), x12___.webSearch_canCall___? x12___.webSearch(x10___, x11___): ___.callPub(x12___, 'webSearch', [ x10___, x11___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function doSearch(button) {
   [cajole]   var form = button.getForm();
   [cajole]   var query = form.getElements().q.getValue().replace(/^\s+|\s+$/g, '');
   [cajole]   if (!query) {
   [cajole]     form.getElements().q.focus();
   [cajole]     return undefined;
   [cajole]   }
   [cajole]   searchEngine.webSearch(query, function (results) {
   [cajole]                            resultsOfLastSearch = results.slice(0);
   [cajole]                            var resultList = document.getElementById('results');
   [cajole]                            for (var child; child = resultList.getFirstChild();) {
   [cajole]                              resultList.removeChild(child);
   [cajole]                            }
   [cajole]                            var n = results.length;
   [cajole]                            if (!n) {
   [cajole]                              resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                              return undefined;
   [cajole]                            }
   [cajole]                            for (var i = 0; i &lt; n; ++i) {
   [cajole]                              var result = results[ i ];
   [cajole]                              var li = document.createElement('LI');
   [cajole]                              var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                              var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                              li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                              li.addEventListener('click', (function (i) {
   [cajole]                                                              return function () {
   [cajole]                                                                return showResult(i);
   [cajole]                                                              };
   [cajole]                                                            })(i));
   [cajole]                              resultList.appendChild(li);
   [cajole]                            }
   [cajole]                          });
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultsOfLastSearch
   [cajole] result: (Reference) resultsOfLastSearch

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) index
   [cajole] result: (Reference) index

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) resultsOfLastSearch[ index ]
   [cajole] result: (SpecialOperation) ___.readPub(resultsOfLastSearch, index)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var result = resultsOfLastSearch[ index ]
   [cajole] result: (Declaration) var result = ___.readPub(resultsOfLastSearch, index)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) resultConsumer
   [cajole] result: (Reference) resultConsumer

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) clone
   [cajole] result: (SpecialOperation) ___.primFreeze(clone)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) clone(result)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(clone))(result)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) resultConsumer(clone(result))
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) resultConsumer(clone(result))
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   resultConsumer(clone(result));
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (result) {
   [cajole]   resultConsumer(clone(result));
   [cajole] }
   [cajole] result: (Conditional) if (result) {
   [cajole]   ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return false
   [cajole] result: (ReturnStmt) return false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var result = resultsOfLastSearch[ index ] if (result) {
   [cajole]   resultConsumer(clone(result));
   [cajole] }
   [cajole] return false
   [cajole] result: (ParseTreeNodeContainer) var result = ___.readPub(resultsOfLastSearch, index) if (result) {
   [cajole]   ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result));
   [cajole] }
   [cajole] return false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function showResult(index) {
   [cajole]   var result = resultsOfLastSearch[ index ];
   [cajole]   if (result) {
   [cajole]     resultConsumer(clone(result));
   [cajole]   }
   [cajole]   return false;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var cloned = {
   [cajole] }
   [cajole] result: (Declaration) var cloned = {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) original
   [cajole] result: (Reference) original

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) x1___
   [cajole] result: (Identifier) x1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) x1___
   [cajole] result: (Reference) x1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) k = x1___
   [cajole] result: (AssignOperation) k = x1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) cloned
   [cajole] result: (Reference) cloned

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) original
   [cajole] result: (Reference) original

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) original[ k ]
   [cajole] result: (SpecialOperation) ___.readPub(original, k)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) cloned[ k ] = original[ k ]
   [cajole] result: (SpecialOperation) ___.setPub(cloned, k, ___.readPub(original, k))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) cloned[ k ] = original[ k ]
   [cajole] result: (ExpressionStmt) ___.setPub(cloned, k, ___.readPub(original, k))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   cloned[ k ] = original[ k ];
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.setPub(cloned, k, ___.readPub(original, k));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: foreach
   [cajole] input: (ForEachLoop) for (var k in original) {
   [cajole]   cloned[ k ] = original[ k ];
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x0___ = original;
   [cajole]   for (x1___ in x0___) {
   [cajole]     if (___.canEnumPub(x0___, x1___)) {
   [cajole]       k = x1___;
   [cajole]       {
   [cajole]         ___.setPub(cloned, k, ___.readPub(original, k));
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) cloned
   [cajole] result: (Reference) cloned

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return cloned
   [cajole] result: (ReturnStmt) return cloned

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var cloned = {
   [cajole] }
   [cajole] for (var k in original) {
   [cajole]   cloned[ k ] = original[ k ];
   [cajole] }
   [cajole] return cloned
   [cajole] result: (ParseTreeNodeContainer) var cloned = {
   [cajole] }
   [cajole] {
   [cajole]   x0___ = original;
   [cajole]   for (x1___ in x0___) {
   [cajole]     if (___.canEnumPub(x0___, x1___)) {
   [cajole]       k = x1___;
   [cajole]       {
   [cajole]         ___.setPub(cloned, k, ___.readPub(original, k));
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] return cloned

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function clone(original) {
   [cajole]   var cloned = {
   [cajole]   };
   [cajole]   for (var k in original) {
   [cajole]     cloned[ k ] = original[ k ];
   [cajole]   }
   [cajole]   return cloned;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   searchEngine;
   [cajole]   resultConsumer;
   [cajole]   var resultsOfLastSearch = [ ];
   [cajole]   function doSearch(button) {
   [cajole]     var form = button.getForm();
   [cajole]     var query = form.getElements().q.getValue().replace(/^\s+|\s+$/g, '');
   [cajole]     if (!query) {
   [cajole]       form.getElements().q.focus();
   [cajole]       return undefined;
   [cajole]     }
   [cajole]     searchEngine.webSearch(query, function (results) {
   [cajole]                              resultsOfLastSearch = results.slice(0);
   [cajole]                              var resultList = document.getElementById('results');
   [cajole]                              for (var child; child = resultList.getFirstChild();) {
   [cajole]                                resultList.removeChild(child);
   [cajole]                              }
   [cajole]                              var n = results.length;
   [cajole]                              if (!n) {
   [cajole]                                resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                                return undefined;
   [cajole]                              }
   [cajole]                              for (var i = 0; i &lt; n; ++i) {
   [cajole]                                var result = results[ i ];
   [cajole]                                var li = document.createElement('LI');
   [cajole]                                var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                                var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                                li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                                li.addEventListener('click', (function (i) {
   [cajole]                                                                return function () {
   [cajole]                                                                  return showResult(i);
   [cajole]                                                                };
   [cajole]                                                              })(i));
   [cajole]                                resultList.appendChild(li);
   [cajole]                              }
   [cajole]                            });
   [cajole]   }
   [cajole]   function showResult(index) {
   [cajole]     var result = resultsOfLastSearch[ index ];
   [cajole]     if (result) {
   [cajole]       resultConsumer(clone(result));
   [cajole]     }
   [cajole]     return false;
   [cajole]   }
   [cajole]   function clone(original) {
   [cajole]     var cloned = {
   [cajole]     };
   [cajole]     for (var k in original) {
   [cajole]       cloned[ k ] = original[ k ];
   [cajole]     }
   [cajole]     return cloned;
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   doSearch = ___.simpleFunc(function doSearch(button) {
   [cajole]                               var x0___;
   [cajole]                               var x1___;
   [cajole]                               var x2___;
   [cajole]                               var x3___;
   [cajole]                               var x4___;
   [cajole]                               var x5___;
   [cajole]                               var x6___;
   [cajole]                               var x7___;
   [cajole]                               var x8___;
   [cajole]                               var x9___;
   [cajole]                               var x10___;
   [cajole]                               var x11___;
   [cajole]                               var x12___;
   [cajole]                               var form = (x0___ = button, undefined, x0___.getForm_canCall___? x0___.getForm(): ___.callPub(x0___, 'getForm', [ ]));
   [cajole]                               var query = (x3___ = (x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])), (x1___ = /^\s+|\s+$/g, x2___ = ''), x3___.replace_canCall___? x3___.replace(x1___, x2___): ___.callPub(x3___, 'replace', [ x1___, x2___ ]));
   [cajole]                               if (!query) {
   [cajole]                                 x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ]);
   [cajole]                                 return undefined;
   [cajole]                               }
   [cajole]                               x12___ = searchEngine, (x10___ = query, x11___ = ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                                                                                                var x0___;
   [cajole]                                                                                                                var x1___;
   [cajole]                                                                                                                var x2___;
   [cajole]                                                                                                                var x3___;
   [cajole]                                                                                                                var x4___;
   [cajole]                                                                                                                var x5___;
   [cajole]                                                                                                                var x6___;
   [cajole]                                                                                                                var x7___;
   [cajole]                                                                                                                var x8___;
   [cajole]                                                                                                                var x9___;
   [cajole]                                                                                                                var x10___;
   [cajole]                                                                                                                var x11___;
   [cajole]                                                                                                                var x12___;
   [cajole]                                                                                                                var x13___;
   [cajole]                                                                                                                var x14___;
   [cajole]                                                                                                                var x15___;
   [cajole]                                                                                                                var x16___;
   [cajole]                                                                                                                var x17___;
   [cajole]                                                                                                                var x18___;
   [cajole]                                                                                                                var x19___;
   [cajole]                                                                                                                var x20___;
   [cajole]                                                                                                                var x21___;
   [cajole]                                                                                                                var x22___;
   [cajole]                                                                                                                var x23___;
   [cajole]                                                                                                                var x24___;
   [cajole]                                                                                                                var x25___;
   [cajole]                                                                                                                var x26___;
   [cajole]                                                                                                                var x27___;
   [cajole]                                                                                                                resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                                                                                                var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                                                                                                for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                                                                                                  x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                                                                                                }
   [cajole]                                                                                                                var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                                                                                                if (!n) {
   [cajole]                                                                                                                  x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                                                                                                  return undefined;
   [cajole]                                                                                                                }
   [cajole]                                                                                                                for (var i = 0; i &lt; n; ++i) {
   [cajole]                                                                                                                  var result = ___.readPub(results, i);
   [cajole]                                                                                                                  var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                                                                                                  var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                                                                                                  var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                                                                                                  x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                                                                                                  x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                                                                                                            return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                                                                                                   return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                                                                                                 }));
   [cajole]                                                                                                                                                                                                          })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                                                                                                  x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                                                                                                }
   [cajole]                                                                                                              }))), x12___.webSearch_canCall___? x12___.webSearch(x10___, x11___): ___.callPub(x12___, 'webSearch', [ x10___, x11___ ]);
   [cajole]                             });
   [cajole]   showResult = ___.simpleFunc(function showResult(index) {
   [cajole]                                 var result = ___.readPub(resultsOfLastSearch, index);
   [cajole]                                 if (result) {
   [cajole]                                   ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result));
   [cajole]                                 }
   [cajole]                                 return false;
   [cajole]                               });
   [cajole]   clone = ___.simpleFunc(function clone(original) {
   [cajole]                            var k;
   [cajole]                            var x0___;
   [cajole]                            var x1___;
   [cajole]                            var cloned = {
   [cajole]                            };
   [cajole]                            {
   [cajole]                              x0___ = original;
   [cajole]                              for (x1___ in x0___) {
   [cajole]                                if (___.canEnumPub(x0___, x1___)) {
   [cajole]                                  k = x1___;
   [cajole]                                  {
   [cajole]                                    ___.setPub(cloned, k, ___.readPub(original, k));
   [cajole]                                  }
   [cajole]                                }
   [cajole]                              }
   [cajole]                            }
   [cajole]                            return cloned;
   [cajole]                          });
   [cajole]   searchEngine;
   [cajole]   resultConsumer;
   [cajole]   var resultsOfLastSearch = [ ];
   [cajole]   ;
   [cajole]   ;
   [cajole]   ;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) htmlEmitter___
   [cajole] result: (Identifier) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) htmlEmitter___
   [cajole] result: (Reference) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n\n'
   [cajole] result: (StringLiteral) '\n\n'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) b
   [cajole] result: (Identifier) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'center'
   [cajole] result: (StringLiteral) 'center'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) f
   [cajole] result: (Identifier) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) f
   [cajole] result: (Reference) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false)
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n  '
   [cajole] result: (StringLiteral) '\n  '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) b
   [cajole] result: (Identifier) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'form'
   [cajole] result: (StringLiteral) 'form'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'onsubmit'
   [cajole] result: (StringLiteral) 'onsubmit'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'return false'
   [cajole] result: (StringLiteral) 'return false'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) f
   [cajole] result: (Identifier) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) f
   [cajole] result: (Reference) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false)
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n    '
   [cajole] result: (StringLiteral) '\n    '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) b
   [cajole] result: (Identifier) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'input'
   [cajole] result: (StringLiteral) 'input'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'type'
   [cajole] result: (StringLiteral) 'type'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'text'
   [cajole] result: (StringLiteral) 'text'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'size'
   [cajole] result: (StringLiteral) 'size'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '60'
   [cajole] result: (StringLiteral) '60'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'name'
   [cajole] result: (StringLiteral) 'name'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'q'
   [cajole] result: (StringLiteral) 'q'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'value'
   [cajole] result: (StringLiteral) 'value'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'it was the best of times'
   [cajole] result: (StringLiteral) 'it was the best of times'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) f
   [cajole] result: (Identifier) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) f
   [cajole] result: (Reference) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) true
   [cajole] result: (BooleanLiteral) true

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true)
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n    '
   [cajole] result: (StringLiteral) '\n    '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) b
   [cajole] result: (Identifier) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'input'
   [cajole] result: (StringLiteral) 'input'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'type'
   [cajole] result: (StringLiteral) 'type'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'button'
   [cajole] result: (StringLiteral) 'button'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'value'
   [cajole] result: (StringLiteral) 'value'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'Search'
   [cajole] result: (StringLiteral) 'Search'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) a
   [cajole] result: (Identifier) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'onclick'
   [cajole] result: (StringLiteral) 'onclick'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'return plugin_dispatchEvent___(this, event || window.event, '
   [cajole] result: (StringLiteral) 'return plugin_dispatchEvent___(this, event || window.event, '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) ___
   [cajole] result: (Identifier) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) ___
   [cajole] result: (Reference) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getId
   [cajole] result: (Identifier) getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getId
   [cajole] result: (Reference) getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.getId
   [cajole] result: (SpecialOperation) ___.getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.getId(IMPORTS___)
   [cajole] result: (SpecialOperation) ___.getId(IMPORTS___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___)
   [cajole] result: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ', \'c_1___\')'
   [cajole] result: (StringLiteral) ', \'c_1___\')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')'
   [cajole] result: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) f
   [cajole] result: (Identifier) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) f
   [cajole] result: (Reference) f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) true
   [cajole] result: (BooleanLiteral) true

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true)
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n  '
   [cajole] result: (StringLiteral) '\n  '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) e
   [cajole] result: (Identifier) e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) e
   [cajole] result: (Reference) e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'form'
   [cajole] result: (StringLiteral) 'form'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n'
   [cajole] result: (StringLiteral) '\n'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) e
   [cajole] result: (Identifier) e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) e
   [cajole] result: (Reference) e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'center'
   [cajole] result: (StringLiteral) 'center'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n'
   [cajole] result: (StringLiteral) '\n'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n')
   [cajole] result: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: module
   [cajole] input: (Block) {
   [cajole]   IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                        doSearch(thisNode___);
   [cajole]                                      });
   [cajole]   {
   [cajole]     searchEngine;
   [cajole]     resultConsumer;
   [cajole]     var resultsOfLastSearch = [ ];
   [cajole]     function doSearch(button) {
   [cajole]       var form = button.getForm();
   [cajole]       var query = form.getElements().q.getValue().replace(/^\s+|\s+$/g, '');
   [cajole]       if (!query) {
   [cajole]         form.getElements().q.focus();
   [cajole]         return undefined;
   [cajole]       }
   [cajole]       searchEngine.webSearch(query, function (results) {
   [cajole]                                resultsOfLastSearch = results.slice(0);
   [cajole]                                var resultList = document.getElementById('results');
   [cajole]                                for (var child; child = resultList.getFirstChild();) {
   [cajole]                                  resultList.removeChild(child);
   [cajole]                                }
   [cajole]                                var n = results.length;
   [cajole]                                if (!n) {
   [cajole]                                  resultList.innerHTML = new StringInterpolation([ '&lt;center&gt;No results&lt;/center&gt;' ]);
   [cajole]                                  return undefined;
   [cajole]                                }
   [cajole]                                for (var i = 0; i &lt; n; ++i) {
   [cajole]                                  var result = results[ i ];
   [cajole]                                  var li = document.createElement('LI');
   [cajole]                                  var snippetText = result.snippetHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                                  var titleText = result.titleHtml.replace(/&lt;\/?[A-Za-z][^&gt;]*&gt;/g, ' ');
   [cajole]                                  li.innerHTML = new StringInterpolation([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', result.url, '&lt;/a&gt;&lt;/tt&gt;' ]);
   [cajole]                                  li.addEventListener('click', (function (i) {
   [cajole]                                                                  return function () {
   [cajole]                                                                    return showResult(i);
   [cajole]                                                                  };
   [cajole]                                                                })(i));
   [cajole]                                  resultList.appendChild(li);
   [cajole]                                }
   [cajole]                              });
   [cajole]     }
   [cajole]     function showResult(index) {
   [cajole]       var result = resultsOfLastSearch[ index ];
   [cajole]       if (result) {
   [cajole]         resultConsumer(clone(result));
   [cajole]       }
   [cajole]       return false;
   [cajole]     }
   [cajole]     function clone(original) {
   [cajole]       var cloned = {
   [cajole]       };
   [cajole]       for (var k in original) {
   [cajole]         cloned[ k ] = original[ k ];
   [cajole]       }
   [cajole]       return cloned;
   [cajole]     }
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n');
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var searchEngine = ___.readImports(IMPORTS___, 'searchEngine');
   [cajole]   var clone = ___.readImports(IMPORTS___, 'clone');
   [cajole]   var resultConsumer = ___.readImports(IMPORTS___, 'resultConsumer');
   [cajole]   var doSearch;
   [cajole]   var StringInterpolation = ___.readImports(IMPORTS___, 'StringInterpolation');
   [cajole]   var document = ___.readImports(IMPORTS___, 'document');
   [cajole]   var showResult;
   [cajole]   var clone;
   [cajole]   IMPORTS___.emitCss___([ '.', ' #results-', ' li {\n  list-style-type: none;\n  margin-top: .5em;\n  border-bottom: 1px dotted #888\n}\n.', ' form {\n  display: inline\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   IMPORTS___.c_1___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                        ___.asSimpleFunc(___.primFreeze(doSearch))(thisNode___);
   [cajole]                                      });
   [cajole]   {
   [cajole]     doSearch = ___.simpleFunc(function doSearch(button) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var form = (x0___ = button, undefined, x0___.getForm_canCall___? x0___.getForm(): ___.callPub(x0___, 'getForm', [ ]));
   [cajole]                                 var query = (x3___ = (x4___ = (x5___ = (x6___ = form, undefined, x6___.getElements_canCall___? x6___.getElements(): ___.callPub(x6___, 'getElements', [ ])), x5___.q_canRead___? x5___.q: ___.readPub(x5___, 'q')), undefined, x4___.getValue_canCall___? x4___.getValue(): ___.callPub(x4___, 'getValue', [ ])), (x1___ = /^\s+|\s+$/g, x2___ = ''), x3___.replace_canCall___? x3___.replace(x1___, x2___): ___.callPub(x3___, 'replace', [ x1___, x2___ ]));
   [cajole]                                 if (!query) {
   [cajole]                                   x7___ = (x8___ = (x9___ = form, undefined, x9___.getElements_canCall___? x9___.getElements(): ___.callPub(x9___, 'getElements', [ ])), x8___.q_canRead___? x8___.q: ___.readPub(x8___, 'q')), undefined, x7___.focus_canCall___? x7___.focus(): ___.callPub(x7___, 'focus', [ ]);
   [cajole]                                   return undefined;
   [cajole]                                 }
   [cajole]                                 x12___ = searchEngine, (x10___ = query, x11___ = ___.primFreeze(___.simpleFunc(function (results) {
   [cajole]                                                                                                                  var x0___;
   [cajole]                                                                                                                  var x1___;
   [cajole]                                                                                                                  var x2___;
   [cajole]                                                                                                                  var x3___;
   [cajole]                                                                                                                  var x4___;
   [cajole]                                                                                                                  var x5___;
   [cajole]                                                                                                                  var x6___;
   [cajole]                                                                                                                  var x7___;
   [cajole]                                                                                                                  var x8___;
   [cajole]                                                                                                                  var x9___;
   [cajole]                                                                                                                  var x10___;
   [cajole]                                                                                                                  var x11___;
   [cajole]                                                                                                                  var x12___;
   [cajole]                                                                                                                  var x13___;
   [cajole]                                                                                                                  var x14___;
   [cajole]                                                                                                                  var x15___;
   [cajole]                                                                                                                  var x16___;
   [cajole]                                                                                                                  var x17___;
   [cajole]                                                                                                                  var x18___;
   [cajole]                                                                                                                  var x19___;
   [cajole]                                                                                                                  var x20___;
   [cajole]                                                                                                                  var x21___;
   [cajole]                                                                                                                  var x22___;
   [cajole]                                                                                                                  var x23___;
   [cajole]                                                                                                                  var x24___;
   [cajole]                                                                                                                  var x25___;
   [cajole]                                                                                                                  var x26___;
   [cajole]                                                                                                                  var x27___;
   [cajole]                                                                                                                  resultsOfLastSearch = (x1___ = results, x0___ = 0, x1___.slice_canCall___? x1___.slice(x0___): ___.callPub(x1___, 'slice', [ x0___ ]));
   [cajole]                                                                                                                  var resultList = (x3___ = document, x2___ = 'results', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ]));
   [cajole]                                                                                                                  for (var child; child = (x4___ = resultList, undefined, x4___.getFirstChild_canCall___? x4___.getFirstChild(): ___.callPub(x4___, 'getFirstChild', [ ]));) {
   [cajole]                                                                                                                    x6___ = resultList, x5___ = child, x6___.removeChild_canCall___? x6___.removeChild(x5___): ___.callPub(x6___, 'removeChild', [ x5___ ]);
   [cajole]                                                                                                                  }
   [cajole]                                                                                                                  var n = (x7___ = results, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'));
   [cajole]                                                                                                                  if (!n) {
   [cajole]                                                                                                                    x8___ = resultList, x9___ = new (___.asCtor(StringInterpolation))([ '&lt;center&gt;No results&lt;/center&gt;' ]), x8___.innerHTML_canSet___? (x8___.innerHTML = x9___): ___.setPub(x8___, 'innerHTML', x9___);
   [cajole]                                                                                                                    return undefined;
   [cajole]                                                                                                                  }
   [cajole]                                                                                                                  for (var i = 0; i &lt; n; ++i) {
   [cajole]                                                                                                                    var result = ___.readPub(results, i);
   [cajole]                                                                                                                    var li = (x11___ = document, x10___ = 'LI', x11___.createElement_canCall___? x11___.createElement(x10___): ___.callPub(x11___, 'createElement', [ x10___ ]));
   [cajole]                                                                                                                    var snippetText = (x14___ = (x15___ = result, x15___.snippetHtml_canRead___? x15___.snippetHtml: ___.readPub(x15___, 'snippetHtml')), (x12___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x13___ = ' '), x14___.replace_canCall___? x14___.replace(x12___, x13___): ___.callPub(x14___, 'replace', [ x12___, x13___ ]));
   [cajole]                                                                                                                    var titleText = (x18___ = (x19___ = result, x19___.titleHtml_canRead___? x19___.titleHtml: ___.readPub(x19___, 'titleHtml')), (x16___ = /&lt;\/?[A-Za-z][^&gt;]*&gt;/g, x17___ = ' '), x18___.replace_canCall___? x18___.replace(x16___, x17___): ___.callPub(x18___, 'replace', [ x16___, x17___ ]));
   [cajole]                                                                                                                    x20___ = li, x21___ = new (___.asCtor(StringInterpolation))([ '&lt;b&gt;', titleText, '&lt;/b&gt; &amp;mdash; &lt;tt&gt;&lt;a href=\&quot;#\&quot;&gt;', (x22___ = result, x22___.url_canRead___? x22___.url: ___.readPub(x22___, 'url')), '&lt;/a&gt;&lt;/tt&gt;' ]), x20___.innerHTML_canSet___? (x20___.innerHTML = x21___): ___.setPub(x20___, 'innerHTML', x21___);
   [cajole]                                                                                                                    x25___ = li, (x23___ = 'click', x24___ = ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function (i) {
   [cajole]                                                                                                                                                                                                              return ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                                                                                                                                                                                                                     return ___.asSimpleFunc(___.primFreeze(showResult))(i);
   [cajole]                                                                                                                                                                                                                                                   }));
   [cajole]                                                                                                                                                                                                            })))(i)), x25___.addEventListener_canCall___? x25___.addEventListener(x23___, x24___): ___.callPub(x25___, 'addEventListener', [ x23___, x24___ ]);
   [cajole]                                                                                                                    x27___ = resultList, x26___ = li, x27___.appendChild_canCall___? x27___.appendChild(x26___): ___.callPub(x27___, 'appendChild', [ x26___ ]);
   [cajole]                                                                                                                  }
   [cajole]                                                                                                                }))), x12___.webSearch_canCall___? x12___.webSearch(x10___, x11___): ___.callPub(x12___, 'webSearch', [ x10___, x11___ ]);
   [cajole]                               });
   [cajole]     showResult = ___.simpleFunc(function showResult(index) {
   [cajole]                                   var result = ___.readPub(resultsOfLastSearch, index);
   [cajole]                                   if (result) {
   [cajole]                                     ___.asSimpleFunc(resultConsumer)(___.asSimpleFunc(___.primFreeze(clone))(result));
   [cajole]                                   }
   [cajole]                                   return false;
   [cajole]                                 });
   [cajole]     clone = ___.simpleFunc(function clone(original) {
   [cajole]                              var k;
   [cajole]                              var x0___;
   [cajole]                              var x1___;
   [cajole]                              var cloned = {
   [cajole]                              };
   [cajole]                              {
   [cajole]                                x0___ = original;
   [cajole]                                for (x1___ in x0___) {
   [cajole]                                  if (___.canEnumPub(x0___, x1___)) {
   [cajole]                                    k = x1___;
   [cajole]                                    {
   [cajole]                                      ___.setPub(cloned, k, ___.readPub(original, k));
   [cajole]                                    }
   [cajole]                                  }
   [cajole]                                }
   [cajole]                              }
   [cajole]                              return cloned;
   [cajole]                            });
   [cajole]     searchEngine;
   [cajole]     resultConsumer;
   [cajole]     var resultsOfLastSearch = [ ];
   [cajole]     ;
   [cajole]     ;
   [cajole]     ;
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n\n').b('center').f(false).pc('\n  ').b('form').a('onsubmit', 'return false').f(false).pc('\n    ').b('input').a('type', 'text').a('size', '60').a('name', 'q').a('value', 'it was the best of times').f(true).pc('\n    ').b('input').a('type', 'button').a('value', 'Search').a('onclick', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c_1___\')').f(true).pc('\n  ').e('form').pc('\n').e('center').pc('\n');
   [cajole] }

   [cajole] compiling 1 files to /opt/svn/google-caja/src/ant-www/lolcat-search/kittens-cajoled.js
   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) emitCss___
   [cajole] result: (Identifier) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) emitCss___
   [cajole] result: (Reference) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '.'
   [cajole] result: (StringLiteral) '.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' table {\n  border: 1px dotted #888\n}\n.'
   [cajole] result: (StringLiteral) ' table {\n  border: 1px dotted #888\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' .snippet {\n  width: 30em\n}'
   [cajole] result: (StringLiteral) ' .snippet {\n  width: 30em\n}'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ArrayConstructor) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ]
   [cajole] result: (ArrayConstructor) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) join
   [cajole] result: (Identifier) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) join
   [cajole] result: (Reference) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join
   [cajole] result: (SpecialOperation) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getIdClass___
   [cajole] result: (Identifier) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getIdClass___
   [cajole] result: (Reference) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___()
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___())
   [cajole] result: (SpecialOperation) [ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___())

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /^ +| +$/g
   [cajole] result: (RegexpLiteral) /^ +| +$/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\s+/g
   [cajole] result: (RegexpLiteral) /\s+/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' '
   [cajole] result: (StringLiteral) ' '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) text.toUpperCase()
   [cajole] result: (SpecialOperation) x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) text.toUpperCase().replace(/\s+/g, ' ')
   [cajole] result: (SpecialOperation) x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '')
   [cajole] result: (SpecialOperation) x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '')
   [cajole] result: (AssignOperation) text = (x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '')
   [cajole] result: (ExpressionStmt) text = (x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = 0
   [cajole] result: (Declaration) var i = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) TRANSFORMATIONS
   [cajole] result: (Reference) TRANSFORMATIONS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) TRANSFORMATIONS.length
   [cajole] result: (SpecialOperation) x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var n = TRANSFORMATIONS.length
   [cajole] result: (Declaration) var n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var i = 0, n = TRANSFORMATIONS.length
   [cajole] result: (MultiDeclaration) var i = 0, n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &lt; n
   [cajole] result: (SimpleOperation) i &lt; n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) i += 2
   [cajole] result: (AssignOperation) i = i + 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) i += 2
   [cajole] result: (ExpressionStmt) i = i + 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) TRANSFORMATIONS
   [cajole] result: (Reference) TRANSFORMATIONS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) TRANSFORMATIONS[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(TRANSFORMATIONS, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) TRANSFORMATIONS
   [cajole] result: (Reference) TRANSFORMATIONS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i + 1
   [cajole] result: (SimpleOperation) i + 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) TRANSFORMATIONS[ i + 1 ]
   [cajole] result: (SpecialOperation) ___.readPub(TRANSFORMATIONS, i + 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ])
   [cajole] result: (SpecialOperation) x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ])
   [cajole] result: (AssignOperation) text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ])
   [cajole] result: (ExpressionStmt) text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = 0, n = TRANSFORMATIONS.length; i &lt; n; i += 2) {
   [cajole]   text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole] }
   [cajole] result: (ForLoop) for (var i = 0, n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')); i &lt; n; i = i + 2) {
   [cajole]   text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) text
   [cajole] result: (Reference) text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return text
   [cajole] result: (ReturnStmt) return text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '') for (var i = 0, n = TRANSFORMATIONS.length; i &lt; n; i += 2) {
   [cajole]   text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole] }
   [cajole] return text
   [cajole] result: (ParseTreeNodeContainer) text = (x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])) for (var i = 0, n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')); i &lt; n; i = i + 2) {
   [cajole]   text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]));
   [cajole] }
   [cajole] return text

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function katTranzlator(text) {
   [cajole]   text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '');
   [cajole]   for (var i = 0, n = TRANSFORMATIONS.length; i &lt; n; i += 2) {
   [cajole]     text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole]   }
   [cajole]   return text;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g
   [cajole] result: (RegexpLiteral) /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1 CAN'
   [cajole] result: (StringLiteral) '$1 CAN'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bTO\b/g
   [cajole] result: (RegexpLiteral) /\bTO\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '2'
   [cajole] result: (StringLiteral) '2'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bFOR\b/g
   [cajole] result: (RegexpLiteral) /\bFOR\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '4'
   [cajole] result: (StringLiteral) '4'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bYOUR\b/g
   [cajole] result: (RegexpLiteral) /\bYOUR\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'UR'
   [cajole] result: (StringLiteral) 'UR'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bYOU\b/g
   [cajole] result: (RegexpLiteral) /\bYOU\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'U'
   [cajole] result: (StringLiteral) 'U'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bTHIS\b/g
   [cajole] result: (RegexpLiteral) /\bTHIS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'DIS'
   [cajole] result: (StringLiteral) 'DIS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bWITH\b/g
   [cajole] result: (RegexpLiteral) /\bWITH\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'WIF'
   [cajole] result: (StringLiteral) 'WIF'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bHAVE\b/g
   [cajole] result: (RegexpLiteral) /\bHAVE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'HAZ'
   [cajole] result: (StringLiteral) 'HAZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bARE\b/g
   [cajole] result: (RegexpLiteral) /\bARE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IS'
   [cajole] result: (StringLiteral) 'IS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bAM\b/g
   [cajole] result: (RegexpLiteral) /\bAM\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IS'
   [cajole] result: (StringLiteral) 'IS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bPLEASE\b/g
   [cajole] result: (RegexpLiteral) /\bPLEASE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'PLZ'
   [cajole] result: (StringLiteral) 'PLZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bTHANKS\b/g
   [cajole] result: (RegexpLiteral) /\bTHANKS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'THX'
   [cajole] result: (StringLiteral) 'THX'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bOH MY (GOD|GOSH)\b/g
   [cajole] result: (RegexpLiteral) /\bOH MY (GOD|GOSH)\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OMG'
   [cajole] result: (StringLiteral) 'OMG'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bATE\b/g
   [cajole] result: (RegexpLiteral) /\bATE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'EATED'
   [cajole] result: (StringLiteral) 'EATED'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bSAID\b/g
   [cajole] result: (RegexpLiteral) /\bSAID\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SED'
   [cajole] result: (StringLiteral) 'SED'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bSERIOUSLY\b/g
   [cajole] result: (RegexpLiteral) /\bSERIOUSLY\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SRSLY'
   [cajole] result: (StringLiteral) 'SRSLY'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bKNOW\b/g
   [cajole] result: (RegexpLiteral) /\bKNOW\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'KNOE'
   [cajole] result: (StringLiteral) 'KNOE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bLOVE\b/g
   [cajole] result: (RegexpLiteral) /\bLOVE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'LUV'
   [cajole] result: (StringLiteral) 'LUV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bHELP\b/g
   [cajole] result: (RegexpLiteral) /\bHELP\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'HALP'
   [cajole] result: (StringLiteral) 'HALP'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bMAYBE\b/g
   [cajole] result: (RegexpLiteral) /\bMAYBE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'MEBBE'
   [cajole] result: (StringLiteral) 'MEBBE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bWAS\b/g
   [cajole] result: (RegexpLiteral) /\bWAS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'WUZ'
   [cajole] result: (StringLiteral) 'WUZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bOF\b/g
   [cajole] result: (RegexpLiteral) /\bOF\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OV'
   [cajole] result: (StringLiteral) 'OV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bOH\b/g
   [cajole] result: (RegexpLiteral) /\bOH\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'O'
   [cajole] result: (StringLiteral) 'O'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bREALLY\b/g
   [cajole] result: (RegexpLiteral) /\bREALLY\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'RLY'
   [cajole] result: (StringLiteral) 'RLY'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bGREAT\b/g
   [cajole] result: (RegexpLiteral) /\bGREAT\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'GRAET'
   [cajole] result: (StringLiteral) 'GRAET'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bMY\b/g
   [cajole] result: (RegexpLiteral) /\bMY\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'MAH'
   [cajole] result: (StringLiteral) 'MAH'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\b(HELLO|HI)\b/g
   [cajole] result: (RegexpLiteral) /\b(HELLO|HI)\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'HAI'
   [cajole] result: (StringLiteral) 'HAI'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /THI/g
   [cajole] result: (RegexpLiteral) /THI/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'TI'
   [cajole] result: (StringLiteral) 'TI'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bKN/g
   [cajole] result: (RegexpLiteral) /\bKN/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'N'
   [cajole] result: (StringLiteral) 'N'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^ ])SE(\b|[^AEIOU])/g
   [cajole] result: (RegexpLiteral) /([^ ])SE(\b|[^AEIOU])/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1ZE$2'
   [cajole] result: (StringLiteral) '$1ZE$2'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IES\b/g
   [cajole] result: (RegexpLiteral) /IES\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'EHS'
   [cajole] result: (StringLiteral) 'EHS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /TION(S?)\b/g
   [cajole] result: (RegexpLiteral) /TION(S?)\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SHUN'
   [cajole] result: (StringLiteral) 'SHUN'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /LE\b/g
   [cajole] result: (RegexpLiteral) /LE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'L'
   [cajole] result: (StringLiteral) 'L'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IENDS\b/g
   [cajole] result: (RegexpLiteral) /IENDS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'ENZ'
   [cajole] result: (StringLiteral) 'ENZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^R])ING\b/g
   [cajole] result: (RegexpLiteral) /([^R])ING\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1IN'
   [cajole] result: (StringLiteral) '$1IN'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /I([KM])E\b/g
   [cajole] result: (RegexpLiteral) /I([KM])E\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IE$1'
   [cajole] result: (StringLiteral) 'IE$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /ER( [^AEIOU]|$)/g
   [cajole] result: (RegexpLiteral) /ER( [^AEIOU]|$)/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'AH$1'
   [cajole] result: (StringLiteral) 'AH$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /ORE\b/g
   [cajole] result: (RegexpLiteral) /ORE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OAR'
   [cajole] result: (StringLiteral) 'OAR'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IE\b/g
   [cajole] result: (RegexpLiteral) /IE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'EE'
   [cajole] result: (StringLiteral) 'EE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /AIR\b/g
   [cajole] result: (RegexpLiteral) /AIR\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'EH'
   [cajole] result: (StringLiteral) 'EH'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /AIN\b/g
   [cajole] result: (RegexpLiteral) /AIN\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'ANE'
   [cajole] result: (StringLiteral) 'ANE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IEF\b/g
   [cajole] result: (RegexpLiteral) /IEF\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'EEF'
   [cajole] result: (StringLiteral) 'EEF'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /TY\b/g
   [cajole] result: (RegexpLiteral) /TY\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'TI'
   [cajole] result: (StringLiteral) 'TI'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /NESS\b/g
   [cajole] result: (RegexpLiteral) /NESS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'NES'
   [cajole] result: (StringLiteral) 'NES'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^ AEIOU])E([RD])\b/g
   [cajole] result: (RegexpLiteral) /([^ AEIOU])E([RD])\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1$2'
   [cajole] result: (StringLiteral) '$1$2'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IC\b/g
   [cajole] result: (RegexpLiteral) /IC\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IK'
   [cajole] result: (StringLiteral) 'IK'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /VE\b/g
   [cajole] result: (RegexpLiteral) /VE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'V'
   [cajole] result: (StringLiteral) 'V'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /FORE\b/g
   [cajole] result: (RegexpLiteral) /FORE\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'FOA'
   [cajole] result: (StringLiteral) 'FOA'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /(O[^ AEIOU])E\b/g
   [cajole] result: (RegexpLiteral) /(O[^ AEIOU])E\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1'
   [cajole] result: (StringLiteral) '$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bPH([AEIOU])/g
   [cajole] result: (RegexpLiteral) /\bPH([AEIOU])/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'F$1'
   [cajole] result: (StringLiteral) 'F$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^AEIOU ])IR/g
   [cajole] result: (RegexpLiteral) /([^AEIOU ])IR/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1UR'
   [cajole] result: (StringLiteral) '$1UR'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^AEIOU ])S\b/g
   [cajole] result: (RegexpLiteral) /([^AEIOU ])S\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1Z'
   [cajole] result: (StringLiteral) '$1Z'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([^ AEIOU]) OV\b/g
   [cajole] result: (RegexpLiteral) /([^ AEIOU]) OV\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1A'
   [cajole] result: (StringLiteral) '$1A'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /N\'T/g
   [cajole] result: (RegexpLiteral) /N\'T/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'NT'
   [cajole] result: (StringLiteral) 'NT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /OAR/g
   [cajole] result: (RegexpLiteral) /OAR/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OR'
   [cajole] result: (StringLiteral) 'OR'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /IGHT/g
   [cajole] result: (RegexpLiteral) /IGHT/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'ITE'
   [cajole] result: (StringLiteral) 'ITE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([AEIOU])S([BDFJV])/g
   [cajole] result: (RegexpLiteral) /([AEIOU])S([BDFJV])/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1Z$2'
   [cajole] result: (StringLiteral) '$1Z$2'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /CEIV/g
   [cajole] result: (RegexpLiteral) /CEIV/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'CEEV'
   [cajole] result: (StringLiteral) 'CEEV'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /AUGHT/g
   [cajole] result: (RegexpLiteral) /AUGHT/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'AWT'
   [cajole] result: (StringLiteral) 'AWT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /OO/g
   [cajole] result: (RegexpLiteral) /OO/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'U'
   [cajole] result: (StringLiteral) 'U'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /U([^ AEIOU])E/g
   [cajole] result: (RegexpLiteral) /U([^ AEIOU])E/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OO$1'
   [cajole] result: (StringLiteral) 'OO$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /U([^ AEIOU]I)/g
   [cajole] result: (RegexpLiteral) /U([^ AEIOU]I)/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OO$1'
   [cajole] result: (StringLiteral) 'OO$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /CIOUS/g
   [cajole] result: (RegexpLiteral) /CIOUS/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SHUS'
   [cajole] result: (StringLiteral) 'SHUS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /OUCH/g
   [cajole] result: (RegexpLiteral) /OUCH/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OWCH'
   [cajole] result: (StringLiteral) 'OWCH'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /ISON/g
   [cajole] result: (RegexpLiteral) /ISON/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'ISUN'
   [cajole] result: (StringLiteral) 'ISUN'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /OIS/g
   [cajole] result: (RegexpLiteral) /OIS/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'OYZ'
   [cajole] result: (StringLiteral) 'OYZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bSEAR/g
   [cajole] result: (RegexpLiteral) /\bSEAR/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SER'
   [cajole] result: (StringLiteral) 'SER'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bSEA/g
   [cajole] result: (RegexpLiteral) /\bSEA/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'SEE'
   [cajole] result: (StringLiteral) 'SEE'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bGOD/g
   [cajole] result: (RegexpLiteral) /\bGOD/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'CEILING CAT'
   [cajole] result: (StringLiteral) 'CEILING CAT'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bHEAVEN/g
   [cajole] result: (RegexpLiteral) /\bHEAVEN/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'CEILING'
   [cajole] result: (StringLiteral) 'CEILING'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /([AEIOU])[SZ]E/g
   [cajole] result: (RegexpLiteral) /([AEIOU])[SZ]E/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1Z'
   [cajole] result: (StringLiteral) '$1Z'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bI AM\b/g
   [cajole] result: (RegexpLiteral) /\bI AM\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'I'
   [cajole] result: (StringLiteral) 'I'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bIZ A\b/g
   [cajole] result: (RegexpLiteral) /\bIZ A\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IS'
   [cajole] result: (StringLiteral) 'IS'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bHAZ NO\b/g
   [cajole] result: (RegexpLiteral) /\bHAZ NO\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'NO HAZ'
   [cajole] result: (StringLiteral) 'NO HAZ'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bDO YOU\b/g
   [cajole] result: (RegexpLiteral) /\bDO YOU\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'YOU'
   [cajole] result: (StringLiteral) 'YOU'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bA ([A-Z]+)\b/g
   [cajole] result: (RegexpLiteral) /\bA ([A-Z]+)\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '$1'
   [cajole] result: (StringLiteral) '$1'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /\bI IS\b/g
   [cajole] result: (RegexpLiteral) /\bI IS\b/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'IM'
   [cajole] result: (StringLiteral) 'IM'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ]
   [cajole] result: (ArrayConstructor) [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ]
   [cajole] result: (Declaration) var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   function katTranzlator(text) {
   [cajole]     text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '');
   [cajole]     for (var i = 0, n = TRANSFORMATIONS.length; i &lt; n; i += 2) {
   [cajole]       text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole]     }
   [cajole]     return text;
   [cajole]   }
   [cajole]   var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ];
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   katTranzlator = ___.simpleFunc(function katTranzlator(text) {
   [cajole]                                    var x0___;
   [cajole]                                    var x1___;
   [cajole]                                    var x2___;
   [cajole]                                    var x3___;
   [cajole]                                    var x4___;
   [cajole]                                    var x5___;
   [cajole]                                    var x6___;
   [cajole]                                    var x7___;
   [cajole]                                    var x8___;
   [cajole]                                    var x9___;
   [cajole]                                    var x10___;
   [cajole]                                    text = (x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                    for (var i = 0, n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')); i &lt; n; i = i + 2) {
   [cajole]                                      text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]));
   [cajole]                                    }
   [cajole]                                    return text;
   [cajole]                                  });
   [cajole]   ;
   [cajole]   var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ];
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) htmlEmitter___
   [cajole] result: (Identifier) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) htmlEmitter___
   [cajole] result: (Reference) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n'
   [cajole] result: (StringLiteral) '\n'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n')
   [cajole] result: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) searchEngine
   [cajole] result: (Reference) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) searchEngine
   [cajole] result: (ExpressionStmt) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) exports
   [cajole] result: (Reference) exports

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /&lt;\/?\w[^&gt;]*&gt;/g
   [cajole] result: (RegexpLiteral) /&lt;\/?\w[^&gt;]*&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) result.titleHtml
   [cajole] result: (SpecialOperation) x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '')
   [cajole] result: (SpecialOperation) x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '')
   [cajole] result: (Declaration) var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /&lt;\/?\w[^&gt;]*&gt;/g
   [cajole] result: (RegexpLiteral) /&lt;\/?\w[^&gt;]*&gt;/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) result
   [cajole] result: (Reference) result

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) result.snippetHtml
   [cajole] result: (SpecialOperation) x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '')
   [cajole] result: (SpecialOperation) x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '')
   [cajole] result: (Declaration) var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) renderKittenTable
   [cajole] result: (SpecialOperation) ___.primFreeze(renderKittenTable)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'loading.jpg'
   [cajole] result: (StringLiteral) 'loading.jpg'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) snippet
   [cajole] result: (Reference) snippet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) renderKittenTable('loading.jpg', snippet)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) renderKittenTable('loading.jpg', snippet)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '(+kitten OR +cat) '
   [cajole] result: (StringLiteral) '(+kitten OR +cat) '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) title
   [cajole] result: (Reference) title

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) '(+kitten OR +cat) ' + title
   [cajole] result: (SimpleOperation) '(+kitten OR +cat) ' + title

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) imageResults
   [cajole] result: (Reference) imageResults

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) imageResults.length
   [cajole] result: (SpecialOperation) x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var n = imageResults.length
   [cajole] result: (Declaration) var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) n
   [cajole] result: (Reference) n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !n
   [cajole] result: (SimpleOperation) !n

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) renderKittenTable
   [cajole] result: (SpecialOperation) ___.primFreeze(renderKittenTable)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'error.jpg'
   [cajole] result: (StringLiteral) 'error.jpg'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) snippet
   [cajole] result: (Reference) snippet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) renderKittenTable('error.jpg', snippet)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) renderKittenTable('error.jpg', snippet)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (UndefinedLiteral) undefined
   [cajole] result: (UndefinedLiteral) undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return undefined
   [cajole] result: (ReturnStmt) return undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   renderKittenTable('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!n) {
   [cajole]   renderKittenTable('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Conditional) if (!n) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var k = 0
   [cajole] result: (Declaration) var k = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'chose '
   [cajole] result: (StringLiteral) 'chose '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'chose ' + k
   [cajole] result: (SimpleOperation) 'chose ' + k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' from '
   [cajole] result: (StringLiteral) ' from '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'chose ' + k + ' from '
   [cajole] result: (SimpleOperation) 'chose ' + k + ' from '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) imageResults
   [cajole] result: (Reference) imageResults

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) imageResults.length
   [cajole] result: (SpecialOperation) x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'chose ' + k + ' from ' + imageResults.length
   [cajole] result: (SimpleOperation) 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.log('chose ' + k + ' from ' + imageResults.length)
   [cajole] result: (SpecialOperation) x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.log('chose ' + k + ' from ' + imageResults.length)
   [cajole] result: (ExpressionStmt) x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) renderKittenTable
   [cajole] result: (SpecialOperation) ___.primFreeze(renderKittenTable)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) imageResults
   [cajole] result: (Reference) imageResults

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) imageResults[ k ]
   [cajole] result: (SpecialOperation) ___.readPub(imageResults, k)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) imageResults[ k ].url
   [cajole] result: (SpecialOperation) x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) snippet
   [cajole] result: (Reference) snippet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) renderKittenTable(imageResults[ k ].url, snippet)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) renderKittenTable(imageResults[ k ].url, snippet)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var n = imageResults.length if (!n) {
   [cajole]   renderKittenTable('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }
   [cajole] var k = 0 console.log('chose ' + k + ' from ' + imageResults.length) renderKittenTable(imageResults[ k ].url, snippet)
   [cajole] result: (ParseTreeNodeContainer) var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) if (!n) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]   return undefined;
   [cajole] }
   [cajole] var k = 0 x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]) ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (imageResults) {
   [cajole]   var n = imageResults.length;
   [cajole]   if (!n) {
   [cajole]     renderKittenTable('error.jpg', snippet);
   [cajole]     return undefined;
   [cajole]   }
   [cajole]   var k = 0;
   [cajole]   console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]   renderKittenTable(imageResults[ k ].url, snippet);
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                 if (!n) {
   [cajole]                                   ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                   return undefined;
   [cajole]                                 }
   [cajole]                                 var k = 0;
   [cajole]                                 x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) searchEngine
   [cajole] result: (Reference) searchEngine

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                            var n = imageResults.length;
   [cajole]                            if (!n) {
   [cajole]                              renderKittenTable('error.jpg', snippet);
   [cajole]                              return undefined;
   [cajole]                            }
   [cajole]                            var k = 0;
   [cajole]                            console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                            renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                          })
   [cajole] result: (SpecialOperation) x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                       var x0___;
   [cajole]                                                                                                       var x1___;
   [cajole]                                                                                                       var x2___;
   [cajole]                                                                                                       var x3___;
   [cajole]                                                                                                       var x4___;
   [cajole]                                                                                                       var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                       if (!n) {
   [cajole]                                                                                                         ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                         return undefined;
   [cajole]                                                                                                       }
   [cajole]                                                                                                       var k = 0;
   [cajole]                                                                                                       x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                       ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                     }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                            var n = imageResults.length;
   [cajole]                            if (!n) {
   [cajole]                              renderKittenTable('error.jpg', snippet);
   [cajole]                              return undefined;
   [cajole]                            }
   [cajole]                            var k = 0;
   [cajole]                            console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                            renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                          })
   [cajole] result: (ExpressionStmt) x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                       var x0___;
   [cajole]                                                                                                       var x1___;
   [cajole]                                                                                                       var x2___;
   [cajole]                                                                                                       var x3___;
   [cajole]                                                                                                       var x4___;
   [cajole]                                                                                                       var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                       if (!n) {
   [cajole]                                                                                                         ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                         return undefined;
   [cajole]                                                                                                       }
   [cajole]                                                                                                       var k = 0;
   [cajole]                                                                                                       x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                       ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                     }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '') var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '') renderKittenTable('loading.jpg', snippet) searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                                                                                                                                                                                              var n = imageResults.length;
   [cajole]                                                                                                                                                                                              if (!n) {
   [cajole]                                                                                                                                                                                                renderKittenTable('error.jpg', snippet);
   [cajole]                                                                                                                                                                                                return undefined;
   [cajole]                                                                                                                                                                                              }
   [cajole]                                                                                                                                                                                              var k = 0;
   [cajole]                                                                                                                                                                                              console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                                                                                                                                                                                              renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                                                                                                                                                                                            })
   [cajole] result: (ParseTreeNodeContainer) var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ])) var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ])) ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet) x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajolevar x0___;
   [cajolevar x1___;
   [cajolevar x2___;
   [cajole]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   var x3___;
   [cajole]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   var x4___;
   [cajolevar n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajoleif (!n) {
   [cajoleasSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajolereturn undefined;
   [cajole}
   [cajolevar k = 0;
   [cajolex3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole}))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleValue
   [cajole] input: (FunctionConstructor) function showKitten(result) {
   [cajole]   var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   renderKittenTable('loading.jpg', snippet);
   [cajole]   searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                              var n = imageResults.length;
   [cajole]                              if (!n) {
   [cajole]                                renderKittenTable('error.jpg', snippet);
   [cajole]                                return undefined;
   [cajole]                              }
   [cajole]                              var k = 0;
   [cajole]                              console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                              renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                            });
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function showKitten(result) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                 var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]));
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet);
   [cajole]                                 x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                                                       var x0___;
   [cajole]                                                                                                                                       var x1___;
   [cajole]                                                                                                                                       var x2___;
   [cajole]                                                                                                                                       var x3___;
   [cajole]                                                                                                                                       var x4___;
   [cajole]                                                                                                                                       var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                                                       if (!n) {
   [cajole]                                                                                                                                         ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                                                         return undefined;
   [cajole]                                                                                                                                       }
   [cajole]                                                                                                                                       var k = 0;
   [cajole]                                                                                                                                       x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                       ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                                                     }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ]);
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) exports.showKitten = function showKitten(result) {
   [cajole]   var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   renderKittenTable('loading.jpg', snippet);
   [cajole]   searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                              var n = imageResults.length;
   [cajole]                              if (!n) {
   [cajole]                                renderKittenTable('error.jpg', snippet);
   [cajole]                                return undefined;
   [cajole]                              }
   [cajole]                              var k = 0;
   [cajole]                              console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                              renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                            });
   [cajole] }
   [cajole] result: (SpecialOperation) x0___ = exports, x1___ = ___.primFreeze(___.simpleFunc(function showKitten(result) {
   [cajole]                                                          var x0___;
   [cajole]                                                          var x1___;
   [cajole]                                                          var x2___;
   [cajole]                                                          var x3___;
   [cajole]                                                          var x4___;
   [cajole]                                                          var x5___;
   [cajole]                                                          var x6___;
   [cajole]                                                          var x7___;
   [cajole]                                                          var x8___;
   [cajole]                                                          var x9___;
   [cajole]                                                          var x10___;
   [cajole]                                                          var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                                          var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]));
   [cajole]                                                          ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet);
   [cajole]                                                          x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                                                                                var x0___;
   [cajole]                                                                                                                                                                var x1___;
   [cajole]                                                                                                                                                                var x2___;
   [cajole]                                                                                                                                                                var x3___;
   [cajole]                                                                                                                                                                var x4___;
   [cajole]                                                                                                                                                                var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                                                                                if (!n) {
   [cajole]                                                                                                                                                                  ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                                                                                  return undefined;
   [cajole]                                                                                                                                                                }
   [cajole]                                                                                                                                                                var k = 0;
   [cajole]                                                                                                                                                                x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                                                ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                                                                              }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ]);
   [cajole]                                                        })), x0___.showKitten_canSet___? (x0___.showKitten = x1___): ___.setPub(x0___, 'showKitten', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) exports.showKitten = function showKitten(result) {
   [cajole]   var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]   renderKittenTable('loading.jpg', snippet);
   [cajole]   searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                              var n = imageResults.length;
   [cajole]                              if (!n) {
   [cajole]                                renderKittenTable('error.jpg', snippet);
   [cajole]                                return undefined;
   [cajole]                              }
   [cajole]                              var k = 0;
   [cajole]                              console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                              renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                            });
   [cajole] }
   [cajole] result: (ExpressionStmt) x0___ = exports, x1___ = ___.primFreeze(___.simpleFunc(function showKitten(result) {
   [cajole]                                                          var x0___;
   [cajole]                                                          var x1___;
   [cajole]                                                          var x2___;
   [cajole]                                                          var x3___;
   [cajole]                                                          var x4___;
   [cajole]                                                          var x5___;
   [cajole]                                                          var x6___;
   [cajole]                                                          var x7___;
   [cajole]                                                          var x8___;
   [cajole]                                                          var x9___;
   [cajole]                                                          var x10___;
   [cajole]                                                          var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                                          var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]));
   [cajole]                                                          ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet);
   [cajole]                                                          x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                                                                                var x0___;
   [cajole]                                                                                                                                                                var x1___;
   [cajole]                                                                                                                                                                var x2___;
   [cajole]                                                                                                                                                                var x3___;
   [cajole]                                                                                                                                                                var x4___;
   [cajole]                                                                                                                                                                var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                                                                                if (!n) {
   [cajole]                                                                                                                                                                  ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                                                                                  return undefined;
   [cajole]                                                                                                                                                                }
   [cajole]                                                                                                                                                                var k = 0;
   [cajole]                                                                                                                                                                x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                                                ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                                                                              }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ]);
   [cajole]                                                        })), x0___.showKitten_canSet___? (x0___.showKitten = x1___): ___.setPub(x0___, 'showKitten', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'base'
   [cajole] result: (StringLiteral) 'base'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('base')
   [cajole] result: (SpecialOperation) x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) StringInterpolation
   [cajole] result: (Reference) StringInterpolation

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;'
   [cajole] result: (StringLiteral) '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) imageUrl
   [cajole] result: (Reference) imageUrl

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;'
   [cajole] result: (StringLiteral) '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) katTranzlator
   [cajole] result: (SpecialOperation) ___.primFreeze(katTranzlator)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) snippet
   [cajole] result: (Reference) snippet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) &quot;&quot;
   [cajole] result: (StringLiteral) &quot;&quot;

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) snippet || &quot;&quot;
   [cajole] result: (ControlOperation) snippet || &quot;&quot;

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) katTranzlator(snippet || &quot;&quot;)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '&lt;/table&gt;'
   [cajole] result: (StringLiteral) '&lt;/table&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ]
   [cajole] result: (ArrayConstructor) [ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ])
   [cajole] result: (SpecialOperation) new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ])
   [cajole] result: (SpecialOperation) x0___ = (x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])), x1___ = new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]), x0___.innerHTML_canSet___? (x0___.innerHTML = x1___): ___.setPub(x0___, 'innerHTML', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ])
   [cajole] result: (ExpressionStmt) x0___ = (x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])), x1___ = new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]), x0___.innerHTML_canSet___? (x0___.innerHTML = x1___): ___.setPub(x0___, 'innerHTML', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ])
   [cajole] result: (ParseTreeNodeContainer) x0___ = (x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])), x1___ = new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]), x0___.innerHTML_canSet___? (x0___.innerHTML = x1___): ___.setPub(x0___, 'innerHTML', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function renderKittenTable(imageUrl, snippet) {
   [cajole]   document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ]);
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   searchEngine;
   [cajole]   exports.showKitten = function showKitten(result) {
   [cajole]     var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]     var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]     renderKittenTable('loading.jpg', snippet);
   [cajole]     searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                                var n = imageResults.length;
   [cajole]                                if (!n) {
   [cajole]                                  renderKittenTable('error.jpg', snippet);
   [cajole]                                  return undefined;
   [cajole]                                }
   [cajole]                                var k = 0;
   [cajole]                                console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                                renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                              });
   [cajole]   };
   [cajole]   function renderKittenTable(imageUrl, snippet) {
   [cajole]     document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ]);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   renderKittenTable = ___.simpleFunc(function renderKittenTable(imageUrl, snippet) {
   [cajole]                                        var x0___;
   [cajole]                                        var x1___;
   [cajole]                                        var x2___;
   [cajole]                                        var x3___;
   [cajole]                                        x0___ = (x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])), x1___ = new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]), x0___.innerHTML_canSet___? (x0___.innerHTML = x1___): ___.setPub(x0___, 'innerHTML', x1___);
   [cajole]                                      });
   [cajole]   searchEngine;
   [cajole]   x0___ = exports, x1___ = ___.primFreeze(___.simpleFunc(function showKitten(result) {
   [cajole]                                                            var x0___;
   [cajole]                                                            var x1___;
   [cajole]                                                            var x2___;
   [cajole]                                                            var x3___;
   [cajole]                                                            var x4___;
   [cajole]                                                            var x5___;
   [cajole]                                                            var x6___;
   [cajole]                                                            var x7___;
   [cajole]                                                            var x8___;
   [cajole]                                                            var x9___;
   [cajole]                                                            var x10___;
   [cajole]                                                            var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                                            var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]));
   [cajole]                                                            ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet);
   [cajole]                                                            x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                                                                                  var x0___;
   [cajole]                                                                                                                                                                  var x1___;
   [cajole]                                                                                                                                                                  var x2___;
   [cajole]                                                                                                                                                                  var x3___;
   [cajole]                                                                                                                                                                  var x4___;
   [cajole]                                                                                                                                                                  var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                                                                                  if (!n) {
   [cajole]                                                                                                                                                                    ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                                                                                    return undefined;
   [cajole]                                                                                                                                                                  }
   [cajole]                                                                                                                                                                  var k = 0;
   [cajole]                                                                                                                                                                  x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                                                  ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                                                                                }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ]);
   [cajole]                                                          })), x0___.showKitten_canSet___? (x0___.showKitten = x1___): ___.setPub(x0___, 'showKitten', x1___);
   [cajole]   ;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) htmlEmitter___
   [cajole] result: (Identifier) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) htmlEmitter___
   [cajole] result: (Reference) htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) pc
   [cajole] result: (Identifier) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) pc
   [cajole] result: (Reference) pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '\n\n'
   [cajole] result: (StringLiteral) '\n\n'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n')
   [cajole] result: (SpecialOperation) IMPORTS___.htmlEmitter___.pc('\n\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n\n')
   [cajole] result: (ExpressionStmt) IMPORTS___.htmlEmitter___.pc('\n\n')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: module
   [cajole] input: (Block) {
   [cajole]   IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   {
   [cajole]     function katTranzlator(text) {
   [cajole]       text = text.toUpperCase().replace(/\s+/g, ' ').replace(/^ +| +$/g, '');
   [cajole]       for (var i = 0, n = TRANSFORMATIONS.length; i &lt; n; i += 2) {
   [cajole]         text = text.replace(TRANSFORMATIONS[ i ], TRANSFORMATIONS[ i + 1 ]);
   [cajole]       }
   [cajole]       return text;
   [cajole]     }
   [cajole]     var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ];
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n');
   [cajole]   {
   [cajole]     searchEngine;
   [cajole]     exports.showKitten = function showKitten(result) {
   [cajole]       var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]       var snippet = result.snippetHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '');
   [cajole]       renderKittenTable('loading.jpg', snippet);
   [cajole]       searchEngine.imageSearch('(+kitten OR +cat) ' + title, function (imageResults) {
   [cajole]                                  var n = imageResults.length;
   [cajole]                                  if (!n) {
   [cajole]                                    renderKittenTable('error.jpg', snippet);
   [cajole]                                    return undefined;
   [cajole]                                  }
   [cajole]                                  var k = 0;
   [cajole]                                  console.log('chose ' + k + ' from ' + imageResults.length);
   [cajole]                                  renderKittenTable(imageResults[ k ].url, snippet);
   [cajole]                                });
   [cajole]     };
   [cajole]     function renderKittenTable(imageUrl, snippet) {
   [cajole]       document.getElementById('base').innerHTML = new StringInterpolation([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', katTranzlator(snippet || &quot;&quot;), '&lt;/table&gt;' ]);
   [cajole]     }
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n\n');
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var TRANSFORMATIONS = ___.readImports(IMPORTS___, 'TRANSFORMATIONS');
   [cajole]   var StringInterpolation = ___.readImports(IMPORTS___, 'StringInterpolation');
   [cajole]   var document = ___.readImports(IMPORTS___, 'document');
   [cajole]   var exports = ___.readImports(IMPORTS___, 'exports');
   [cajole]   var searchEngine = ___.readImports(IMPORTS___, 'searchEngine');
   [cajole]   var katTranzlator;
   [cajole]   var x0___;
   [cajole]   var x1___;
   [cajole]   var console = ___.readImports(IMPORTS___, 'console');
   [cajole]   var renderKittenTable;
   [cajole]   IMPORTS___.emitCss___([ '.', ' table {\n  border: 1px dotted #888\n}\n.', ' .snippet {\n  width: 30em\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   {
   [cajole]     katTranzlator = ___.simpleFunc(function katTranzlator(text) {
   [cajole]                                      var x0___;
   [cajole]                                      var x1___;
   [cajole]                                      var x2___;
   [cajole]                                      var x3___;
   [cajole]                                      var x4___;
   [cajole]                                      var x5___;
   [cajole]                                      var x6___;
   [cajole]                                      var x7___;
   [cajole]                                      var x8___;
   [cajole]                                      var x9___;
   [cajole]                                      var x10___;
   [cajole]                                      text = (x2___ = (x5___ = (x6___ = text, undefined, x6___.toUpperCase_canCall___? x6___.toUpperCase(): ___.callPub(x6___, 'toUpperCase', [ ])), (x3___ = /\s+/g, x4___ = ' '), x5___.replace_canCall___? x5___.replace(x3___, x4___): ___.callPub(x5___, 'replace', [ x3___, x4___ ])), (x0___ = /^ +| +$/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                      for (var i = 0, n = (x7___ = TRANSFORMATIONS, x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')); i &lt; n; i = i + 2) {
   [cajole]                                        text = (x10___ = text, (x8___ = ___.readPub(TRANSFORMATIONS, i), x9___ = ___.readPub(TRANSFORMATIONS, i + 1)), x10___.replace_canCall___? x10___.replace(x8___, x9___): ___.callPub(x10___, 'replace', [ x8___, x9___ ]));
   [cajole]                                      }
   [cajole]                                      return text;
   [cajole]                                    });
   [cajole]     ;
   [cajole]     var TRANSFORMATIONS = [ /\bCAN (I|YOU|HE|SHE|IT|WE|THEY)\b/g, '$1 CAN', /\bTO\b/g, '2', /\bFOR\b/g, '4', /\bYOUR\b/g, 'UR', /\bYOU\b/g, 'U', /\bTHIS\b/g, 'DIS', /\bWITH\b/g, 'WIF', /\bHAVE\b/g, 'HAZ', /\bARE\b/g, 'IS', /\bAM\b/g, 'IS', /\bPLEASE\b/g, 'PLZ', /\bTHANKS\b/g, 'THX', /\bOH MY (GOD|GOSH)\b/g, 'OMG', /\bATE\b/g, 'EATED', /\bSAID\b/g, 'SED', /\bSERIOUSLY\b/g, 'SRSLY', /\bKNOW\b/g, 'KNOE', /\bLOVE\b/g, 'LUV', /\bHELP\b/g, 'HALP', /\bMAYBE\b/g, 'MEBBE', /\bWAS\b/g, 'WUZ', /\bOF\b/g, 'OV', /\bOH\b/g, 'O', /\bREALLY\b/g, 'RLY', /\bGREAT\b/g, 'GRAET', /\bMY\b/g, 'MAH', /\b(HELLO|HI)\b/g, 'HAI', /THI/g, 'TI', /\bKN/g, 'N', /([^ ])SE(\b|[^AEIOU])/g, '$1ZE$2', /IES\b/g, 'EHS', /TION(S?)\b/g, 'SHUN', /LE\b/g, 'L', /IENDS\b/g, 'ENZ', /([^R])ING\b/g, '$1IN', /I([KM])E\b/g, 'IE$1', /ER( [^AEIOU]|$)/g, 'AH$1', /ORE\b/g, 'OAR', /IE\b/g, 'EE', /AIR\b/g, 'EH', /AIN\b/g, 'ANE', /IEF\b/g, 'EEF', /TY\b/g, 'TI', /NESS\b/g, 'NES', /([^ AEIOU])E([RD])\b/g, '$1$2', /IC\b/g, 'IK', /VE\b/g, 'V', /FORE\b/g, 'FOA', /(O[^ AEIOU])E\b/g, '$1', /\bPH([AEIOU])/g, 'F$1', /([^AEIOU ])IR/g, '$1UR', /([^AEIOU ])S\b/g, '$1Z', /([^ AEIOU]) OV\b/g, '$1A', /N\'T/g, 'NT', /OAR/g, 'OR', /IGHT/g, 'ITE', /([AEIOU])S([BDFJV])/g, '$1Z$2', /CEIV/g, 'CEEV', /AUGHT/g, 'AWT', /OO/g, 'U', /U([^ AEIOU])E/g, 'OO$1', /U([^ AEIOU]I)/g, 'OO$1', /CIOUS/g, 'SHUS', /OUCH/g, 'OWCH', /ISON/g, 'ISUN', /OIS/g, 'OYZ', /\bSEAR/g, 'SER', /\bSEA/g, 'SEE', /\bGOD/g, 'CEILING CAT', /\bHEAVEN/g, 'CEILING', /([AEIOU])[SZ]E/g, '$1Z', /\bI AM\b/g, 'I', /\bIZ A\b/g, 'IS', /\bHAZ NO\b/g, 'NO HAZ', /\bDO YOU\b/g, 'YOU', /\bA ([A-Z]+)\b/g, '$1', /\bI IS\b/g, 'IM' ];
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n');
   [cajole]   {
   [cajole]     renderKittenTable = ___.simpleFunc(function renderKittenTable(imageUrl, snippet) {
   [cajole]                                          var x0___;
   [cajole]                                          var x1___;
   [cajole]                                          var x2___;
   [cajole]                                          var x3___;
   [cajole]                                          x0___ = (x3___ = document, x2___ = 'base', x3___.getElementById_canCall___? x3___.getElementById(x2___): ___.callPub(x3___, 'getElementById', [ x2___ ])), x1___ = new (___.asCtor(StringInterpolation))([ '&lt;table&gt;&lt;tr&gt;&lt;td align=center&gt;&lt;img src=\&quot;', imageUrl, '\&quot;&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=snippet align=center&gt;', ___.asSimpleFunc(___.primFreeze(katTranzlator))(snippet || &quot;&quot;), '&lt;/table&gt;' ]), x0___.innerHTML_canSet___? (x0___.innerHTML = x1___): ___.setPub(x0___, 'innerHTML', x1___);
   [cajole]                                        });
   [cajole]     searchEngine;
   [cajole]     x0___ = exports, x1___ = ___.primFreeze(___.simpleFunc(function showKitten(result) {
   [cajole]                                                              var x0___;
   [cajole]                                                              var x1___;
   [cajole]                                                              var x2___;
   [cajole]                                                              var x3___;
   [cajole]                                                              var x4___;
   [cajole]                                                              var x5___;
   [cajole]                                                              var x6___;
   [cajole]                                                              var x7___;
   [cajole]                                                              var x8___;
   [cajole]                                                              var x9___;
   [cajole]                                                              var x10___;
   [cajole]                                                              var title = (x2___ = (x3___ = result, x3___.titleHtml_canRead___? x3___.titleHtml: ___.readPub(x3___, 'titleHtml')), (x0___ = /&lt;\/?\w[^&gt;]*&gt;/g, x1___ = ''), x2___.replace_canCall___? x2___.replace(x0___, x1___): ___.callPub(x2___, 'replace', [ x0___, x1___ ]));
   [cajole]                                                              var snippet = (x6___ = (x7___ = result, x7___.snippetHtml_canRead___? x7___.snippetHtml: ___.readPub(x7___, 'snippetHtml')), (x4___ = /&lt;\/?\w[^&gt;]*&gt;/g, x5___ = ''), x6___.replace_canCall___? x6___.replace(x4___, x5___): ___.callPub(x6___, 'replace', [ x4___, x5___ ]));
   [cajole]                                                              ___.asSimpleFunc(___.primFreeze(renderKittenTable))('loading.jpg', snippet);
   [cajole]                                                              x10___ = searchEngine, (x8___ = '(+kitten OR +cat) ' + title, x9___ = ___.primFreeze(___.simpleFunc(function (imageResults) {
   [cajole]                                                                                                                                                                    var x0___;
   [cajole]                                                                                                                                                                    var x1___;
   [cajole]                                                                                                                                                                    var x2___;
   [cajole]                                                                                                                                                                    var x3___;
   [cajole]                                                                                                                                                                    var x4___;
   [cajole]                                                                                                                                                                    var n = (x0___ = imageResults, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                                                                                                                                    if (!n) {
   [cajole]                                                                                                                                                                      ___.asSimpleFunc(___.primFreeze(renderKittenTable))('error.jpg', snippet);
   [cajole]                                                                                                                                                                      return undefined;
   [cajole]                                                                                                                                                                    }
   [cajole]                                                                                                                                                                    var k = 0;
   [cajole]                                                                                                                                                                    x3___ = console, x1___ = 'chose ' + k + ' from ' + (x2___ = imageResults, x2___.length_canRead___? x2___.length: ___.readPub(x2___, 'length')), x3___.log_canCall___? x3___.log(x1___): ___.callPub(x3___, 'log', [ x1___ ]);
   [cajole]                                                                                                                                                                    ___.asSimpleFunc(___.primFreeze(renderKittenTable))((x4___ = ___.readPub(imageResults, k), x4___.url_canRead___? x4___.url: ___.readPub(x4___, 'url')), snippet);
   [cajole]                                                                                                                                                                  }))), x10___.imageSearch_canCall___? x10___.imageSearch(x8___, x9___): ___.callPub(x10___, 'imageSearch', [ x8___, x9___ ]);
   [cajole]                                                            })), x0___.showKitten_canSet___? (x0___.showKitten = x1___): ___.setPub(x0___, 'showKitten', x1___);
   [cajole]     ;
   [cajole]   }
   [cajole]   IMPORTS___.htmlEmitter___.pc('\n\n');
   [cajole] }

   [cajole] LINT : kittens.js:31+60: Semicolon inserted
   [cajole] kittens.js:31:   var title = result.titleHtml.replace(/&lt;\/?\w[^&gt;]*&gt;/g, '')
   [cajole]                                                                           ^
     [copy] Copying 8 files to /opt/svn/google-caja/src/ant-www/lolcat-search

springgraph:
   [cajole] mkdir /opt/svn/google-caja/src/ant-www/contact-spring-graph/plugin-files
   [cajole] compiling 5 files to /opt/svn/google-caja/src/ant-www/contact-spring-graph/plugin-files/plugin.js
   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var out___ = [ ]
   [cajole] result: (Declaration) var out___ = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c1___
   [cajole] result: (Identifier) c1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c1___
   [cajole] result: (Reference) c1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) call
   [cajole] result: (Identifier) call

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) call
   [cajole] result: (Reference) call

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c1___.call
   [cajole] result: (SpecialOperation) c1___.call

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) nodeInfo
   [cajole] result: (Identifier) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) nodeInfo
   [cajole] result: (Reference) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c1___.call(IMPORTS___, out___, nodeInfo)
   [cajole] result: (SpecialOperation) c1___.call(IMPORTS___, out___, nodeInfo)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) c1___.call(IMPORTS___, out___, nodeInfo)
   [cajole] result: (ExpressionStmt) c1___.call(IMPORTS___, out___, nodeInfo)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) blessHtml___
   [cajole] result: (Identifier) blessHtml___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) blessHtml___
   [cajole] result: (Reference) blessHtml___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.blessHtml___
   [cajole] result: (SpecialOperation) IMPORTS___.blessHtml___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) join
   [cajole] result: (Identifier) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) join
   [cajole] result: (Reference) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.join
   [cajole] result: (SpecialOperation) out___.join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.join('')
   [cajole] result: (SpecialOperation) out___.join('')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.blessHtml___(out___.join(''))
   [cajole] result: (SpecialOperation) IMPORTS___.blessHtml___(out___.join(''))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ReturnStmt) return IMPORTS___.blessHtml___(out___.join(''))
   [cajole] result: (ReturnStmt) return IMPORTS___.blessHtml___(out___.join(''))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var out___ = [ ] c1___.call(IMPORTS___, out___, nodeInfo) return IMPORTS___.blessHtml___(out___.join(''))
   [cajole] result: (ParseTreeNodeContainer) var out___ = [ ] c1___.call(IMPORTS___, out___, nodeInfo) return IMPORTS___.blessHtml___(out___.join(''))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function graph(nodeInfo) {
   [cajole]   var out___ = [ ];
   [cajole]   c1___.call(IMPORTS___, out___, nodeInfo);
   [cajole]   return IMPORTS___.blessHtml___(out___.join(''));
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c1___
   [cajole] result: (Identifier) c1___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) push
   [cajole] result: (Identifier) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) push
   [cajole] result: (Reference) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push
   [cajole] result: (SpecialOperation) out___.push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '&lt;div id=\&quot;graph-'
   [cajole] result: (StringLiteral) '&lt;div id=\&quot;graph-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getIdClass___
   [cajole] result: (Identifier) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getIdClass___
   [cajole] result: (Reference) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___()
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-'
   [cajole] result: (StringLiteral) '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getIdClass___
   [cajole] result: (Identifier) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getIdClass___
   [cajole] result: (Reference) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___()
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot; title=\&quot;'
   [cajole] result: (StringLiteral) '\&quot; title=\&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeInfo
   [cajole] result: (Reference) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(nodeInfo, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ].description
   [cajole] result: (SpecialOperation) x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot; style=\&quot;width: '
   [cajole] result: (StringLiteral) '\&quot; style=\&quot;width: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeInfo
   [cajole] result: (Reference) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(nodeInfo, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ].name
   [cajole] result: (SpecialOperation) x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ].name.length
   [cajole] result: (SpecialOperation) x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;'
   [cajole] result: (StringLiteral) 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) html___
   [cajole] result: (Identifier) html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) html___
   [cajole] result: (Reference) html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.html___
   [cajole] result: (SpecialOperation) IMPORTS___.html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeInfo
   [cajole] result: (Reference) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(nodeInfo, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeInfo[ 0 ].name
   [cajole] result: (SpecialOperation) x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.html___(nodeInfo[ 0 ].name)
   [cajole] result: (SpecialOperation) IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '&lt;/div&gt;\n      \n    &lt;/div&gt;'
   [cajole] result: (StringLiteral) '&lt;/div&gt;\n      \n    &lt;/div&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;')
   [cajole] result: (SpecialOperation) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;')
   [cajole] result: (ExpressionStmt) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c2___
   [cajole] result: (Identifier) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeInfo
   [cajole] result: (Reference) nodeInfo

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) nodeInfo.slice(1)
   [cajole] result: (SpecialOperation) x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var c2___ = nodeInfo.slice(1)
   [cajole] result: (Declaration) var c2___ = (x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c2___
   [cajole] result: (Identifier) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c2___
   [cajole] result: (Reference) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c3___
   [cajole] result: (Identifier) c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var c3___
   [cajole] result: (Declaration) var c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c2___
   [cajole] result: (Identifier) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c2___
   [cajole] result: (Reference) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) ___
   [cajole] result: (Identifier) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) ___
   [cajole] result: (Reference) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) canEnumPub
   [cajole] result: (Identifier) canEnumPub

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) canEnumPub
   [cajole] result: (Reference) canEnumPub

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.canEnumPub
   [cajole] result: (SpecialOperation) ___.canEnumPub

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c2___
   [cajole] result: (Identifier) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c2___
   [cajole] result: (Reference) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c3___
   [cajole] result: (Identifier) c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c3___
   [cajole] result: (Reference) c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.canEnumPub(c2___, c3___)
   [cajole] result: (SpecialOperation) ___.canEnumPub(c2___, c3___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Identifier) info
   [cajole] result: (Identifier) info

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c2___
   [cajole] result: (Identifier) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c2___
   [cajole] result: (Reference) c2___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c3___
   [cajole] result: (Identifier) c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c3___
   [cajole] result: (Reference) c3___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c2___[ c3___ ]
   [cajole] result: (SpecialOperation) c2___[ c3___ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var info = c2___[ c3___ ]
   [cajole] result: (Declaration) var info = c2___[ c3___ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) push
   [cajole] result: (Identifier) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) push
   [cajole] result: (Reference) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push
   [cajole] result: (SpecialOperation) out___.push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '&lt;div class=\&quot;node\&quot; title=\&quot;'
   [cajole] result: (StringLiteral) '&lt;div class=\&quot;node\&quot; title=\&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) info
   [cajole] result: (Reference) info

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) info.description
   [cajole] result: (SpecialOperation) x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot; style=\&quot;width: '
   [cajole] result: (StringLiteral) '\&quot; style=\&quot;width: '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) info
   [cajole] result: (Reference) info

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) info.name
   [cajole] result: (SpecialOperation) x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) info.name.length
   [cajole] result: (SpecialOperation) x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(info.name.length)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) 'em\&quot; onclick=\&quot;'
   [cajole] result: (StringLiteral) 'em\&quot; onclick=\&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'return plugin_dispatchEvent___(this, event || window.event, '
   [cajole] result: (StringLiteral) 'return plugin_dispatchEvent___(this, event || window.event, '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) ___
   [cajole] result: (Identifier) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) ___
   [cajole] result: (Reference) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getId
   [cajole] result: (Identifier) getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getId
   [cajole] result: (Reference) getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.getId
   [cajole] result: (SpecialOperation) ___.getId

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.getId(IMPORTS___)
   [cajole] result: (SpecialOperation) ___.getId(IMPORTS___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___)
   [cajole] result: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ', \'c4___\')'
   [cajole] result: (StringLiteral) ', \'c4___\')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')'
   [cajole] result: (SimpleOperation) 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot; id=\&quot;'
   [cajole] result: (StringLiteral) '\&quot; id=\&quot;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;')
   [cajole] result: (SpecialOperation) out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;')
   [cajole] result: (ExpressionStmt) out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c5___
   [cajole] result: (Identifier) c5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var c5___ = [ ]
   [cajole] result: (Declaration) var c5___ = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c5___
   [cajole] result: (Identifier) c5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c5___
   [cajole] result: (Reference) c5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) push
   [cajole] result: (Identifier) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) push
   [cajole] result: (Reference) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c5___.push
   [cajole] result: (SpecialOperation) c5___.push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /@/g
   [cajole] result: (RegexpLiteral) /@/g

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ':40:'
   [cajole] result: (StringLiteral) ':40:'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) info
   [cajole] result: (Reference) info

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) info.description
   [cajole] result: (SpecialOperation) x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) info.description.replace(/@/g, ':40:')
   [cajole] result: (SpecialOperation) x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c5___.push(info.description.replace(/@/g, ':40:'))
   [cajole] result: (SpecialOperation) c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) c5___.push(info.description.replace(/@/g, ':40:'))
   [cajole] result: (ExpressionStmt) c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) push
   [cajole] result: (Identifier) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) push
   [cajole] result: (Reference) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push
   [cajole] result: (SpecialOperation) out___.push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) htmlAttr___
   [cajole] result: (Identifier) htmlAttr___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) htmlAttr___
   [cajole] result: (Reference) htmlAttr___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlAttr___
   [cajole] result: (SpecialOperation) IMPORTS___.htmlAttr___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) suffix___
   [cajole] result: (Identifier) suffix___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) suffix___
   [cajole] result: (Reference) suffix___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.suffix___
   [cajole] result: (SpecialOperation) IMPORTS___.suffix___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c5___
   [cajole] result: (Identifier) c5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c5___
   [cajole] result: (Reference) c5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) join
   [cajole] result: (Identifier) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) join
   [cajole] result: (Reference) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c5___.join
   [cajole] result: (SpecialOperation) c5___.join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) c5___.join('')
   [cajole] result: (SpecialOperation) c5___.join('')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.suffix___(c5___.join(''))
   [cajole] result: (SpecialOperation) IMPORTS___.suffix___(c5___.join(''))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join('')))
   [cajole] result: (SpecialOperation) IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join('')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;'
   [cajole] result: (StringLiteral) '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) html___
   [cajole] result: (Identifier) html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) html___
   [cajole] result: (Reference) html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.html___
   [cajole] result: (SpecialOperation) IMPORTS___.html___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) info
   [cajole] result: (Reference) info

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) info.name
   [cajole] result: (SpecialOperation) x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.html___(info.name)
   [cajole] result: (SpecialOperation) IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '&lt;/div&gt;\n      &lt;/div&gt;'
   [cajole] result: (StringLiteral) '&lt;/div&gt;\n      &lt;/div&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;')
   [cajole] result: (SpecialOperation) out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;')
   [cajole] result: (ExpressionStmt) out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Block) {
   [cajole]   var info = c2___[ c3___ ];
   [cajole]   out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]   var c5___ = [ ];
   [cajole]   c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]   out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var info = c2___[ c3___ ];
   [cajole]   out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]   var c5___ = [ ];
   [cajole]   c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]   out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Conditional) if (___.canEnumPub(c2___, c3___)) {
   [cajole]   var info = c2___[ c3___ ];
   [cajole]   out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]   var c5___ = [ ];
   [cajole]   c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]   out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole] }
   [cajole] result: (Conditional) if (___.canEnumPub(c2___, c3___)) {
   [cajole]   var info = c2___[ c3___ ];
   [cajole]   out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]   var c5___ = [ ];
   [cajole]   c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]   out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Block) {
   [cajole]   if (___.canEnumPub(c2___, c3___)) {
   [cajole]     var info = c2___[ c3___ ];
   [cajole]     out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]     var c5___ = [ ];
   [cajole]     c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]     out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   if (___.canEnumPub(c2___, c3___)) {
   [cajole]     var info = c2___[ c3___ ];
   [cajole]     out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]     var c5___ = [ ];
   [cajole]     c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]     out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ForEachLoop) for (var c3___ in c2___) {
   [cajole]   if (___.canEnumPub(c2___, c3___)) {
   [cajole]     var info = c2___[ c3___ ];
   [cajole]     out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]     var c5___ = [ ];
   [cajole]     c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]     out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]   }
   [cajole] }
   [cajole] result: (ForEachLoop) for (var c3___ in c2___) {
   [cajole]   if (___.canEnumPub(c2___, c3___)) {
   [cajole]     var info = c2___[ c3___ ];
   [cajole]     out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]     var c5___ = [ ];
   [cajole]     c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]     out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Block) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Conditional) if (c2___) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] result: (Conditional) if (c2___) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) out___
   [cajole] result: (Identifier) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) out___
   [cajole] result: (Reference) out___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) push
   [cajole] result: (Identifier) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) push
   [cajole] result: (Reference) push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push
   [cajole] result: (SpecialOperation) out___.push

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (StringLiteral) '&lt;/div&gt;'
   [cajole] result: (StringLiteral) '&lt;/div&gt;'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) out___.push('&lt;/div&gt;')
   [cajole] result: (SpecialOperation) out___.push('&lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ExpressionStmt) out___.push('&lt;/div&gt;')
   [cajole] result: (ExpressionStmt) out___.push('&lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;') var c2___ = nodeInfo.slice(1) if (c2___) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] out___.push('&lt;/div&gt;')
   [cajole] result: (ParseTreeNodeContainer) out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;') var c2___ = (x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ])) if (c2___) {
   [cajole]   for (var c3___ in c2___) {
   [cajole]     if (___.canEnumPub(c2___, c3___)) {
   [cajole]       var info = c2___[ c3___ ];
   [cajole]       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]       var c5___ = [ ];
   [cajole]       c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] out___.push('&lt;/div&gt;')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (out___, nodeInfo) {
   [cajole]   out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]   var c2___ = nodeInfo.slice(1);
   [cajole]   if (c2___) {
   [cajole]     for (var c3___ in c2___) {
   [cajole]       if (___.canEnumPub(c2___, c3___)) {
   [cajole]         var info = c2___[ c3___ ];
   [cajole]         out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]         var c5___ = [ ];
   [cajole]         c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]         out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole]   out___.push('&lt;/div&gt;');
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (out___, nodeInfo) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var x13___;
   [cajole]                                 out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]                                 var c2___ = (x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ]));
   [cajole]                                 if (c2___) {
   [cajole]                                   for (var c3___ in c2___) {
   [cajole]                                     if (___.canEnumPub(c2___, c3___)) {
   [cajole]                                       var info = c2___[ c3___ ];
   [cajole]                                       out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]                                       var c5___ = [ ];
   [cajole]                                       c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]                                       out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]                                     }
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 out___.push('&lt;/div&gt;');
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Declaration) var c1___ = function (out___, nodeInfo) {
   [cajole]   out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]   var c2___ = nodeInfo.slice(1);
   [cajole]   if (c2___) {
   [cajole]     for (var c3___ in c2___) {
   [cajole]       if (___.canEnumPub(c2___, c3___)) {
   [cajole]         var info = c2___[ c3___ ];
   [cajole]         out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]         var c5___ = [ ];
   [cajole]         c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]         out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole]   out___.push('&lt;/div&gt;');
   [cajole] }
   [cajole] result: (Declaration) var c1___ = ___.primFreeze(___.simpleFunc(function (out___, nodeInfo) {
   [cajole]                                             var x0___;
   [cajole]                                             var x1___;
   [cajole]                                             var x2___;
   [cajole]                                             var x3___;
   [cajole]                                             var x4___;
   [cajole]                                             var x5___;
   [cajole]                                             var x6___;
   [cajole]                                             var x7___;
   [cajole]                                             var x8___;
   [cajole]                                             var x9___;
   [cajole]                                             var x10___;
   [cajole]                                             var x11___;
   [cajole]                                             var x12___;
   [cajole]                                             var x13___;
   [cajole]                                             out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]                                             var c2___ = (x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ]));
   [cajole]                                             if (c2___) {
   [cajole]                                               for (var c3___ in c2___) {
   [cajole]                                                 if (___.canEnumPub(c2___, c3___)) {
   [cajole]                                                   var info = c2___[ c3___ ];
   [cajole]                                                   out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]                                                   var c5___ = [ ];
   [cajole]                                                   c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]                                                   out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]                                                 }
   [cajole]                                               }
   [cajole]                                             }
   [cajole]                                             out___.push('&lt;/div&gt;');
   [cajole]                                           }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) c4___
   [cajole] result: (Identifier) c4___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) c4___
   [cajole] result: (Reference) c4___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.c4___
   [cajole] result: (SpecialOperation) IMPORTS___.c4___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) ___
   [cajole] result: (Identifier) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) ___
   [cajole] result: (Reference) ___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) simpleFunc
   [cajole] result: (Identifier) simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) simpleFunc
   [cajole] result: (Reference) simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.simpleFunc
   [cajole] result: (SpecialOperation) ___.simpleFunc

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) 
   [cajole] result: (Identifier) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) thisNode___
   [cajole] result: (Identifier) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FormalParam) thisNode___
   [cajole] result: (FormalParam) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) event
   [cajole] result: (Identifier) event

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FormalParam) event
   [cajole] result: (FormalParam) event

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) selectNode
   [cajole] result: (SpecialOperation) ___.primFreeze(selectNode)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) thisNode___
   [cajole] result: (Identifier) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) thisNode___
   [cajole] result: (Reference) thisNode___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) selectNode(thisNode___)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) selectNode(thisNode___)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Block) {
   [cajole]   selectNode(thisNode___);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (FunctionConstructor) function (thisNode___, event) {
   [cajole]   selectNode(thisNode___);
   [cajole] }
   [cajole] result: (FunctionConstructor) function (thisNode___, event) {
   [cajole]   ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) ___.simpleFunc(function (thisNode___, event) {
   [cajole]                  selectNode(thisNode___);
   [cajole]                })
   [cajole] result: (SpecialOperation) ___.simpleFunc(function (thisNode___, event) {
   [cajole]                  ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole]                })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (AssignOperation) IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                     selectNode(thisNode___);
   [cajole]                                   })
   [cajole] result: (AssignOperation) IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole]                                   })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                     selectNode(thisNode___);
   [cajole]                                   })
   [cajole] result: (ExpressionStmt) IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                     ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole]                                   })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) emitCss___
   [cajole] result: (Identifier) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) emitCss___
   [cajole] result: (Reference) emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) '.'
   [cajole] result: (StringLiteral) '.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' #graph-'
   [cajole] result: (StringLiteral) ' #graph-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.'
   [cajole] result: (StringLiteral) ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' #graph-'
   [cajole] result: (StringLiteral) ' #graph-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.'
   [cajole] result: (StringLiteral) ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' #anchor-'
   [cajole] result: (StringLiteral) ' #anchor-'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.'
   [cajole] result: (StringLiteral) ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.'
   [cajole] result: (StringLiteral) ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' .selected {\n  background: #e0e0ff !important\n}'
   [cajole] result: (StringLiteral) ' .selected {\n  background: #e0e0ff !important\n}'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (ArrayConstructor) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ]
   [cajole] result: (ArrayConstructor) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) join
   [cajole] result: (Identifier) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) join
   [cajole] result: (Reference) join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join
   [cajole] result: (SpecialOperation) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) getIdClass___
   [cajole] result: (Identifier) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) getIdClass___
   [cajole] result: (Reference) getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.getIdClass___()
   [cajole] result: (SpecialOperation) IMPORTS___.getIdClass___()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___())
   [cajole] result: (SpecialOperation) [ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___())

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (SpecialOperation) IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()))
   [cajole] result: (ExpressionStmt) IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) blessCss___
   [cajole] result: (Identifier) blessCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) blessCss___
   [cajole] result: (Reference) blessCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.blessCss___
   [cajole] result: (SpecialOperation) IMPORTS___.blessCss___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'left'
   [cajole] result: (StringLiteral) 'left'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) left
   [cajole] result: (Reference) left

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) left | 0
   [cajole] result: (SimpleOperation) left | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(left | 0)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___(left | 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'px'
   [cajole] result: (StringLiteral) 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) IMPORTS___.cssNumber___(left | 0) + 'px'
   [cajole] result: (SimpleOperation) IMPORTS___.cssNumber___(left | 0) + 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'top'
   [cajole] result: (StringLiteral) 'top'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) top
   [cajole] result: (Reference) top

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) top | 0
   [cajole] result: (SimpleOperation) top | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(top | 0)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___(top | 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'px'
   [cajole] result: (StringLiteral) 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) IMPORTS___.cssNumber___(top | 0) + 'px'
   [cajole] result: (SimpleOperation) IMPORTS___.cssNumber___(top | 0) + 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'width'
   [cajole] result: (StringLiteral) 'width'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) width
   [cajole] result: (Reference) width

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) width | 0
   [cajole] result: (SimpleOperation) width | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(width | 0)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___(width | 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'px'
   [cajole] result: (StringLiteral) 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) IMPORTS___.cssNumber___(width | 0) + 'px'
   [cajole] result: (SimpleOperation) IMPORTS___.cssNumber___(width | 0) + 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'height'
   [cajole] result: (StringLiteral) 'height'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) IMPORTS___
   [cajole] result: (Identifier) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) IMPORTS___
   [cajole] result: (Reference) IMPORTS___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) cssNumber___
   [cajole] result: (Identifier) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) cssNumber___
   [cajole] result: (Reference) cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) height
   [cajole] result: (Reference) height

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) height | 0
   [cajole] result: (SimpleOperation) height | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.cssNumber___(height | 0)
   [cajole] result: (SpecialOperation) IMPORTS___.cssNumber___(height | 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'px'
   [cajole] result: (StringLiteral) 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) IMPORTS___.cssNumber___(height | 0) + 'px'
   [cajole] result: (SimpleOperation) IMPORTS___.cssNumber___(height | 0) + 'px'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (SpecialOperation) IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')
   [cajole] result: (SpecialOperation) IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')
   [cajole] result: (ReturnStmt) return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')
   [cajole] result: (ParseTreeNodeContainer) return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function position(left, top, width, height) {
   [cajole]   return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px');
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInternal
   [cajole] input: (AssignOperation) this.nodes_ = [ ]
   [cajole] result: (SpecialOperation) x0___ = [ ], t___.nodes__canSet___? (t___.nodes_ = x0___): ___.setProp(t___, 'nodes_', x0___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) this.nodes_ = [ ]
   [cajole] result: (ExpressionStmt) x0___ = [ ], t___.nodes__canSet___? (t___.nodes_ = x0___): ___.setProp(t___, 'nodes_', x0___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes.length
   [cajole] result: (SpecialOperation) x1___ = nodes, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nodes.length
   [cajole] result: (Declaration) var i = (x1___ = nodes, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.nodes_
   [cajole] result: (ControlOperation) t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) nodes[ i ] 0 0
   [cajole] result: (ParseTreeNodeContainer) ___.readPub(nodes, i) 0 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapNonEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole]   'domNode': nodes[ i ],
   [cajole]   'dx': 0,
   [cajole]   'dy': 0
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole]   'domNode': ___.readPub(nodes, i),
   [cajole]   'dx': 0,
   [cajole]   'dy': 0
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) this.nodes_[ i ] = {
   [cajole]   'domNode': nodes[ i ],
   [cajole]   'dx': 0,
   [cajole]   'dy': 0
   [cajole] }
   [cajole] result: (SpecialOperation) ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]              'domNode': ___.readPub(nodes, i),
   [cajole]              'dx': 0,
   [cajole]              'dy': 0
   [cajole]            })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) this.nodes_[ i ] = {
   [cajole]   'domNode': nodes[ i ],
   [cajole]   'dx': 0,
   [cajole]   'dy': 0
   [cajole] }
   [cajole] result: (ExpressionStmt) ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]              'domNode': ___.readPub(nodes, i),
   [cajole]              'dx': 0,
   [cajole]              'dy': 0
   [cajole]            })

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   this.nodes_[ i ] = {
   [cajole]     'domNode': nodes[ i ],
   [cajole]     'dx': 0,
   [cajole]     'dy': 0
   [cajole]   };
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]                'domNode': ___.readPub(nodes, i),
   [cajole]                'dx': 0,
   [cajole]                'dy': 0
   [cajole]              });
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nodes.length; --i &gt;= 0;) {
   [cajole]   this.nodes_[ i ] = {
   [cajole]     'domNode': nodes[ i ],
   [cajole]     'dx': 0,
   [cajole]     'dy': 0
   [cajole]   };
   [cajole] }
   [cajole] result: (ForLoop) for (var i = (x1___ = nodes, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]   ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]                'domNode': ___.readPub(nodes, i),
   [cajole]                'dx': 0,
   [cajole]                'dy': 0
   [cajole]              });
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInternal
   [cajole] input: (AssignOperation) this.edges_ = [ ]
   [cajole] result: (SpecialOperation) x2___ = [ ], t___.edges__canSet___? (t___.edges_ = x2___): ___.setProp(t___, 'edges_', x2___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) this.edges_ = [ ]
   [cajole] result: (ExpressionStmt) x2___ = [ ], t___.edges__canSet___? (t___.edges_ = x2___): ___.setProp(t___, 'edges_', x2___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes.length
   [cajole] result: (SpecialOperation) x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodes.length + 1
   [cajole] result: (SimpleOperation) (x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes.length
   [cajole] result: (SpecialOperation) x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodes.length - 2
   [cajole] result: (SimpleOperation) (x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (nodes.length + 1) * (nodes.length - 2)
   [cajole] result: (SimpleOperation) ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (nodes.length + 1) * (nodes.length - 2) / 2
   [cajole] result: (SimpleOperation) ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (nodes.length + 1) * (nodes.length - 2) / 2 + 1
   [cajole] result: (SimpleOperation) ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2 + 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = (nodes.length + 1) * (nodes.length - 2) / 2 + 1
   [cajole] result: (Declaration) var i = ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2 + 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.edges_
   [cajole] result: (ControlOperation) t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) this.edges_[ i ] = 0
   [cajole] result: (SpecialOperation) ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) this.edges_[ i ] = 0
   [cajole] result: (ExpressionStmt) ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   this.edges_[ i ] = 0;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = (nodes.length + 1) * (nodes.length - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]   this.edges_[ i ] = 0;
   [cajole] }
   [cajole] result: (ForLoop) for (var i = ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) for (var i = nodes.length; --i &gt;= 0;) {
   [cajole]   this.nodes_[ i ] = {
   [cajole]     'domNode': nodes[ i ],
   [cajole]     'dx': 0,
   [cajole]     'dy': 0
   [cajole]   };
   [cajole] }
   [cajole] this.edges_ = [ ] for (var i = (nodes.length + 1) * (nodes.length - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]   this.edges_[ i ] = 0;
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) for (var i = (x1___ = nodes, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]   ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]                'domNode': ___.readPub(nodes, i),
   [cajole]                'dx': 0,
   [cajole]                'dy': 0
   [cajole]              });
   [cajole] }
   [cajole] x2___ = [ ], t___.edges__canSet___? (t___.edges_ = x2___): ___.setProp(t___, 'edges_', x2___) for (var i = ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcCtor
   [cajole] input: (FunctionDeclaration) function Graph(nodes) {
   [cajole]   this.nodes_ = [ ];
   [cajole]   for (var i = nodes.length; --i &gt;= 0;) {
   [cajole]     this.nodes_[ i ] = {
   [cajole]       'domNode': nodes[ i ],
   [cajole]       'dx': 0,
   [cajole]       'dy': 0
   [cajole]     };
   [cajole]   }
   [cajole]   this.edges_ = [ ];
   [cajole]   for (var i = (nodes.length + 1) * (nodes.length - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]     this.edges_[ i ] = 0;
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) setWeight
   [cajole] result: (Reference) setWeight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) Graph
   [cajole] result: (SpecialOperation) ___.primFreeze(Graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i !== j
   [cajole] result: (SimpleOperation) i !== j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.edges_
   [cajole] result: (ControlOperation) t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &lt; j
   [cajole] result: (SimpleOperation) i &lt; j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j - 1
   [cajole] result: (SimpleOperation) j - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j * (j - 1)
   [cajole] result: (SimpleOperation) j * (j - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j * (j - 1) &gt;&gt; 1
   [cajole] result: (SimpleOperation) j * (j - 1) &gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i + (j * (j - 1) &gt;&gt; 1)
   [cajole] result: (SimpleOperation) i + (j * (j - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i - 1
   [cajole] result: (SimpleOperation) i - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i * (i - 1)
   [cajole] result: (SimpleOperation) i * (i - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i * (i - 1) &gt;&gt; 1
   [cajole] result: (SimpleOperation) i * (i - 1) &gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j + (i * (i - 1) &gt;&gt; 1)
   [cajole] result: (SimpleOperation) j + (i * (i - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1)
   [cajole] result: (ControlOperation) i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) weight
   [cajole] result: (Reference) weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight
   [cajole] result: (SpecialOperation) ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight
   [cajole] result: (ExpressionStmt) ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (i !== j) {
   [cajole]   this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole] }
   [cajole] result: (Conditional) if (i !== j) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) if (i !== j) {
   [cajole]   this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) if (i !== j) {
   [cajole]   ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setMember
   [cajole] input: (AssignOperation) Graph.prototype.setWeight = function (i, j, weight) {
   [cajole]   if (i !== j) {
   [cajole]     this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole]   }
   [cajole] }
   [cajole] result: (SpecialOperation) ___.setMember(Graph, 'setWeight', ___.method(function (i, j, weight) {
   [cajole]                                                var t___ = this;
   [cajole]                                                if (i !== j) {
   [cajole]                                                  ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole]                                                }
   [cajole]                                              }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) Graph.prototype.setWeight = function (i, j, weight) {
   [cajole]   if (i !== j) {
   [cajole]     this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole]   }
   [cajole] }
   [cajole] result: (ExpressionStmt) ___.setMember(Graph, 'setWeight', ___.method(function (i, j, weight) {
   [cajole]                                                var t___ = this;
   [cajole]                                                if (i !== j) {
   [cajole]                                                  ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole]                                                }
   [cajole]                                              }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) getWeight
   [cajole] result: (Reference) getWeight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) Graph
   [cajole] result: (SpecialOperation) ___.primFreeze(Graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i === j
   [cajole] result: (SimpleOperation) i === j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return 0
   [cajole] result: (ReturnStmt) return 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return 0;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return 0;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (i === j) {
   [cajole]   return 0;
   [cajole] }
   [cajole] result: (Conditional) if (i === j) {
   [cajole]   return 0;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.edges_
   [cajole] result: (ControlOperation) t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i &lt; j
   [cajole] result: (SimpleOperation) i &lt; j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j - 1
   [cajole] result: (SimpleOperation) j - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j * (j - 1)
   [cajole] result: (SimpleOperation) j * (j - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j * (j - 1) &gt;&gt; 1
   [cajole] result: (SimpleOperation) j * (j - 1) &gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i + (j * (j - 1) &gt;&gt; 1)
   [cajole] result: (SimpleOperation) i + (j * (j - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i - 1
   [cajole] result: (SimpleOperation) i - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i * (i - 1)
   [cajole] result: (SimpleOperation) i * (i - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i * (i - 1) &gt;&gt; 1
   [cajole] result: (SimpleOperation) i * (i - 1) &gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j + (i * (i - 1) &gt;&gt; 1)
   [cajole] result: (SimpleOperation) j + (i * (i - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1)
   [cajole] result: (ControlOperation) i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ]
   [cajole] result: (SpecialOperation) ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ]
   [cajole] result: (ReturnStmt) return ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) if (i === j) {
   [cajole]   return 0;
   [cajole] }
   [cajole] return this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ]
   [cajole] result: (ParseTreeNodeContainer) if (i === j) {
   [cajole]   return 0;
   [cajole] }
   [cajole] return ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setMember
   [cajole] input: (AssignOperation) Graph.prototype.getWeight = function (i, j) {
   [cajole]   if (i === j) {
   [cajole]     return 0;
   [cajole]   }
   [cajole]   return this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ];
   [cajole] }
   [cajole] result: (SpecialOperation) ___.setMember(Graph, 'getWeight', ___.method(function (i, j) {
   [cajole]                                                var t___ = this;
   [cajole]                                                if (i === j) {
   [cajole]                                                  return 0;
   [cajole]                                                }
   [cajole]                                                return ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1));
   [cajole]                                              }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) Graph.prototype.getWeight = function (i, j) {
   [cajole]   if (i === j) {
   [cajole]     return 0;
   [cajole]   }
   [cajole]   return this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ];
   [cajole] }
   [cajole] result: (ExpressionStmt) ___.setMember(Graph, 'getWeight', ___.method(function (i, j) {
   [cajole]                                                var t___ = this;
   [cajole]                                                if (i === j) {
   [cajole]                                                  return 0;
   [cajole]                                                }
   [cajole]                                                return ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1));
   [cajole]                                              }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RealLiteral) 0.632
   [cajole] result: (RealLiteral) 0.632

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var COEFF_FRICTION = 0.632
   [cajole] result: (Declaration) var COEFF_FRICTION = 0.632

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) step
   [cajole] result: (Reference) step

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) Graph
   [cajole] result: (SpecialOperation) ___.primFreeze(Graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nSteps
   [cajole] result: (Reference) nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !nSteps
   [cajole] result: (SimpleOperation) !nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (BooleanLiteral) false
   [cajole] result: (BooleanLiteral) false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return false
   [cajole] result: (ReturnStmt) return false

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return false;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return false;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!nSteps) {
   [cajole]   return false;
   [cajole] }
   [cajole] result: (Conditional) if (!nSteps) {
   [cajole]   return false;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.edges_
   [cajole] result: (ControlOperation) t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var edges = this.edges_
   [cajole] result: (Declaration) var edges = t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.nodes_
   [cajole] result: (ControlOperation) t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodes = this.nodes_
   [cajole] result: (Declaration) var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes.length
   [cajole] result: (SpecialOperation) x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nNodes = nodes.length
   [cajole] result: (Declaration) var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nNodes
   [cajole] result: (Declaration) var i = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var graphNode = nodes[ i ]
   [cajole] result: (Declaration) var graphNode = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dx'
   [cajole] result: (StringLiteral) 'dx'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) COEFF_FRICTION
   [cajole] result: (Reference) COEFF_FRICTION

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) graphNode.dx *= COEFF_FRICTION
   [cajole] result: (SpecialOperation) ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) graphNode.dx *= COEFF_FRICTION
   [cajole] result: (ExpressionStmt) ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dy'
   [cajole] result: (StringLiteral) 'dy'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) COEFF_FRICTION
   [cajole] result: (Reference) COEFF_FRICTION

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) graphNode.dy *= COEFF_FRICTION
   [cajole] result: (SpecialOperation) ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) graphNode.dy *= COEFF_FRICTION
   [cajole] result: (ExpressionStmt) ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   graphNode.dx *= COEFF_FRICTION;
   [cajole]   graphNode.dy *= COEFF_FRICTION;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]   ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   graphNode.dx *= COEFF_FRICTION;
   [cajole]   graphNode.dy *= COEFF_FRICTION;
   [cajole] }
   [cajole] result: (ForLoop) for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]   ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nNodes
   [cajole] result: (Declaration) var i = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var graphNode = nodes[ i ]
   [cajole] result: (Declaration) var graphNode = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.domNode
   [cajole] result: (SpecialOperation) x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var domNode = graphNode.domNode
   [cajole] result: (Declaration) var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetLeft
   [cajole] result: (SpecialOperation) x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetWidth
   [cajole] result: (SpecialOperation) x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) domNode.offsetWidth &gt;&gt;&gt; 1
   [cajole] result: (SimpleOperation) (x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1)
   [cajole] result: (SimpleOperation) (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1)
   [cajole] result: (SpecialOperation) x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1)
   [cajole] result: (ExpressionStmt) x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetTop
   [cajole] result: (SpecialOperation) x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetHeight
   [cajole] result: (SpecialOperation) x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) domNode.offsetHeight &gt;&gt;&gt; 1
   [cajole] result: (SimpleOperation) (x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1)
   [cajole] result: (SimpleOperation) (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1)
   [cajole] result: (SpecialOperation) x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1)
   [cajole] result: (ExpressionStmt) x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]   graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]   x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]   x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]   graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole] }
   [cajole] result: (ForLoop) for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]   x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]   x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) scale
   [cajole] result: (Reference) scale

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var naturalSpringLength = scale
   [cajole] result: (Declaration) var naturalSpringLength = scale

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 30
   [cajole] result: (IntegerLiteral) 30

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var kC = 30
   [cajole] result: (Declaration) var kC = 30

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RealLiteral) 0.01
   [cajole] result: (RealLiteral) 0.01

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var k = 0.01
   [cajole] result: (Declaration) var k = 0.01

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var kC = 30, k = 0.01
   [cajole] result: (MultiDeclaration) var kC = 30, k = 0.01

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Math
   [cajole] result: (Reference) Math

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) Math.sqrt
   [cajole] result: (SpecialOperation) x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sqrt = Math.sqrt
   [cajole] result: (Declaration) var sqrt = (x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edges
   [cajole] result: (Reference) edges

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) edges.length
   [cajole] result: (SpecialOperation) x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var e = edges.length
   [cajole] result: (Declaration) var e = (x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var j = nNodes
   [cajole] result: (Declaration) var j = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --j
   [cajole] result: (AssignOperation) --j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --j &gt;= 1
   [cajole] result: (SimpleOperation) --j &gt;= 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ j ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, j)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeJ = nodes[ j ]
   [cajole] result: (Declaration) var nodeJ = ___.readPub(nodes, j)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeJ
   [cajole] result: (Reference) nodeJ

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeJ.x
   [cajole] result: (SpecialOperation) x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var xj = nodeJ.x
   [cajole] result: (Declaration) var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeJ
   [cajole] result: (Reference) nodeJ

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeJ.y
   [cajole] result: (SpecialOperation) x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var yj = nodeJ.y
   [cajole] result: (Declaration) var yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var xj = nodeJ.x, yj = nodeJ.y
   [cajole] result: (MultiDeclaration) var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var ddx = 0
   [cajole] result: (Declaration) var ddx = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var ddy = 0
   [cajole] result: (Declaration) var ddy = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var ddx = 0, ddy = 0
   [cajole] result: (MultiDeclaration) var ddx = 0, ddy = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = j
   [cajole] result: (Declaration) var i = j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edges
   [cajole] result: (Reference) edges

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) e
   [cajole] result: (Reference) e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --e
   [cajole] result: (AssignOperation) --e

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) edges[ --e ]
   [cajole] result: (SpecialOperation) ___.readPub(edges, --e)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var weight = edges[ --e ]
   [cajole] result: (Declaration) var weight = ___.readPub(edges, --e)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeI = nodes[ i ]
   [cajole] result: (Declaration) var nodeI = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) xj
   [cajole] result: (Reference) xj

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeI
   [cajole] result: (Reference) nodeI

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeI.x
   [cajole] result: (SpecialOperation) x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) xj - nodeI.x
   [cajole] result: (SimpleOperation) xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sx = xj - nodeI.x
   [cajole] result: (Declaration) var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) yj
   [cajole] result: (Reference) yj

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeI
   [cajole] result: (Reference) nodeI

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodeI.y
   [cajole] result: (SpecialOperation) x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) yj - nodeI.y
   [cajole] result: (SimpleOperation) yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sy = yj - nodeI.y
   [cajole] result: (Declaration) var sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var sx = xj - nodeI.x, sy = yj - nodeI.y
   [cajole] result: (MultiDeclaration) var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sx
   [cajole] result: (Reference) sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !sx
   [cajole] result: (SimpleOperation) !sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i % 2
   [cajole] result: (SimpleOperation) i % 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) i % 2? 1: -1
   [cajole] result: (ControlOperation) i % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) sx = i % 2? 1: -1
   [cajole] result: (AssignOperation) sx = i % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) sx = i % 2? 1: -1
   [cajole] result: (ExpressionStmt) sx = i % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   sx = i % 2? 1: -1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   sx = i % 2? 1: -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!sx) {
   [cajole]   sx = i % 2? 1: -1;
   [cajole] }
   [cajole] result: (Conditional) if (!sx) {
   [cajole]   sx = i % 2? 1: -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sy
   [cajole] result: (Reference) sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !sy
   [cajole] result: (SimpleOperation) !sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) j % 2
   [cajole] result: (SimpleOperation) j % 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) j % 2? 1: -1
   [cajole] result: (ControlOperation) j % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) sy = j % 2? 1: -1
   [cajole] result: (AssignOperation) sy = j % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) sy = j % 2? 1: -1
   [cajole] result: (ExpressionStmt) sy = j % 2? 1: -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   sy = j % 2? 1: -1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   sy = j % 2? 1: -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!sy) {
   [cajole]   sy = j % 2? 1: -1;
   [cajole] }
   [cajole] result: (Conditional) if (!sy) {
   [cajole]   sy = j % 2? 1: -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sx
   [cajole] result: (Reference) sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sx
   [cajole] result: (Reference) sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sx * sx
   [cajole] result: (SimpleOperation) sx * sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sxSqr = sx * sx
   [cajole] result: (Declaration) var sxSqr = sx * sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sy
   [cajole] result: (Reference) sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sy
   [cajole] result: (Reference) sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sy * sy
   [cajole] result: (SimpleOperation) sy * sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sySqr = sy * sy
   [cajole] result: (Declaration) var sySqr = sy * sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var sxSqr = sx * sx, sySqr = sy * sy
   [cajole] result: (MultiDeclaration) var sxSqr = sx * sx, sySqr = sy * sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sxSqr
   [cajole] result: (Reference) sxSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sySqr
   [cajole] result: (Reference) sySqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sxSqr + sySqr
   [cajole] result: (SimpleOperation) sxSqr + sySqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var sSqr = sxSqr + sySqr
   [cajole] result: (Declaration) var sSqr = sxSqr + sySqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sqrt
   [cajole] result: (Reference) sqrt

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sSqr
   [cajole] result: (Reference) sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) sqrt(sSqr)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(sqrt)(sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var s = sqrt(sSqr)
   [cajole] result: (Declaration) var s = ___.asSimpleFunc(sqrt)(sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) weight
   [cajole] result: (Reference) weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) s
   [cajole] result: (Reference) s

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) naturalSpringLength
   [cajole] result: (Reference) naturalSpringLength

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) weight
   [cajole] result: (Reference) weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) naturalSpringLength / weight
   [cajole] result: (SimpleOperation) naturalSpringLength / weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) s - naturalSpringLength / weight
   [cajole] result: (SimpleOperation) s - naturalSpringLength / weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (s - naturalSpringLength / weight) * k
   [cajole] result: (SimpleOperation) (s - naturalSpringLength / weight) * k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) weight &amp;&amp; (s - naturalSpringLength / weight) * k
   [cajole] result: (ControlOperation) weight &amp;&amp; (s - naturalSpringLength / weight) * k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k
   [cajole] result: (Declaration) var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) kC
   [cajole] result: (Reference) kC

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sSqr
   [cajole] result: (Reference) sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) kC / sSqr
   [cajole] result: (SimpleOperation) kC / sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var chargeForce = kC / sSqr
   [cajole] result: (Declaration) var chargeForce = kC / sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) springForce
   [cajole] result: (Reference) springForce

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) chargeForce
   [cajole] result: (Reference) chargeForce

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) springForce - chargeForce
   [cajole] result: (SimpleOperation) springForce - chargeForce

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var force = springForce - chargeForce
   [cajole] result: (Declaration) var force = springForce - chargeForce

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var ax = 0
   [cajole] result: (Declaration) var ax = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var ay = 0
   [cajole] result: (Declaration) var ay = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var ax = 0, ay = 0
   [cajole] result: (MultiDeclaration) var ax = 0, ay = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sxSqr
   [cajole] result: (Reference) sxSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sySqr
   [cajole] result: (Reference) sySqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) force
   [cajole] result: (Reference) force

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sqrt
   [cajole] result: (Reference) sqrt

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sxSqr
   [cajole] result: (Reference) sxSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sSqr
   [cajole] result: (Reference) sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sxSqr / sSqr
   [cajole] result: (SimpleOperation) sxSqr / sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) sqrt(sxSqr / sSqr)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(sqrt)(sxSqr / sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * sqrt(sxSqr / sSqr)
   [cajole] result: (SimpleOperation) force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sx
   [cajole] result: (Reference) sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sx &lt; 0
   [cajole] result: (SimpleOperation) sx &lt; 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) sx &lt; 0? -1: 1
   [cajole] result: (ControlOperation) sx &lt; 0? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1)
   [cajole] result: (SimpleOperation) force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1)
   [cajole] result: (AssignOperation) ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1)
   [cajole] result: (ExpressionStmt) ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) force
   [cajole] result: (Reference) force

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sqrt
   [cajole] result: (Reference) sqrt

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sySqr
   [cajole] result: (Reference) sySqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sSqr
   [cajole] result: (Reference) sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sySqr / sSqr
   [cajole] result: (SimpleOperation) sySqr / sSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) sqrt(sySqr / sSqr)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(sqrt)(sySqr / sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * sqrt(sySqr / sSqr)
   [cajole] result: (SimpleOperation) force * ___.asSimpleFunc(sqrt)(sySqr / sSqr)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sy
   [cajole] result: (Reference) sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sy &lt; 0
   [cajole] result: (SimpleOperation) sy &lt; 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) sy &lt; 0? -1: 1
   [cajole] result: (ControlOperation) sy &lt; 0? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1)
   [cajole] result: (SimpleOperation) force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1)
   [cajole] result: (AssignOperation) ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1)
   [cajole] result: (ExpressionStmt) ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]   ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]   ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) force
   [cajole] result: (Reference) force

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sx
   [cajole] result: (Reference) sx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sx &lt; 0
   [cajole] result: (SimpleOperation) sx &lt; 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) sx &lt; 0? -1: 1
   [cajole] result: (ControlOperation) sx &lt; 0? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * (sx &lt; 0? -1: 1)
   [cajole] result: (SimpleOperation) force * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) ax = force * (sx &lt; 0? -1: 1)
   [cajole] result: (AssignOperation) ax = force * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ax = force * (sx &lt; 0? -1: 1)
   [cajole] result: (ExpressionStmt) ax = force * (sx &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   ax = force * (sx &lt; 0? -1: 1);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ax = force * (sx &lt; 0? -1: 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (sySqr) {
   [cajole]   ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]   ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole] } else {
   [cajole]   ax = force * (sx &lt; 0? -1: 1);
   [cajole] }
   [cajole] result: (Conditional) if (sySqr) {
   [cajole]   ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]   ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole] } else {
   [cajole]   ax = force * (sx &lt; 0? -1: 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   if (sySqr) {
   [cajole]     ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]     ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]   } else {
   [cajole]     ax = force * (sx &lt; 0? -1: 1);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   if (sySqr) {
   [cajole]     ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]     ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]   } else {
   [cajole]     ax = force * (sx &lt; 0? -1: 1);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) force
   [cajole] result: (Reference) force

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) sy
   [cajole] result: (Reference) sy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) sy &lt; 0
   [cajole] result: (SimpleOperation) sy &lt; 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) sy &lt; 0? -1: 1
   [cajole] result: (ControlOperation) sy &lt; 0? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) force * (sy &lt; 0? -1: 1)
   [cajole] result: (SimpleOperation) force * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) ay = force * (sy &lt; 0? -1: 1)
   [cajole] result: (AssignOperation) ay = force * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ay = force * (sy &lt; 0? -1: 1)
   [cajole] result: (ExpressionStmt) ay = force * (sy &lt; 0? -1: 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   ay = force * (sy &lt; 0? -1: 1);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ay = force * (sy &lt; 0? -1: 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (sxSqr) {
   [cajole]   if (sySqr) {
   [cajole]     ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]     ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]   } else {
   [cajole]     ax = force * (sx &lt; 0? -1: 1);
   [cajole]   }
   [cajole] } else {
   [cajole]   ay = force * (sy &lt; 0? -1: 1);
   [cajole] }
   [cajole] result: (Conditional) if (sxSqr) {
   [cajole]   if (sySqr) {
   [cajole]     ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]     ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]   } else {
   [cajole]     ax = force * (sx &lt; 0? -1: 1);
   [cajole]   }
   [cajole] } else {
   [cajole]   ay = force * (sy &lt; 0? -1: 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeI
   [cajole] result: (Reference) nodeI

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dx'
   [cajole] result: (StringLiteral) 'dx'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ax
   [cajole] result: (Reference) ax

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) nodeI.dx += ax
   [cajole] result: (SpecialOperation) ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) nodeI.dx += ax
   [cajole] result: (ExpressionStmt) ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeI
   [cajole] result: (Reference) nodeI

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dy'
   [cajole] result: (StringLiteral) 'dy'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ay
   [cajole] result: (Reference) ay

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) nodeI.dy += ay
   [cajole] result: (SpecialOperation) ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) nodeI.dy += ay
   [cajole] result: (ExpressionStmt) ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ddx
   [cajole] result: (Reference) ddx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ax
   [cajole] result: (Reference) ax

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) ddx += ax
   [cajole] result: (AssignOperation) ddx = ddx + ax

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ddx += ax
   [cajole] result: (ExpressionStmt) ddx = ddx + ax

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ddy
   [cajole] result: (Reference) ddy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ay
   [cajole] result: (Reference) ay

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) ddy += ay
   [cajole] result: (AssignOperation) ddy = ddy + ay

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) ddy += ay
   [cajole] result: (ExpressionStmt) ddy = ddy + ay

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var weight = edges[ --e ];
   [cajole]   var nodeI = nodes[ i ];
   [cajole]   var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]   if (!sx) {
   [cajole]     sx = i % 2? 1: -1;
   [cajole]   }
   [cajole]   if (!sy) {
   [cajole]     sy = j % 2? 1: -1;
   [cajole]   }
   [cajole]   var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]   var sSqr = sxSqr + sySqr;
   [cajole]   var s = sqrt(sSqr);
   [cajole]   var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]   var chargeForce = kC / sSqr;
   [cajole]   var force = springForce - chargeForce;
   [cajole]   var ax = 0, ay = 0;
   [cajole]   if (sxSqr) {
   [cajole]     if (sySqr) {
   [cajole]       ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]       ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]     } else {
   [cajole]       ax = force * (sx &lt; 0? -1: 1);
   [cajole]     }
   [cajole]   } else {
   [cajole]     ay = force * (sy &lt; 0? -1: 1);
   [cajole]   }
   [cajole]   nodeI.dx += ax;
   [cajole]   nodeI.dy += ay;
   [cajole]   ddx += ax;
   [cajole]   ddy += ay;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var weight = ___.readPub(edges, --e);
   [cajole]   var nodeI = ___.readPub(nodes, i);
   [cajole]   var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]   if (!sx) {
   [cajole]     sx = i % 2? 1: -1;
   [cajole]   }
   [cajole]   if (!sy) {
   [cajole]     sy = j % 2? 1: -1;
   [cajole]   }
   [cajole]   var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]   var sSqr = sxSqr + sySqr;
   [cajole]   var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]   var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]   var chargeForce = kC / sSqr;
   [cajole]   var force = springForce - chargeForce;
   [cajole]   var ax = 0, ay = 0;
   [cajole]   if (sxSqr) {
   [cajole]     if (sySqr) {
   [cajole]       ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]       ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]     } else {
   [cajole]       ax = force * (sx &lt; 0? -1: 1);
   [cajole]     }
   [cajole]   } else {
   [cajole]     ay = force * (sy &lt; 0? -1: 1);
   [cajole]   }
   [cajole]   ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]   ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]   ddx = ddx + ax;
   [cajole]   ddy = ddy + ay;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = j; --i &gt;= 0;) {
   [cajole]   var weight = edges[ --e ];
   [cajole]   var nodeI = nodes[ i ];
   [cajole]   var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]   if (!sx) {
   [cajole]     sx = i % 2? 1: -1;
   [cajole]   }
   [cajole]   if (!sy) {
   [cajole]     sy = j % 2? 1: -1;
   [cajole]   }
   [cajole]   var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]   var sSqr = sxSqr + sySqr;
   [cajole]   var s = sqrt(sSqr);
   [cajole]   var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]   var chargeForce = kC / sSqr;
   [cajole]   var force = springForce - chargeForce;
   [cajole]   var ax = 0, ay = 0;
   [cajole]   if (sxSqr) {
   [cajole]     if (sySqr) {
   [cajole]       ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]       ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]     } else {
   [cajole]       ax = force * (sx &lt; 0? -1: 1);
   [cajole]     }
   [cajole]   } else {
   [cajole]     ay = force * (sy &lt; 0? -1: 1);
   [cajole]   }
   [cajole]   nodeI.dx += ax;
   [cajole]   nodeI.dy += ay;
   [cajole]   ddx += ax;
   [cajole]   ddy += ay;
   [cajole] }
   [cajole] result: (ForLoop) for (var i = j; --i &gt;= 0;) {
   [cajole]   var weight = ___.readPub(edges, --e);
   [cajole]   var nodeI = ___.readPub(nodes, i);
   [cajole]   var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]   if (!sx) {
   [cajole]     sx = i % 2? 1: -1;
   [cajole]   }
   [cajole]   if (!sy) {
   [cajole]     sy = j % 2? 1: -1;
   [cajole]   }
   [cajole]   var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]   var sSqr = sxSqr + sySqr;
   [cajole]   var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]   var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]   var chargeForce = kC / sSqr;
   [cajole]   var force = springForce - chargeForce;
   [cajole]   var ax = 0, ay = 0;
   [cajole]   if (sxSqr) {
   [cajole]     if (sySqr) {
   [cajole]       ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]       ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]     } else {
   [cajole]       ax = force * (sx &lt; 0? -1: 1);
   [cajole]     }
   [cajole]   } else {
   [cajole]     ay = force * (sy &lt; 0? -1: 1);
   [cajole]   }
   [cajole]   ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]   ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]   ddx = ddx + ax;
   [cajole]   ddy = ddy + ay;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeJ
   [cajole] result: (Reference) nodeJ

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dx'
   [cajole] result: (StringLiteral) 'dx'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ddx
   [cajole] result: (Reference) ddx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) nodeJ.dx -= ddx
   [cajole] result: (SpecialOperation) ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) nodeJ.dx -= ddx
   [cajole] result: (ExpressionStmt) ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeJ
   [cajole] result: (Reference) nodeJ

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'dy'
   [cajole] result: (StringLiteral) 'dy'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ddy
   [cajole] result: (Reference) ddy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) nodeJ.dy -= ddy
   [cajole] result: (SpecialOperation) ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) nodeJ.dy -= ddy
   [cajole] result: (ExpressionStmt) ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var nodeJ = nodes[ j ];
   [cajole]   var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = edges[ --e ];
   [cajole]     var nodeI = nodes[ i ];
   [cajole]     var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = sqrt(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     nodeI.dx += ax;
   [cajole]     nodeI.dy += ay;
   [cajole]     ddx += ax;
   [cajole]     ddy += ay;
   [cajole]   }
   [cajole]   nodeJ.dx -= ddx;
   [cajole]   nodeJ.dy -= ddy;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var nodeJ = ___.readPub(nodes, j);
   [cajole]   var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = ___.readPub(edges, --e);
   [cajole]     var nodeI = ___.readPub(nodes, i);
   [cajole]     var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]     ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]     ddx = ddx + ax;
   [cajole]     ddy = ddy + ay;
   [cajole]   }
   [cajole]   ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]   ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var j = nNodes; --j &gt;= 1;) {
   [cajole]   var nodeJ = nodes[ j ];
   [cajole]   var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = edges[ --e ];
   [cajole]     var nodeI = nodes[ i ];
   [cajole]     var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = sqrt(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     nodeI.dx += ax;
   [cajole]     nodeI.dy += ay;
   [cajole]     ddx += ax;
   [cajole]     ddy += ay;
   [cajole]   }
   [cajole]   nodeJ.dx -= ddx;
   [cajole]   nodeJ.dy -= ddy;
   [cajole] }
   [cajole] result: (ForLoop) for (var j = nNodes; --j &gt;= 1;) {
   [cajole]   var nodeJ = ___.readPub(nodes, j);
   [cajole]   var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = ___.readPub(edges, --e);
   [cajole]     var nodeI = ___.readPub(nodes, i);
   [cajole]     var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]     ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]     ddx = ddx + ax;
   [cajole]     ddy = ddy + ay;
   [cajole]   }
   [cajole]   ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]   ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var totVelSqr = 0
   [cajole] result: (Declaration) var totVelSqr = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nNodes
   [cajole] result: (Declaration) var i = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 1
   [cajole] result: (SimpleOperation) --i &gt;= 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var node = nodes[ i ]
   [cajole] result: (Declaration) var node = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) node
   [cajole] result: (Reference) node

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) node.dx
   [cajole] result: (SpecialOperation) x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var dx = node.dx
   [cajole] result: (Declaration) var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) node
   [cajole] result: (Reference) node

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) node.dy
   [cajole] result: (SpecialOperation) x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var dy = node.dy
   [cajole] result: (Declaration) var dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var dx = node.dx, dy = node.dy
   [cajole] result: (MultiDeclaration) var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) totVelSqr
   [cajole] result: (Reference) totVelSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) dx
   [cajole] result: (Reference) dx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) dx
   [cajole] result: (Reference) dx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) dx * dx
   [cajole] result: (SimpleOperation) dx * dx

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) dy
   [cajole] result: (Reference) dy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) dy
   [cajole] result: (Reference) dy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) dy * dy
   [cajole] result: (SimpleOperation) dy * dy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) dx * dx + dy * dy
   [cajole] result: (SimpleOperation) dx * dx + dy * dy

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) totVelSqr += dx * dx + dy * dy
   [cajole] result: (AssignOperation) totVelSqr = totVelSqr + (dx * dx + dy * dy)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) totVelSqr += dx * dx + dy * dy
   [cajole] result: (ExpressionStmt) totVelSqr = totVelSqr + (dx * dx + dy * dy)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var node = nodes[ i ];
   [cajole]   var dx = node.dx, dy = node.dy;
   [cajole]   totVelSqr += dx * dx + dy * dy;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var node = ___.readPub(nodes, i);
   [cajole]   var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]   totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var node = nodes[ i ];
   [cajole]   var dx = node.dx, dy = node.dy;
   [cajole]   totVelSqr += dx * dx + dy * dy;
   [cajole] }
   [cajole] result: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var node = ___.readPub(nodes, i);
   [cajole]   var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]   totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nNodes
   [cajole] result: (Declaration) var i = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 1
   [cajole] result: (SimpleOperation) --i &gt;= 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var graphNode = nodes[ i ]
   [cajole] result: (Declaration) var graphNode = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.domNode
   [cajole] result: (SpecialOperation) x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var domNode = graphNode.domNode
   [cajole] result: (Declaration) var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetWidth
   [cajole] result: (SpecialOperation) x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var width = domNode.offsetWidth
   [cajole] result: (Declaration) var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetHeight
   [cajole] result: (SpecialOperation) x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var height = domNode.offsetHeight
   [cajole] result: (Declaration) var height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var width = domNode.offsetWidth, height = domNode.offsetHeight
   [cajole] result: (MultiDeclaration) var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) position
   [cajole] result: (SpecialOperation) ___.primFreeze(position)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.x
   [cajole] result: (SpecialOperation) x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.dx
   [cajole] result: (SpecialOperation) x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nSteps
   [cajole] result: (Reference) nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.dx * nSteps
   [cajole] result: (SimpleOperation) (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.x + graphNode.dx * nSteps
   [cajole] result: (SimpleOperation) (x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) width
   [cajole] result: (Reference) width

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) width / 2
   [cajole] result: (SimpleOperation) width / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.x + graphNode.dx * nSteps - width / 2
   [cajole] result: (SimpleOperation) (x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.y
   [cajole] result: (SpecialOperation) x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.dy
   [cajole] result: (SpecialOperation) x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nSteps
   [cajole] result: (Reference) nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.dy * nSteps
   [cajole] result: (SimpleOperation) (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.y + graphNode.dy * nSteps
   [cajole] result: (SimpleOperation) (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) height
   [cajole] result: (Reference) height

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) height / 2
   [cajole] result: (SimpleOperation) height / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphNode.y + graphNode.dy * nSteps - height / 2
   [cajole] result: (SimpleOperation) (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) width
   [cajole] result: (Reference) width

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) height
   [cajole] result: (Reference) height

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height)
   [cajole] result: (Declaration) var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) newStyle
   [cajole] result: (Reference) newStyle

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.setStyle(newStyle)
   [cajole] result: (SpecialOperation) x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) domNode.setStyle(newStyle)
   [cajole] result: (ExpressionStmt) x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]   var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]   domNode.setStyle(newStyle);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]   var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]   var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]   x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]   var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]   domNode.setStyle(newStyle);
   [cajole] }
   [cajole] result: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]   var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]   var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]   x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) totVelSqr
   [cajole] result: (Reference) totVelSqr

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) threshold
   [cajole] result: (Reference) threshold

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) totVelSqr &gt;= threshold
   [cajole] result: (SimpleOperation) totVelSqr &gt;= threshold

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ! (totVelSqr &gt;= threshold)
   [cajole] result: (SimpleOperation) ! (totVelSqr &gt;= threshold)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return ! (totVelSqr &gt;= threshold)
   [cajole] result: (ReturnStmt) return ! (totVelSqr &gt;= threshold)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) if (!nSteps) {
   [cajole]   return false;
   [cajole] }
   [cajole] var edges = this.edges_ var nodes = this.nodes_ var nNodes = nodes.length for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   graphNode.dx *= COEFF_FRICTION;
   [cajole]   graphNode.dy *= COEFF_FRICTION;
   [cajole] }
   [cajole] for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]   graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole] }
   [cajole] var naturalSpringLength = scale var kC = 30, k = 0.01 var sqrt = Math.sqrt var e = edges.length for (var j = nNodes; --j &gt;= 1;) {
   [cajole]   var nodeJ = nodes[ j ];
   [cajole]   var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = edges[ --e ];
   [cajole]     var nodeI = nodes[ i ];
   [cajole]     var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = sqrt(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     nodeI.dx += ax;
   [cajole]     nodeI.dy += ay;
   [cajole]     ddx += ax;
   [cajole]     ddy += ay;
   [cajole]   }
   [cajole]   nodeJ.dx -= ddx;
   [cajole]   nodeJ.dy -= ddy;
   [cajole] }
   [cajole] var totVelSqr = 0 for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var node = nodes[ i ];
   [cajole]   var dx = node.dx, dy = node.dy;
   [cajole]   totVelSqr += dx * dx + dy * dy;
   [cajole] }
   [cajole] for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]   var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]   domNode.setStyle(newStyle);
   [cajole] }
   [cajole] return ! (totVelSqr &gt;= threshold)
   [cajole] result: (ParseTreeNodeContainer) if (!nSteps) {
   [cajole]   return false;
   [cajole] }
   [cajole] var edges = t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_') var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_') var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]   ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole] }
   [cajole] for (var i = nNodes; --i &gt;= 0;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]   x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]   x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole] }
   [cajole] var naturalSpringLength = scale var kC = 30, k = 0.01 var sqrt = (x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt')) var e = (x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length')) for (var j = nNodes; --j &gt;= 1;) {
   [cajole]   var nodeJ = ___.readPub(nodes, j);
   [cajole]   var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]   var ddx = 0, ddy = 0;
   [cajole]   for (var i = j; --i &gt;= 0;) {
   [cajole]     var weight = ___.readPub(edges, --e);
   [cajole]     var nodeI = ___.readPub(nodes, i);
   [cajole]     var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]     if (!sx) {
   [cajole]       sx = i % 2? 1: -1;
   [cajole]     }
   [cajole]     if (!sy) {
   [cajole]       sy = j % 2? 1: -1;
   [cajole]     }
   [cajole]     var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]     var sSqr = sxSqr + sySqr;
   [cajole]     var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]     var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]     var chargeForce = kC / sSqr;
   [cajole]     var force = springForce - chargeForce;
   [cajole]     var ax = 0, ay = 0;
   [cajole]     if (sxSqr) {
   [cajole]       if (sySqr) {
   [cajole]         ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]         ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]       } else {
   [cajole]         ax = force * (sx &lt; 0? -1: 1);
   [cajole]       }
   [cajole]     } else {
   [cajole]       ay = force * (sy &lt; 0? -1: 1);
   [cajole]     }
   [cajole]     ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]     ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]     ddx = ddx + ax;
   [cajole]     ddy = ddy + ay;
   [cajole]   }
   [cajole]   ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]   ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole] }
   [cajole] var totVelSqr = 0 for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var node = ___.readPub(nodes, i);
   [cajole]   var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]   totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole] }
   [cajole] for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]   var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]   var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]   x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole] }
   [cajole] return ! (totVelSqr &gt;= threshold)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setMember
   [cajole] input: (AssignOperation) Graph.prototype.step = function (nSteps, scale, threshold) {
   [cajole]   if (!nSteps) {
   [cajole]     return false;
   [cajole]   }
   [cajole]   var edges = this.edges_;
   [cajole]   var nodes = this.nodes_;
   [cajole]   var nNodes = nodes.length;
   [cajole]   for (var i = nNodes; --i &gt;= 0;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     graphNode.dx *= COEFF_FRICTION;
   [cajole]     graphNode.dy *= COEFF_FRICTION;
   [cajole]   }
   [cajole]   for (var i = nNodes; --i &gt;= 0;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]     graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole]   }
   [cajole]   var naturalSpringLength = scale;
   [cajole]   var kC = 30, k = 0.01;
   [cajole]   var sqrt = Math.sqrt;
   [cajole]   var e = edges.length;
   [cajole]   for (var j = nNodes; --j &gt;= 1;) {
   [cajole]     var nodeJ = nodes[ j ];
   [cajole]     var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]     var ddx = 0, ddy = 0;
   [cajole]     for (var i = j; --i &gt;= 0;) {
   [cajole]       var weight = edges[ --e ];
   [cajole]       var nodeI = nodes[ i ];
   [cajole]       var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]       if (!sx) {
   [cajole]         sx = i % 2? 1: -1;
   [cajole]       }
   [cajole]       if (!sy) {
   [cajole]         sy = j % 2? 1: -1;
   [cajole]       }
   [cajole]       var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]       var sSqr = sxSqr + sySqr;
   [cajole]       var s = sqrt(sSqr);
   [cajole]       var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]       var chargeForce = kC / sSqr;
   [cajole]       var force = springForce - chargeForce;
   [cajole]       var ax = 0, ay = 0;
   [cajole]       if (sxSqr) {
   [cajole]         if (sySqr) {
   [cajole]           ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]           ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]         } else {
   [cajole]           ax = force * (sx &lt; 0? -1: 1);
   [cajole]         }
   [cajole]       } else {
   [cajole]         ay = force * (sy &lt; 0? -1: 1);
   [cajole]       }
   [cajole]       nodeI.dx += ax;
   [cajole]       nodeI.dy += ay;
   [cajole]       ddx += ax;
   [cajole]       ddy += ay;
   [cajole]     }
   [cajole]     nodeJ.dx -= ddx;
   [cajole]     nodeJ.dy -= ddy;
   [cajole]   }
   [cajole]   var totVelSqr = 0;
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var node = nodes[ i ];
   [cajole]     var dx = node.dx, dy = node.dy;
   [cajole]     totVelSqr += dx * dx + dy * dy;
   [cajole]   }
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]     var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]     domNode.setStyle(newStyle);
   [cajole]   }
   [cajole]   return ! (totVelSqr &gt;= threshold);
   [cajole] }
   [cajole] result: (SpecialOperation) ___.setMember(Graph, 'step', ___.method(function (nSteps, scale, threshold) {
   [cajole]                                           var t___ = this;
   [cajole]                                           var x0___;
   [cajole]                                           var x1___;
   [cajole]                                           var x2___;
   [cajole]                                           var x3___;
   [cajole]                                           var x4___;
   [cajole]                                           var x5___;
   [cajole]                                           var x6___;
   [cajole]                                           var x7___;
   [cajole]                                           var x8___;
   [cajole]                                           var x9___;
   [cajole]                                           var x10___;
   [cajole]                                           var x11___;
   [cajole]                                           var x12___;
   [cajole]                                           var x13___;
   [cajole]                                           var x14___;
   [cajole]                                           var x15___;
   [cajole]                                           var x16___;
   [cajole]                                           var x17___;
   [cajole]                                           var x18___;
   [cajole]                                           var x19___;
   [cajole]                                           var x20___;
   [cajole]                                           var x21___;
   [cajole]                                           var x22___;
   [cajole]                                           var x23___;
   [cajole]                                           var x24___;
   [cajole]                                           var x25___;
   [cajole]                                           var x26___;
   [cajole]                                           if (!nSteps) {
   [cajole]                                             return false;
   [cajole]                                           }
   [cajole]                                           var edges = t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_');
   [cajole]                                           var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                           var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                           for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]                                             ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole]                                           }
   [cajole]                                           for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                             x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]                                             x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole]                                           }
   [cajole]                                           var naturalSpringLength = scale;
   [cajole]                                           var kC = 30, k = 0.01;
   [cajole]                                           var sqrt = (x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt'));
   [cajole]                                           var e = (x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length'));
   [cajole]                                           for (var j = nNodes; --j &gt;= 1;) {
   [cajole]                                             var nodeJ = ___.readPub(nodes, j);
   [cajole]                                             var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]                                             var ddx = 0, ddy = 0;
   [cajole]                                             for (var i = j; --i &gt;= 0;) {
   [cajole]                                               var weight = ___.readPub(edges, --e);
   [cajole]                                               var nodeI = ___.readPub(nodes, i);
   [cajole]                                               var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]                                               if (!sx) {
   [cajole]                                                 sx = i % 2? 1: -1;
   [cajole]                                               }
   [cajole]                                               if (!sy) {
   [cajole]                                                 sy = j % 2? 1: -1;
   [cajole]                                               }
   [cajole]                                               var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]                                               var sSqr = sxSqr + sySqr;
   [cajole]                                               var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]                                               var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]                                               var chargeForce = kC / sSqr;
   [cajole]                                               var force = springForce - chargeForce;
   [cajole]                                               var ax = 0, ay = 0;
   [cajole]                                               if (sxSqr) {
   [cajole]                                                 if (sySqr) {
   [cajole]                                                   ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]                                                   ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]                                                 } else {
   [cajole]                                                   ax = force * (sx &lt; 0? -1: 1);
   [cajole]                                                 }
   [cajole]                                               } else {
   [cajole]                                                 ay = force * (sy &lt; 0? -1: 1);
   [cajole]                                               }
   [cajole]                                               ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]                                               ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]                                               ddx = ddx + ax;
   [cajole]                                               ddy = ddy + ay;
   [cajole]                                             }
   [cajole]                                             ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]                                             ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole]                                           }
   [cajole]                                           var totVelSqr = 0;
   [cajole]                                           for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                             var node = ___.readPub(nodes, i);
   [cajole]                                             var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]                                             totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole]                                           }
   [cajole]                                           for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]                                             var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]                                             var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]                                             x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole]                                           }
   [cajole]                                           return ! (totVelSqr &gt;= threshold);
   [cajole]                                         }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) Graph.prototype.step = function (nSteps, scale, threshold) {
   [cajole]   if (!nSteps) {
   [cajole]     return false;
   [cajole]   }
   [cajole]   var edges = this.edges_;
   [cajole]   var nodes = this.nodes_;
   [cajole]   var nNodes = nodes.length;
   [cajole]   for (var i = nNodes; --i &gt;= 0;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     graphNode.dx *= COEFF_FRICTION;
   [cajole]     graphNode.dy *= COEFF_FRICTION;
   [cajole]   }
   [cajole]   for (var i = nNodes; --i &gt;= 0;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]     graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole]   }
   [cajole]   var naturalSpringLength = scale;
   [cajole]   var kC = 30, k = 0.01;
   [cajole]   var sqrt = Math.sqrt;
   [cajole]   var e = edges.length;
   [cajole]   for (var j = nNodes; --j &gt;= 1;) {
   [cajole]     var nodeJ = nodes[ j ];
   [cajole]     var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]     var ddx = 0, ddy = 0;
   [cajole]     for (var i = j; --i &gt;= 0;) {
   [cajole]       var weight = edges[ --e ];
   [cajole]       var nodeI = nodes[ i ];
   [cajole]       var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]       if (!sx) {
   [cajole]         sx = i % 2? 1: -1;
   [cajole]       }
   [cajole]       if (!sy) {
   [cajole]         sy = j % 2? 1: -1;
   [cajole]       }
   [cajole]       var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]       var sSqr = sxSqr + sySqr;
   [cajole]       var s = sqrt(sSqr);
   [cajole]       var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]       var chargeForce = kC / sSqr;
   [cajole]       var force = springForce - chargeForce;
   [cajole]       var ax = 0, ay = 0;
   [cajole]       if (sxSqr) {
   [cajole]         if (sySqr) {
   [cajole]           ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]           ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]         } else {
   [cajole]           ax = force * (sx &lt; 0? -1: 1);
   [cajole]         }
   [cajole]       } else {
   [cajole]         ay = force * (sy &lt; 0? -1: 1);
   [cajole]       }
   [cajole]       nodeI.dx += ax;
   [cajole]       nodeI.dy += ay;
   [cajole]       ddx += ax;
   [cajole]       ddy += ay;
   [cajole]     }
   [cajole]     nodeJ.dx -= ddx;
   [cajole]     nodeJ.dy -= ddy;
   [cajole]   }
   [cajole]   var totVelSqr = 0;
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var node = nodes[ i ];
   [cajole]     var dx = node.dx, dy = node.dy;
   [cajole]     totVelSqr += dx * dx + dy * dy;
   [cajole]   }
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]     var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]     domNode.setStyle(newStyle);
   [cajole]   }
   [cajole]   return ! (totVelSqr &gt;= threshold);
   [cajole] }
   [cajole] result: (ExpressionStmt) ___.setMember(Graph, 'step', ___.method(function (nSteps, scale, threshold) {
   [cajole]                                           var t___ = this;
   [cajole]                                           var x0___;
   [cajole]                                           var x1___;
   [cajole]                                           var x2___;
   [cajole]                                           var x3___;
   [cajole]                                           var x4___;
   [cajole]                                           var x5___;
   [cajole]                                           var x6___;
   [cajole]                                           var x7___;
   [cajole]                                           var x8___;
   [cajole]                                           var x9___;
   [cajole]                                           var x10___;
   [cajole]                                           var x11___;
   [cajole]                                           var x12___;
   [cajole]                                           var x13___;
   [cajole]                                           var x14___;
   [cajole]                                           var x15___;
   [cajole]                                           var x16___;
   [cajole]                                           var x17___;
   [cajole]                                           var x18___;
   [cajole]                                           var x19___;
   [cajole]                                           var x20___;
   [cajole]                                           var x21___;
   [cajole]                                           var x22___;
   [cajole]                                           var x23___;
   [cajole]                                           var x24___;
   [cajole]                                           var x25___;
   [cajole]                                           var x26___;
   [cajole]                                           if (!nSteps) {
   [cajole]                                             return false;
   [cajole]                                           }
   [cajole]                                           var edges = t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_');
   [cajole]                                           var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                           var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                           for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]                                             ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole]                                           }
   [cajole]                                           for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                             x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]                                             x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole]                                           }
   [cajole]                                           var naturalSpringLength = scale;
   [cajole]                                           var kC = 30, k = 0.01;
   [cajole]                                           var sqrt = (x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt'));
   [cajole]                                           var e = (x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length'));
   [cajole]                                           for (var j = nNodes; --j &gt;= 1;) {
   [cajole]                                             var nodeJ = ___.readPub(nodes, j);
   [cajole]                                             var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]                                             var ddx = 0, ddy = 0;
   [cajole]                                             for (var i = j; --i &gt;= 0;) {
   [cajole]                                               var weight = ___.readPub(edges, --e);
   [cajole]                                               var nodeI = ___.readPub(nodes, i);
   [cajole]                                               var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]                                               if (!sx) {
   [cajole]                                                 sx = i % 2? 1: -1;
   [cajole]                                               }
   [cajole]                                               if (!sy) {
   [cajole]                                                 sy = j % 2? 1: -1;
   [cajole]                                               }
   [cajole]                                               var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]                                               var sSqr = sxSqr + sySqr;
   [cajole]                                               var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]                                               var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]                                               var chargeForce = kC / sSqr;
   [cajole]                                               var force = springForce - chargeForce;
   [cajole]                                               var ax = 0, ay = 0;
   [cajole]                                               if (sxSqr) {
   [cajole]                                                 if (sySqr) {
   [cajole]                                                   ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]                                                   ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]                                                 } else {
   [cajole]                                                   ax = force * (sx &lt; 0? -1: 1);
   [cajole]                                                 }
   [cajole]                                               } else {
   [cajole]                                                 ay = force * (sy &lt; 0? -1: 1);
   [cajole]                                               }
   [cajole]                                               ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]                                               ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]                                               ddx = ddx + ax;
   [cajole]                                               ddy = ddy + ay;
   [cajole]                                             }
   [cajole]                                             ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]                                             ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole]                                           }
   [cajole]                                           var totVelSqr = 0;
   [cajole]                                           for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                             var node = ___.readPub(nodes, i);
   [cajole]                                             var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]                                             totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole]                                           }
   [cajole]                                           for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                             var graphNode = ___.readPub(nodes, i);
   [cajole]                                             var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]                                             var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]                                             var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]                                             x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole]                                           }
   [cajole]                                           return ! (totVelSqr &gt;= threshold);
   [cajole]                                         }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) initLayout
   [cajole] result: (Reference) initLayout

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) Graph
   [cajole] result: (SpecialOperation) ___.primFreeze(Graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readInternal
   [cajole] input: (SpecialOperation) this.nodes_
   [cajole] result: (ControlOperation) t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodes = this.nodes_
   [cajole] result: (Declaration) var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes.length
   [cajole] result: (SpecialOperation) x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nNodes = nodes.length
   [cajole] result: (Declaration) var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nNodes &lt; 2
   [cajole] result: (SimpleOperation) nNodes &lt; 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (UndefinedLiteral) undefined
   [cajole] result: (UndefinedLiteral) undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return undefined
   [cajole] result: (ReturnStmt) return undefined

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (nNodes &lt; 2) {
   [cajole]   return undefined;
   [cajole] }
   [cajole] result: (Conditional) if (nNodes &lt; 2) {
   [cajole]   return undefined;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ 0 ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, 0)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) nodes[ 0 ].domNode
   [cajole] result: (SpecialOperation) x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var anchor = nodes[ 0 ].domNode
   [cajole] result: (Declaration) var anchor = (x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) anchor
   [cajole] result: (Reference) anchor

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) anchor.offsetLeft
   [cajole] result: (SpecialOperation) x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) anchor
   [cajole] result: (Reference) anchor

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) anchor.offsetWidth
   [cajole] result: (SpecialOperation) x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) anchor.offsetWidth / 2
   [cajole] result: (SimpleOperation) (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) anchor.offsetLeft + anchor.offsetWidth / 2
   [cajole] result: (SimpleOperation) (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var x0 = anchor.offsetLeft + anchor.offsetWidth / 2
   [cajole] result: (Declaration) var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) anchor
   [cajole] result: (Reference) anchor

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) anchor.offsetTop
   [cajole] result: (SpecialOperation) x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) anchor
   [cajole] result: (Reference) anchor

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) anchor.offsetHeight
   [cajole] result: (SpecialOperation) x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) anchor.offsetHeight / 2
   [cajole] result: (SimpleOperation) (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) anchor.offsetTop + anchor.offsetHeight / 2
   [cajole] result: (SimpleOperation) (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var y0 = anchor.offsetTop + anchor.offsetHeight / 2
   [cajole] result: (Declaration) var y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var x0 = anchor.offsetLeft + anchor.offsetWidth / 2, y0 = anchor.offsetTop + anchor.offsetHeight / 2
   [cajole] result: (MultiDeclaration) var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2, y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) x0
   [cajole] result: (Reference) x0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RealLiteral) 0.8
   [cajole] result: (RealLiteral) 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) x0 * 0.8
   [cajole] result: (SimpleOperation) x0 * 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var xExtent = x0 * 0.8
   [cajole] result: (Declaration) var xExtent = x0 * 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) y0
   [cajole] result: (Reference) y0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RealLiteral) 0.8
   [cajole] result: (RealLiteral) 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) y0 * 0.8
   [cajole] result: (SimpleOperation) y0 * 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var yExtent = y0 * 0.8
   [cajole] result: (Declaration) var yExtent = y0 * 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var xExtent = x0 * 0.8, yExtent = y0 * 0.8
   [cajole] result: (MultiDeclaration) var xExtent = x0 * 0.8, yExtent = y0 * 0.8

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Math
   [cajole] result: (Reference) Math

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) Math.PI
   [cajole] result: (SpecialOperation) x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 2 * Math.PI
   [cajole] result: (SimpleOperation) 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nNodes - 1
   [cajole] result: (SimpleOperation) nNodes - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 2 * Math.PI / (nNodes - 1)
   [cajole] result: (SimpleOperation) 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var angle = 2 * Math.PI / (nNodes - 1)
   [cajole] result: (Declaration) var angle = 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nNodes
   [cajole] result: (Reference) nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = nNodes
   [cajole] result: (Declaration) var i = nNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 1
   [cajole] result: (SimpleOperation) --i &gt;= 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodes
   [cajole] result: (Reference) nodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) nodes[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var graphNode = nodes[ i ]
   [cajole] result: (Declaration) var graphNode = ___.readPub(nodes, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphNode
   [cajole] result: (Reference) graphNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphNode.domNode
   [cajole] result: (SpecialOperation) x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var domNode = graphNode.domNode
   [cajole] result: (Declaration) var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) i - 1
   [cajole] result: (SimpleOperation) i - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) angle
   [cajole] result: (Reference) angle

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (i - 1) * angle
   [cajole] result: (SimpleOperation) (i - 1) * angle

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var theta = (i - 1) * angle
   [cajole] result: (Declaration) var theta = (i - 1) * angle

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) position
   [cajole] result: (SpecialOperation) ___.primFreeze(position)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) x0
   [cajole] result: (Reference) x0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) theta
   [cajole] result: (Reference) theta

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Math
   [cajole] result: (Reference) Math

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) Math.cos(theta)
   [cajole] result: (SpecialOperation) x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) xExtent
   [cajole] result: (Reference) xExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) Math.cos(theta) * xExtent
   [cajole] result: (SimpleOperation) (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) x0 + Math.cos(theta) * xExtent
   [cajole] result: (SimpleOperation) x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) y0
   [cajole] result: (Reference) y0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) theta
   [cajole] result: (Reference) theta

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Math
   [cajole] result: (Reference) Math

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) Math.sin(theta)
   [cajole] result: (SpecialOperation) x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) yExtent
   [cajole] result: (Reference) yExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) Math.sin(theta) * yExtent
   [cajole] result: (SimpleOperation) (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) y0 - Math.sin(theta) * yExtent
   [cajole] result: (SimpleOperation) y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetWidth
   [cajole] result: (SpecialOperation) x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) domNode.offsetHeight
   [cajole] result: (SpecialOperation) x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight')))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight))
   [cajole] result: (SpecialOperation) x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight))
   [cajole] result: (ExpressionStmt) x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole] }
   [cajole] result: (ForLoop) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var nodes = this.nodes_ var nNodes = nodes.length if (nNodes &lt; 2) {
   [cajole]   return undefined;
   [cajole] }
   [cajole] var anchor = nodes[ 0 ].domNode var x0 = anchor.offsetLeft + anchor.offsetWidth / 2, y0 = anchor.offsetTop + anchor.offsetHeight / 2 var xExtent = x0 * 0.8, yExtent = y0 * 0.8 var angle = 2 * Math.PI / (nNodes - 1) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = nodes[ i ];
   [cajole]   var domNode = graphNode.domNode;
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_') var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length')) if (nNodes &lt; 2) {
   [cajole]   return undefined;
   [cajole] }
   [cajole] var anchor = (x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode')) var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2, y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2 var xExtent = x0 * 0.8, yExtent = y0 * 0.8 var angle = 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1) for (var i = nNodes; --i &gt;= 1;) {
   [cajole]   var graphNode = ___.readPub(nodes, i);
   [cajole]   var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]   var theta = (i - 1) * angle;
   [cajole]   x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setMember
   [cajole] input: (AssignOperation) Graph.prototype.initLayout = function () {
   [cajole]   var nodes = this.nodes_;
   [cajole]   var nNodes = nodes.length;
   [cajole]   if (nNodes &lt; 2) {
   [cajole]     return undefined;
   [cajole]   }
   [cajole]   var anchor = nodes[ 0 ].domNode;
   [cajole]   var x0 = anchor.offsetLeft + anchor.offsetWidth / 2, y0 = anchor.offsetTop + anchor.offsetHeight / 2;
   [cajole]   var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]   var angle = 2 * Math.PI / (nNodes - 1);
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     var theta = (i - 1) * angle;
   [cajole]     domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole]   }
   [cajole] }
   [cajole] result: (SpecialOperation) ___.setMember(Graph, 'initLayout', ___.method(function () {
   [cajole]                                                 var t___ = this;
   [cajole]                                                 var x0___;
   [cajole]                                                 var x1___;
   [cajole]                                                 var x2___;
   [cajole]                                                 var x3___;
   [cajole]                                                 var x4___;
   [cajole]                                                 var x5___;
   [cajole]                                                 var x6___;
   [cajole]                                                 var x7___;
   [cajole]                                                 var x8___;
   [cajole]                                                 var x9___;
   [cajole]                                                 var x10___;
   [cajole]                                                 var x11___;
   [cajole]                                                 var x12___;
   [cajole]                                                 var x13___;
   [cajole]                                                 var x14___;
   [cajole]                                                 var x15___;
   [cajole]                                                 var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                                 var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                 if (nNodes &lt; 2) {
   [cajole]                                                   return undefined;
   [cajole]                                                 }
   [cajole]                                                 var anchor = (x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                                 var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2, y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2;
   [cajole]                                                 var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]                                                 var angle = 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1);
   [cajole]                                                 for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                                   var graphNode = ___.readPub(nodes, i);
   [cajole]                                                   var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]                                                   var theta = (i - 1) * angle;
   [cajole]                                                   x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole]                                                 }
   [cajole]                                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) Graph.prototype.initLayout = function () {
   [cajole]   var nodes = this.nodes_;
   [cajole]   var nNodes = nodes.length;
   [cajole]   if (nNodes &lt; 2) {
   [cajole]     return undefined;
   [cajole]   }
   [cajole]   var anchor = nodes[ 0 ].domNode;
   [cajole]   var x0 = anchor.offsetLeft + anchor.offsetWidth / 2, y0 = anchor.offsetTop + anchor.offsetHeight / 2;
   [cajole]   var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]   var angle = 2 * Math.PI / (nNodes - 1);
   [cajole]   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]     var graphNode = nodes[ i ];
   [cajole]     var domNode = graphNode.domNode;
   [cajole]     var theta = (i - 1) * angle;
   [cajole]     domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole]   }
   [cajole] }
   [cajole] result: (ExpressionStmt) ___.setMember(Graph, 'initLayout', ___.method(function () {
   [cajole]                                                 var t___ = this;
   [cajole]                                                 var x0___;
   [cajole]                                                 var x1___;
   [cajole]                                                 var x2___;
   [cajole]                                                 var x3___;
   [cajole]                                                 var x4___;
   [cajole]                                                 var x5___;
   [cajole]                                                 var x6___;
   [cajole]                                                 var x7___;
   [cajole]                                                 var x8___;
   [cajole]                                                 var x9___;
   [cajole]                                                 var x10___;
   [cajole]                                                 var x11___;
   [cajole]                                                 var x12___;
   [cajole]                                                 var x13___;
   [cajole]                                                 var x14___;
   [cajole]                                                 var x15___;
   [cajole]                                                 var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                                 var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                 if (nNodes &lt; 2) {
   [cajole]                                                   return undefined;
   [cajole]                                                 }
   [cajole]                                                 var anchor = (x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                                 var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2, y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2;
   [cajole]                                                 var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]                                                 var angle = 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1);
   [cajole]                                                 for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                                   var graphNode = ___.readPub(nodes, i);
   [cajole]                                                   var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]                                                   var theta = (i - 1) * angle;
   [cajole]                                                   x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole]                                                 }
   [cajole]                                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var selectedNode = null
   [cajole] result: (Declaration) var selectedNode = null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) selectedNode
   [cajole] result: (Reference) selectedNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) selectedNode
   [cajole] result: (Reference) selectedNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'node'
   [cajole] result: (StringLiteral) 'node'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) selectedNode.className = 'node'
   [cajole] result: (SpecialOperation) x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) selectedNode.className = 'node'
   [cajole] result: (ExpressionStmt) x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   selectedNode.className = 'node';
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (selectedNode) {
   [cajole]   selectedNode.className = 'node';
   [cajole] }
   [cajole] result: (Conditional) if (selectedNode) {
   [cajole]   x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'node selected'
   [cajole] result: (StringLiteral) 'node selected'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setPublic
   [cajole] input: (AssignOperation) domNode.className = 'node selected'
   [cajole] result: (SpecialOperation) x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) domNode.className = 'node selected'
   [cajole] result: (ExpressionStmt) x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) setSelectedUser
   [cajole] result: (Reference) setSelectedUser

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.getFirstChild()
   [cajole] result: (SpecialOperation) x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.getFirstChild().getInnerHTML()
   [cajole] result: (SpecialOperation) x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) setSelectedUser(domNode.getFirstChild().getInnerHTML())
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) setSelectedUser(domNode.getFirstChild().getInnerHTML())
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   domNode.className = 'node selected';
   [cajole]   setSelectedUser(domNode.getFirstChild().getInnerHTML());
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___);
   [cajole]   ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (domNode) {
   [cajole]   domNode.className = 'node selected';
   [cajole]   setSelectedUser(domNode.getFirstChild().getInnerHTML());
   [cajole] }
   [cajole] result: (Conditional) if (domNode) {
   [cajole]   x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___);
   [cajole]   ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])));
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) selectedNode = domNode
   [cajole] result: (AssignOperation) selectedNode = domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) selectedNode = domNode
   [cajole] result: (ExpressionStmt) selectedNode = domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) if (selectedNode) {
   [cajole]   selectedNode.className = 'node';
   [cajole] }
   [cajole] if (domNode) {
   [cajole]   domNode.className = 'node selected';
   [cajole]   setSelectedUser(domNode.getFirstChild().getInnerHTML());
   [cajole] }
   [cajole] selectedNode = domNode
   [cajole] result: (ParseTreeNodeContainer) if (selectedNode) {
   [cajole]   x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___);
   [cajole] }
   [cajole] if (domNode) {
   [cajole]   x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___);
   [cajole]   ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])));
   [cajole] }
   [cajole] selectedNode = domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function selectNode(domNode) {
   [cajole]   if (selectedNode) {
   [cajole]     selectedNode.className = 'node';
   [cajole]   }
   [cajole]   if (domNode) {
   [cajole]     domNode.className = 'node selected';
   [cajole]     setSelectedUser(domNode.getFirstChild().getInnerHTML());
   [cajole]   }
   [cajole]   selectedNode = domNode;
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) getCalendar
   [cajole] result: (Reference) getCalendar

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) getCalendar()
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(getCalendar)()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var calendar = getCalendar()
   [cajole] result: (Declaration) var calendar = ___.asSimpleFunc(getCalendar)()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) calendar
   [cajole] result: (Reference) calendar

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) calendar.getEvents()
   [cajole] result: (SpecialOperation) x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var events = calendar.getEvents()
   [cajole] result: (Declaration) var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var contactSet = {
   [cajole] }
   [cajole] result: (Declaration) var contactSet = {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) events
   [cajole] result: (Reference) events

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) events.length
   [cajole] result: (SpecialOperation) x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = events.length
   [cajole] result: (Declaration) var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) events
   [cajole] result: (Reference) events

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) events[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(events, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) events[ i ].getAttendees()
   [cajole] result: (SpecialOperation) x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var guests = events[ i ].getAttendees()
   [cajole] result: (Declaration) var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) guests.length
   [cajole] result: (SpecialOperation) x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var j = guests.length
   [cajole] result: (Declaration) var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --j
   [cajole] result: (AssignOperation) --j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --j &gt;= 0
   [cajole] result: (SimpleOperation) --j &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) guests[ j ]
   [cajole] result: (SpecialOperation) ___.readPub(guests, j)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var email = guests[ j ]
   [cajole] result: (Declaration) var email = ___.readPub(guests, j)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contactSet
   [cajole] result: (Reference) contactSet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) email
   [cajole] result: (Reference) email

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (NullLiteral) null
   [cajole] result: (NullLiteral) null

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) contactSet[ email ] = null
   [cajole] result: (SpecialOperation) ___.setPub(contactSet, email, null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) contactSet[ email ] = null
   [cajole] result: (ExpressionStmt) ___.setPub(contactSet, email, null)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var email = guests[ j ];
   [cajole]   contactSet[ email ] = null;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var email = ___.readPub(guests, j);
   [cajole]   ___.setPub(contactSet, email, null);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var j = guests.length; --j &gt;= 0;) {
   [cajole]   var email = guests[ j ];
   [cajole]   contactSet[ email ] = null;
   [cajole] }
   [cajole] result: (ForLoop) for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]   var email = ___.readPub(guests, j);
   [cajole]   ___.setPub(contactSet, email, null);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length; --j &gt;= 0;) {
   [cajole]     var email = guests[ j ];
   [cajole]     contactSet[ email ] = null;
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]     var email = ___.readPub(guests, j);
   [cajole]     ___.setPub(contactSet, email, null);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = events.length; --i &gt;= 0;) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length; --j &gt;= 0;) {
   [cajole]     var email = guests[ j ];
   [cajole]     contactSet[ email ] = null;
   [cajole]   }
   [cajole] }
   [cajole] result: (ForLoop) for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]   var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]     var email = ___.readPub(guests, j);
   [cajole]     ___.setPub(contactSet, email, null);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var contacts = [ ]
   [cajole] result: (Declaration) var contacts = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contactSet
   [cajole] result: (Reference) contactSet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) x5___
   [cajole] result: (Identifier) x5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) x5___
   [cajole] result: (Reference) x5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) email = x5___
   [cajole] result: (AssignOperation) email = x5___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RegexpLiteral) /@.*/
   [cajole] result: (RegexpLiteral) /@.*/

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ''
   [cajole] result: (StringLiteral) ''

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) email
   [cajole] result: (Reference) email

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) email.replace(/@.*/, '')
   [cajole] result: (SpecialOperation) x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var name = email.replace(/@.*/, '')
   [cajole] result: (Declaration) var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) name
   [cajole] result: (Reference) name

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) name.charAt(0)
   [cajole] result: (SpecialOperation) x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) name.charAt(0).toUpperCase()
   [cajole] result: (SpecialOperation) x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) name
   [cajole] result: (Reference) name

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) name.substring(1)
   [cajole] result: (SpecialOperation) x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) name.charAt(0).toUpperCase() + name.substring(1)
   [cajole] result: (SimpleOperation) (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) name = name.charAt(0).toUpperCase() + name.substring(1)
   [cajole] result: (AssignOperation) name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) name = name.charAt(0).toUpperCase() + name.substring(1)
   [cajole] result: (ExpressionStmt) name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) email
   [cajole] result: (Reference) email

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) name
   [cajole] result: (Reference) name

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) email name
   [cajole] result: (ParseTreeNodeContainer) email name

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapNonEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole]   'description': email,
   [cajole]   'name': name
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole]   'description': email,
   [cajole]   'name': name
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) contacts.push({
   [cajole]                 'description': email,
   [cajole]                 'name': name
   [cajole]               })
   [cajole] result: (SpecialOperation) x15___ = contacts, x14___ = {
   [cajole]   'description': email,
   [cajole]   'name': name
   [cajole] }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) contacts.push({
   [cajole]                 'description': email,
   [cajole]                 'name': name
   [cajole]               })
   [cajole] result: (ExpressionStmt) x15___ = contacts, x14___ = {
   [cajole]   'description': email,
   [cajole]   'name': name
   [cajole] }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var name = email.replace(/@.*/, '');
   [cajole]   name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]   contacts.push({
   [cajole]                   'description': email,
   [cajole]                   'name': name
   [cajole]                 });
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]   name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]   x15___ = contacts, x14___ = {
   [cajole]     'description': email,
   [cajole]     'name': name
   [cajole]   }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: foreach
   [cajole] input: (ForEachLoop) for (var email in contactSet) {
   [cajole]   var name = email.replace(/@.*/, '');
   [cajole]   name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]   contacts.push({
   [cajole]                   'description': email,
   [cajole]                   'name': name
   [cajole]                 });
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x4___ = contactSet;
   [cajole]   for (x5___ in x4___) {
   [cajole]     if (___.canEnumPub(x4___, x5___)) {
   [cajole]       email = x5___;
   [cajole]       {
   [cajole]         var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]         name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]         x15___ = contacts, x14___ = {
   [cajole]           'description': email,
   [cajole]           'name': name
   [cajole]         }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'got '
   [cajole] result: (StringLiteral) 'got '

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) contacts.length
   [cajole] result: (SpecialOperation) x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'got ' + contacts.length
   [cajole] result: (SimpleOperation) 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) ' contacts'
   [cajole] result: (StringLiteral) ' contacts'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) 'got ' + contacts.length + ' contacts'
   [cajole] result: (SimpleOperation) 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.log('got ' + contacts.length + ' contacts')
   [cajole] result: (SpecialOperation) x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.log('got ' + contacts.length + ' contacts')
   [cajole] result: (ExpressionStmt) x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) a.description
   [cajole] result: (SpecialOperation) x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) a = a.description
   [cajole] result: (AssignOperation) a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) a = a.description
   [cajole] result: (ExpressionStmt) a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) b.description
   [cajole] result: (SpecialOperation) x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) b = b.description
   [cajole] result: (AssignOperation) b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) b = b.description
   [cajole] result: (ExpressionStmt) b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a === b
   [cajole] result: (SimpleOperation) a === b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return 0
   [cajole] result: (ReturnStmt) return 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return 0;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return 0;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (a === b) {
   [cajole]   return 0;
   [cajole] }
   [cajole] result: (Conditional) if (a === b) {
   [cajole]   return 0;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ME
   [cajole] result: (Reference) ME

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ME === a
   [cajole] result: (SimpleOperation) ME === a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return -1
   [cajole] result: (ReturnStmt) return -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return -1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (ME === a) {
   [cajole]   return -1;
   [cajole] }
   [cajole] result: (Conditional) if (ME === a) {
   [cajole]   return -1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) ME
   [cajole] result: (Reference) ME

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ME === b
   [cajole] result: (SimpleOperation) ME === b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return 1
   [cajole] result: (ReturnStmt) return 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   return 1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   return 1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (ME === b) {
   [cajole]   return 1;
   [cajole] }
   [cajole] result: (Conditional) if (ME === b) {
   [cajole]   return 1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) a
   [cajole] result: (Reference) a

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) b
   [cajole] result: (Reference) b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) a &lt; b
   [cajole] result: (SimpleOperation) a &lt; b

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) -1
   [cajole] result: (SimpleOperation) -1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) a &lt; b? -1: 1
   [cajole] result: (ControlOperation) a &lt; b? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ReturnStmt) return a &lt; b? -1: 1
   [cajole] result: (ReturnStmt) return a &lt; b? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) a = a.description b = b.description if (a === b) {
   [cajole]   return 0;
   [cajole] }
   [cajole] if (ME === a) {
   [cajole]   return -1;
   [cajole] }
   [cajole] if (ME === b) {
   [cajole]   return 1;
   [cajole] }
   [cajole] return a &lt; b? -1: 1
   [cajole] result: (ParseTreeNodeContainer) a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')) b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description')) if (a === b) {
   [cajole]   return 0;
   [cajole] }
   [cajole] if (ME === a) {
   [cajole]   return -1;
   [cajole] }
   [cajole] if (ME === b) {
   [cajole]   return 1;
   [cajole] }
   [cajole] return a &lt; b? -1: 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function (a, b) {
   [cajole]   a = a.description;
   [cajole]   b = b.description;
   [cajole]   if (a === b) {
   [cajole]     return 0;
   [cajole]   }
   [cajole]   if (ME === a) {
   [cajole]     return -1;
   [cajole]   }
   [cajole]   if (ME === b) {
   [cajole]     return 1;
   [cajole]   }
   [cajole]   return a &lt; b? -1: 1;
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                 b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                 if (a === b) {
   [cajole]                                   return 0;
   [cajole]                                 }
   [cajole]                                 if (ME === a) {
   [cajole]                                   return -1;
   [cajole]                                 }
   [cajole]                                 if (ME === b) {
   [cajole]                                   return 1;
   [cajole]                                 }
   [cajole]                                 return a &lt; b? -1: 1;
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) contacts.sort(function (a, b) {
   [cajole]                 a = a.description;
   [cajole]                 b = b.description;
   [cajole]                 if (a === b) {
   [cajole]                   return 0;
   [cajole]                 }
   [cajole]                 if (ME === a) {
   [cajole]                   return -1;
   [cajole]                 }
   [cajole]                 if (ME === b) {
   [cajole]                   return 1;
   [cajole]                 }
   [cajole]                 return a &lt; b? -1: 1;
   [cajole]               })
   [cajole] result: (SpecialOperation) x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                             var x0___;
   [cajole]                                                             var x1___;
   [cajole]                                                             a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                             b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                             if (a === b) {
   [cajole]                                                               return 0;
   [cajole]                                                             }
   [cajole]                                                             if (ME === a) {
   [cajole]                                                               return -1;
   [cajole]                                                             }
   [cajole]                                                             if (ME === b) {
   [cajole]                                                               return 1;
   [cajole]                                                             }
   [cajole]                                                             return a &lt; b? -1: 1;
   [cajole]                                                           })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) contacts.sort(function (a, b) {
   [cajole]                 a = a.description;
   [cajole]                 b = b.description;
   [cajole]                 if (a === b) {
   [cajole]                   return 0;
   [cajole]                 }
   [cajole]                 if (ME === a) {
   [cajole]                   return -1;
   [cajole]                 }
   [cajole]                 if (ME === b) {
   [cajole]                   return 1;
   [cajole]                 }
   [cajole]                 return a &lt; b? -1: 1;
   [cajole]               })
   [cajole] result: (ExpressionStmt) x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                             var x0___;
   [cajole]                                                             var x1___;
   [cajole]                                                             a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                             b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                             if (a === b) {
   [cajole]                                                               return 0;
   [cajole]                                                             }
   [cajole]                                                             if (ME === a) {
   [cajole]                                                               return -1;
   [cajole]                                                             }
   [cajole]                                                             if (ME === b) {
   [cajole]                                                               return 1;
   [cajole]                                                             }
   [cajole]                                                             return a &lt; b? -1: 1;
   [cajole]                                                           })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) contacts.length
   [cajole] result: (SpecialOperation) x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = contacts.length
   [cajole] result: (Declaration) var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contactSet
   [cajole] result: (Reference) contactSet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) contacts[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(contacts, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) contacts[ i ].description
   [cajole] result: (SpecialOperation) x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) contactSet[ contacts[ i ].description ] = i
   [cajole] result: (SpecialOperation) ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) contactSet[ contacts[ i ].description ] = i
   [cajole] result: (ExpressionStmt) ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   contactSet[ contacts[ i ].description ] = i;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]   contactSet[ contacts[ i ].description ] = i;
   [cajole] }
   [cajole] result: (ForLoop) for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]   ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) graph
   [cajole] result: (SpecialOperation) ___.primFreeze(graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contacts
   [cajole] result: (Reference) contacts

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) graph(contacts)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(graph))(contacts)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'base'
   [cajole] result: (StringLiteral) 'base'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('base')
   [cajole] result: (SpecialOperation) x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('base').setInnerHTML(graph(contacts))
   [cajole] result: (SpecialOperation) x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) document.getElementById('base').setInnerHTML(graph(contacts))
   [cajole] result: (ExpressionStmt) x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ArrayConstructor) [ ]
   [cajole] result: (ArrayConstructor) [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var domNodes = [ ]
   [cajole] result: (Declaration) var domNodes = [ ]

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'graph'
   [cajole] result: (StringLiteral) 'graph'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) document
   [cajole] result: (Reference) document

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) document.getElementById('graph')
   [cajole] result: (SpecialOperation) x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var graphContainer = document.getElementById('graph')
   [cajole] result: (Declaration) var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphContainer
   [cajole] result: (Reference) graphContainer

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) graphContainer.getFirstChild()
   [cajole] result: (SpecialOperation) x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var domNode = graphContainer.getFirstChild()
   [cajole] result: (Declaration) var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.getNextSibling()
   [cajole] result: (SpecialOperation) x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) domNode = domNode.getNextSibling()
   [cajole] result: (AssignOperation) domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) domNode = domNode.getNextSibling()
   [cajole] result: (ExpressionStmt) domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNode.getNodeType()
   [cajole] result: (SpecialOperation) x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) domNode.getNodeType() === 1
   [cajole] result: (SimpleOperation) (x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNode
   [cajole] result: (Reference) domNode

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNodes
   [cajole] result: (Reference) domNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) domNodes.push(domNode)
   [cajole] result: (SpecialOperation) x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) domNodes.push(domNode)
   [cajole] result: (ExpressionStmt) x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   domNodes.push(domNode);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (domNode.getNodeType() === 1) {
   [cajole]   domNodes.push(domNode);
   [cajole] }
   [cajole] result: (Conditional) if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]   x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   if (domNode.getNodeType() === 1) {
   [cajole]     domNodes.push(domNode);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]     x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]   if (domNode.getNodeType() === 1) {
   [cajole]     domNodes.push(domNode);
   [cajole]   }
   [cajole] }
   [cajole] result: (ForLoop) for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]   if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]     x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) Graph
   [cajole] result: (SpecialOperation) ___.primFreeze(Graph)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) domNodes
   [cajole] result: (Reference) domNodes

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new Graph(domNodes)
   [cajole] result: (SpecialOperation) new (___.asCtor(___.primFreeze(Graph)))(domNodes)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var springGraph = new Graph(domNodes)
   [cajole] result: (Declaration) var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (StringLiteral) 'computing edge weights'
   [cajole] result: (StringLiteral) 'computing edge weights'

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) console
   [cajole] result: (Reference) console

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) console.log('computing edge weights')
   [cajole] result: (SpecialOperation) x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) console.log('computing edge weights')
   [cajole] result: (ExpressionStmt) x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: mapEmpty
   [cajole] input: (ObjectConstructor) {
   [cajole] }
   [cajole] result: (ObjectConstructor) {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var edgeWeights = {
   [cajole] }
   [cajole] result: (Declaration) var edgeWeights = {
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) events
   [cajole] result: (Reference) events

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) events.length
   [cajole] result: (SpecialOperation) x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var i = events.length
   [cajole] result: (Declaration) var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --i
   [cajole] result: (AssignOperation) --i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --i &gt;= 0
   [cajole] result: (SimpleOperation) --i &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) events
   [cajole] result: (Reference) events

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) i
   [cajole] result: (Reference) i

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) events[ i ]
   [cajole] result: (SpecialOperation) ___.readPub(events, i)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) events[ i ].getAttendees()
   [cajole] result: (SpecialOperation) x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var guests = events[ i ].getAttendees()
   [cajole] result: (Declaration) var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) guests.length
   [cajole] result: (SpecialOperation) x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) guests.length - 1
   [cajole] result: (SimpleOperation) (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var j = guests.length - 1
   [cajole] result: (Declaration) var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --j
   [cajole] result: (AssignOperation) --j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --j &gt;= 0
   [cajole] result: (SimpleOperation) --j &gt;= 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contactSet
   [cajole] result: (Reference) contactSet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) guests[ j ]
   [cajole] result: (SpecialOperation) ___.readPub(guests, j)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) contactSet[ guests[ j ] ]
   [cajole] result: (SpecialOperation) ___.readPub(contactSet, ___.readPub(guests, j))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeIndex1 = contactSet[ guests[ j ] ]
   [cajole] result: (Declaration) var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) guests.length
   [cajole] result: (SpecialOperation) x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var k = guests.length
   [cajole] result: (Declaration) var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length'))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) --k
   [cajole] result: (AssignOperation) --k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) j
   [cajole] result: (Reference) j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) --k &gt;= j
   [cajole] result: (SimpleOperation) --k &gt;= j

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Noop) 
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) contactSet
   [cajole] result: (Reference) contactSet

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) guests
   [cajole] result: (Reference) guests

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) k
   [cajole] result: (Reference) k

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) guests[ k ]
   [cajole] result: (SpecialOperation) ___.readPub(guests, k)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) contactSet[ guests[ k ] ]
   [cajole] result: (SpecialOperation) ___.readPub(contactSet, ___.readPub(guests, k))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeIndex2 = contactSet[ guests[ k ] ]
   [cajole] result: (Declaration) var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setDeclare
   [cajole] input: (Declaration) var key
   [cajole] result: (Declaration) var key

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 &gt; nodeIndex2
   [cajole] result: (SimpleOperation) nodeIndex1 &gt; nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 16
   [cajole] result: (IntegerLiteral) 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex2 &lt;&lt; 16
   [cajole] result: (SimpleOperation) nodeIndex2 &lt;&lt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex2 &lt;&lt; 16 | nodeIndex1
   [cajole] result: (SimpleOperation) nodeIndex2 &lt;&lt; 16 | nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) key = nodeIndex2 &lt;&lt; 16 | nodeIndex1
   [cajole] result: (AssignOperation) key = nodeIndex2 &lt;&lt; 16 | nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) key = nodeIndex2 &lt;&lt; 16 | nodeIndex1
   [cajole] result: (ExpressionStmt) key = nodeIndex2 &lt;&lt; 16 | nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 16
   [cajole] result: (IntegerLiteral) 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 &lt;&lt; 16
   [cajole] result: (SimpleOperation) nodeIndex1 &lt;&lt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 &lt;&lt; 16 | nodeIndex2
   [cajole] result: (SimpleOperation) nodeIndex1 &lt;&lt; 16 | nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) key = nodeIndex1 &lt;&lt; 16 | nodeIndex2
   [cajole] result: (AssignOperation) key = nodeIndex1 &lt;&lt; 16 | nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) key = nodeIndex1 &lt;&lt; 16 | nodeIndex2
   [cajole] result: (ExpressionStmt) key = nodeIndex1 &lt;&lt; 16 | nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]   key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole] } else {
   [cajole]   key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole] }
   [cajole] result: (Conditional) if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]   key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole] } else {
   [cajole]   key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) key
   [cajole] result: (Reference) key

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) key
   [cajole] result: (Reference) key

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) edgeWeights[ key ]
   [cajole] result: (SpecialOperation) ___.readPub(edgeWeights, key)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) edgeWeights[ key ] || 0
   [cajole] result: (ControlOperation) ___.readPub(edgeWeights, key) || 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 1
   [cajole] result: (IntegerLiteral) 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (edgeWeights[ key ] || 0) + 1
   [cajole] result: (SimpleOperation) (___.readPub(edgeWeights, key) || 0) + 1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIndexPublic
   [cajole] input: (AssignOperation) edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1
   [cajole] result: (SpecialOperation) ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1
   [cajole] result: (ExpressionStmt) ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]   var key;
   [cajole]   if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]     key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]   } else {
   [cajole]     key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]   }
   [cajole]   edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]   var key;
   [cajole]   if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]     key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]   } else {
   [cajole]     key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]   }
   [cajole]   ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var k = guests.length; --k &gt;= j;) {
   [cajole]   var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]   var key;
   [cajole]   if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]     key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]   } else {
   [cajole]     key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]   }
   [cajole]   edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole] }
   [cajole] result: (ForLoop) for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]   var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]   var key;
   [cajole]   if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]     key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]   } else {
   [cajole]     key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]   }
   [cajole]   ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]   for (var k = guests.length; --k &gt;= j;) {
   [cajole]     var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]     var key;
   [cajole]     if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]       key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]     } else {
   [cajole]       key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]     }
   [cajole]     edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]   for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]     var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]     var key;
   [cajole]     if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]       key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]     } else {
   [cajole]       key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]     }
   [cajole]     ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]   var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]   for (var k = guests.length; --k &gt;= j;) {
   [cajole]     var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]     var key;
   [cajole]     if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]       key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]     } else {
   [cajole]       key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]     }
   [cajole]     edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]   }
   [cajole] }
   [cajole] result: (ForLoop) for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]   var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]   for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]     var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]     var key;
   [cajole]     if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]       key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]     } else {
   [cajole]       key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]     }
   [cajole]     ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]     for (var k = guests.length; --k &gt;= j;) {
   [cajole]       var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]     for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]       var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ForLoop) for (var i = events.length; --i &gt;= 0;) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]     for (var k = guests.length; --k &gt;= j;) {
   [cajole]       var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] result: (ForLoop) for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]   var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]     for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]       var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Identifier) x41___
   [cajole] result: (Identifier) x41___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: synthetic
   [cajole] input: (Reference) x41___
   [cajole] result: (Reference) x41___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setVar
   [cajole] input: (AssignOperation) indexPair = x41___
   [cajole] result: (AssignOperation) indexPair = x41___

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) indexPair
   [cajole] result: (Reference) indexPair

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 16
   [cajole] result: (IntegerLiteral) 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) indexPair &gt;&gt; 16
   [cajole] result: (SimpleOperation) indexPair &gt;&gt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeIndex1 = indexPair &gt;&gt; 16
   [cajole] result: (Declaration) var nodeIndex1 = indexPair &gt;&gt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) indexPair
   [cajole] result: (Reference) indexPair

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 65535
   [cajole] result: (IntegerLiteral) 65535

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) indexPair &amp; 65535
   [cajole] result: (SimpleOperation) indexPair &amp; 65535

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nodeIndex2 = indexPair &amp; 65535
   [cajole] result: (Declaration) var nodeIndex2 = indexPair &amp; 65535

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 === nodeIndex2
   [cajole] result: (SimpleOperation) nodeIndex1 === nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ContinueStmt) continue
   [cajole] result: (ContinueStmt) continue

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   continue;
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   continue;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (nodeIndex1 === nodeIndex2) {
   [cajole]   continue;
   [cajole] }
   [cajole] result: (Conditional) if (nodeIndex1 === nodeIndex2) {
   [cajole]   continue;
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 16
   [cajole] result: (IntegerLiteral) 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 &lt;&lt; 16
   [cajole] result: (SimpleOperation) nodeIndex1 &lt;&lt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex1 &lt;&lt; 16 | nodeIndex1
   [cajole] result: (SimpleOperation) nodeIndex1 &lt;&lt; 16 | nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ]
   [cajole] result: (SpecialOperation) ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ]
   [cajole] result: (Declaration) var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 16
   [cajole] result: (IntegerLiteral) 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex2 &lt;&lt; 16
   [cajole] result: (SimpleOperation) nodeIndex2 &lt;&lt; 16

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nodeIndex2 &lt;&lt; 16 | nodeIndex2
   [cajole] result: (SimpleOperation) nodeIndex2 &lt;&lt; 16 | nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ]
   [cajole] result: (SpecialOperation) ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ]
   [cajole] result: (Declaration) var count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ]
   [cajole] result: (MultiDeclaration) var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) edgeWeights
   [cajole] result: (Reference) edgeWeights

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) indexPair
   [cajole] result: (Reference) indexPair

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readIndexPublic
   [cajole] input: (SpecialOperation) edgeWeights[ indexPair ]
   [cajole] result: (SpecialOperation) ___.readPub(edgeWeights, indexPair)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 2
   [cajole] result: (IntegerLiteral) 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) edgeWeights[ indexPair ] * 2
   [cajole] result: (SimpleOperation) ___.readPub(edgeWeights, indexPair) * 2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) count1
   [cajole] result: (Reference) count1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) count2
   [cajole] result: (Reference) count2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) count1 + count2
   [cajole] result: (SimpleOperation) count1 + count2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) edgeWeights[ indexPair ] * 2 / (count1 + count2)
   [cajole] result: (SimpleOperation) ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2)
   [cajole] result: (Declaration) var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) weight
   [cajole] result: (Reference) weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex1
   [cajole] result: (Reference) nodeIndex1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nodeIndex2
   [cajole] result: (Reference) nodeIndex2

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) weight
   [cajole] result: (Reference) weight

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) springGraph
   [cajole] result: (Reference) springGraph

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) springGraph.setWeight(nodeIndex1, nodeIndex2, weight)
   [cajole] result: (SpecialOperation) x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) springGraph.setWeight(nodeIndex1, nodeIndex2, weight)
   [cajole] result: (ExpressionStmt) x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (weight) {
   [cajole]   springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole] }
   [cajole] result: (Conditional) if (weight) {
   [cajole]   x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]   var nodeIndex2 = indexPair &amp; 65535;
   [cajole]   if (nodeIndex1 === nodeIndex2) {
   [cajole]     continue;
   [cajole]   }
   [cajole]   var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]   var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]   if (weight) {
   [cajole]     springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]   var nodeIndex2 = indexPair &amp; 65535;
   [cajole]   if (nodeIndex1 === nodeIndex2) {
   [cajole]     continue;
   [cajole]   }
   [cajole]   var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]   var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]   if (weight) {
   [cajole]     x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: foreach
   [cajole] input: (ForEachLoop) for (var indexPair in edgeWeights) {
   [cajole]   var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]   var nodeIndex2 = indexPair &amp; 65535;
   [cajole]   if (nodeIndex1 === nodeIndex2) {
   [cajole]     continue;
   [cajole]   }
   [cajole]   var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]   var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]   if (weight) {
   [cajole]     springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]   }
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   x40___ = edgeWeights;
   [cajole]   for (x41___ in x40___) {
   [cajole]     if (___.canEnumPub(x40___, x41___)) {
   [cajole]       indexPair = x41___;
   [cajole]       {
   [cajole]         var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]         var nodeIndex2 = indexPair &amp; 65535;
   [cajole]         if (nodeIndex1 === nodeIndex2) {
   [cajole]           continue;
   [cajole]         }
   [cajole]         var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]         var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]         if (weight) {
   [cajole]           x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]         }
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) springGraph
   [cajole] result: (Reference) springGraph

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) springGraph.initLayout()
   [cajole] result: (SpecialOperation) x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) springGraph.initLayout()
   [cajole] result: (ExpressionStmt) x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) graphContainer
   [cajole] result: (Reference) graphContainer

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: readPublic
   [cajole] input: (SpecialOperation) graphContainer.offsetWidth
   [cajole] result: (SpecialOperation) x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 6
   [cajole] result: (IntegerLiteral) 6

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) graphContainer.offsetWidth / 6
   [cajole] result: (SimpleOperation) (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var scale = graphContainer.offsetWidth / 6
   [cajole] result: (Declaration) var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var count = 0
   [cajole] result: (Declaration) var count = 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Date
   [cajole] result: (Reference) Date

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new Date()
   [cajole] result: (SpecialOperation) new (___.asCtor(Date))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) new Date().getTime()
   [cajole] result: (SpecialOperation) x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var t = new Date().getTime()
   [cajole] result: (Declaration) var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 70
   [cajole] result: (IntegerLiteral) 70

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var MAX_STEPS = 70
   [cajole] result: (Declaration) var MAX_STEPS = 70

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 100
   [cajole] result: (IntegerLiteral) 100

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var PERIOD = 100
   [cajole] result: (Declaration) var PERIOD = 100

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: multiDeclaration
   [cajole] input: (MultiDeclaration) var MAX_STEPS = 70, PERIOD = 100
   [cajole] result: (MultiDeclaration) var MAX_STEPS = 70, PERIOD = 100

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) Date
   [cajole] result: (Reference) Date

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: newCtor
   [cajole] input: (SpecialOperation) new Date()
   [cajole] result: (SpecialOperation) new (___.asCtor(Date))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) new Date().getTime()
   [cajole] result: (SpecialOperation) x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var t1 = new Date().getTime()
   [cajole] result: (Declaration) var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) t1
   [cajole] result: (Reference) t1

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) t
   [cajole] result: (Reference) t

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) t1 - t
   [cajole] result: (SimpleOperation) t1 - t

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) PERIOD
   [cajole] result: (Reference) PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (t1 - t) / PERIOD
   [cajole] result: (SimpleOperation) (t1 - t) / PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (IntegerLiteral) 0
   [cajole] result: (IntegerLiteral) 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) (t1 - t) / PERIOD | 0
   [cajole] result: (SimpleOperation) (t1 - t) / PERIOD | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var nSteps = (t1 - t) / PERIOD | 0
   [cajole] result: (Declaration) var nSteps = (t1 - t) / PERIOD | 0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nSteps
   [cajole] result: (Reference) nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) scale
   [cajole] result: (Reference) scale

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (RealLiteral) 3.0
   [cajole] result: (RealLiteral) 3.0

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) springGraph
   [cajole] result: (Reference) springGraph

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callPublic
   [cajole] input: (SpecialOperation) springGraph.step(nSteps, scale, 3.0)
   [cajole] result: (SpecialOperation) x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ])

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setInitialize
   [cajole] input: (Declaration) var done = springGraph.step(nSteps, scale, 3.0)
   [cajole] result: (Declaration) var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ]))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) t
   [cajole] result: (Reference) t

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) nSteps
   [cajole] result: (Reference) nSteps

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) PERIOD
   [cajole] result: (Reference) PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) nSteps * PERIOD
   [cajole] result: (SimpleOperation) nSteps * PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setReadModifyWriteLocalVar
   [cajole] input: (AssignOperation) t += nSteps * PERIOD
   [cajole] result: (AssignOperation) t = t + nSteps * PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) t += nSteps * PERIOD
   [cajole] result: (ExpressionStmt) t = t + nSteps * PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) done
   [cajole] result: (Reference) done

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) !done
   [cajole] result: (SimpleOperation) !done

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) count
   [cajole] result: (Reference) count

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: setIncrDecr
   [cajole] input: (AssignOperation) ++count
   [cajole] result: (AssignOperation) ++count

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) MAX_STEPS
   [cajole] result: (Reference) MAX_STEPS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (SimpleOperation) ++count &lt; MAX_STEPS
   [cajole] result: (SimpleOperation) ++count &lt; MAX_STEPS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ControlOperation) !done &amp;&amp; ++count &lt; MAX_STEPS
   [cajole] result: (ControlOperation) !done &amp;&amp; ++count &lt; MAX_STEPS

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) setTimeout
   [cajole] result: (Reference) setTimeout

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) step
   [cajole] result: (SpecialOperation) ___.primFreeze(step)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varGlobal
   [cajole] input: (Reference) PERIOD
   [cajole] result: (Reference) PERIOD

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) setTimeout(step, PERIOD)
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) setTimeout(step, PERIOD)
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: block
   [cajole] input: (Block) {
   [cajole]   setTimeout(step, PERIOD);
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (Conditional) if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]   setTimeout(step, PERIOD);
   [cajole] }
   [cajole] result: (Conditional) if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]   ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var t1 = new Date().getTime() var nSteps = (t1 - t) / PERIOD | 0 var done = springGraph.step(nSteps, scale, 3.0) t += nSteps * PERIOD if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]   setTimeout(step, PERIOD);
   [cajole] }
   [cajole] result: (ParseTreeNodeContainer) var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ])) var nSteps = (t1 - t) / PERIOD | 0 var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ])) t = t + nSteps * PERIOD if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]   ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole] }

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcNamedSimpleDecl
   [cajole] input: (FunctionDeclaration) function step() {
   [cajole]   var t1 = new Date().getTime();
   [cajole]   var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]   var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]   t += nSteps * PERIOD;
   [cajole]   if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]     setTimeout(step, PERIOD);
   [cajole]   }
   [cajole] }
   [cajole] result: (Noop) 

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: varFuncFreeze
   [cajole] input: (Reference) step
   [cajole] result: (SpecialOperation) ___.primFreeze(step)

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) step()
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(step))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) step()
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(step))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ParseTreeNodeContainer) var calendar = getCalendar() var events = calendar.getEvents() var contactSet = {
   [cajole] }
   [cajole] for (var i = events.length; --i &gt;= 0;) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length; --j &gt;= 0;) {
   [cajole]     var email = guests[ j ];
   [cajole]     contactSet[ email ] = null;
   [cajole]   }
   [cajole] }
   [cajole] var contacts = [ ] for (var email in contactSet) {
   [cajole]   var name = email.replace(/@.*/, '');
   [cajole]   name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]   contacts.push({
   [cajole]                   'description': email,
   [cajole]                   'name': name
   [cajole]                 });
   [cajole] }
   [cajole] console.log('got ' + contacts.length + ' contacts') contacts.sort(function (a, b) {
   [cajole]                                                                     a = a.description;
   [cajole]                                                                     b = b.description;
   [cajole]                                                                     if (a === b) {
   [cajole]                                                                       return 0;
   [cajole]                                                                     }
   [cajole]                                                                     if (ME === a) {
   [cajole]                                                                       return -1;
   [cajole]                                                                     }
   [cajole]                                                                     if (ME === b) {
   [cajole]                                                                       return 1;
   [cajole]                                                                     }
   [cajole]                                                                     return a &lt; b? -1: 1;
   [cajole]                                                                   }) for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]   contactSet[ contacts[ i ].description ] = i;
   [cajole] }
   [cajole] document.getElementById('base').setInnerHTML(graph(contacts)) var domNodes = [ ] var graphContainer = document.getElementById('graph') for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]   if (domNode.getNodeType() === 1) {
   [cajole]     domNodes.push(domNode);
   [cajole]   }
   [cajole] }
   [cajole] var springGraph = new Graph(domNodes) console.log('computing edge weights') var edgeWeights = {
   [cajole] }
   [cajole] for (var i = events.length; --i &gt;= 0;) {
   [cajole]   var guests = events[ i ].getAttendees();
   [cajole]   for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]     for (var k = guests.length; --k &gt;= j;) {
   [cajole]       var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] for (var indexPair in edgeWeights) {
   [cajole]   var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]   var nodeIndex2 = indexPair &amp; 65535;
   [cajole]   if (nodeIndex1 === nodeIndex2) {
   [cajole]     continue;
   [cajole]   }
   [cajole]   var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]   var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]   if (weight) {
   [cajole]     springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]   }
   [cajole] }
   [cajole] springGraph.initLayout() var scale = graphContainer.offsetWidth / 6 var count = 0 var t = new Date().getTime() var MAX_STEPS = 70, PERIOD = 100 function step() {
   [cajole]   var t1 = new Date().getTime();
   [cajole]   var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]   var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]   t += nSteps * PERIOD;
   [cajole]   if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]     setTimeout(step, PERIOD);
   [cajole]   }
   [cajole] }
   [cajole] step()
   [cajole] result: (ParseTreeNodeContainer) var calendar = ___.asSimpleFunc(getCalendar)() var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ])) var contactSet = {
   [cajole] }
   [cajole] for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]   var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]     var email = ___.readPub(guests, j);
   [cajole]     ___.setPub(contactSet, email, null);
   [cajole]   }
   [cajole] }
   [cajole] var contacts = [ ]{
   [cajole]   x4___ = contactSet;
   [cajole]   for (x5___ in x4___) {
   [cajole]     if (___.canEnumPub(x4___, x5___)) {
   [cajole]       email = x5___;
   [cajole]       {
   [cajole]         var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]         name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]         x15___ = contacts, x14___ = {
   [cajole]           'description': email,
   [cajole]           'name': name
   [cajole]         }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ]) x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                                                                                                                                                                                                                                                              var x0___;
   [cajole]                                                                                                                                                                                                                                                                                              var x1___;
   [cajole]                                                                                                                                                                                                                                                                                              a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                                                                                                                                                                                                                                                              b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                                                                                                                                                                                                                                                              if (a === b) {
   [cajole]                                                                                                                                                                                                                                                                                                return 0;
   [cajole]                                                                                                                                                                                                                                                                                              }
   [cajole]                                                                                                                                                                                                                                                                                              if (ME === a) {
   [cajole]                                                                                                                                                                                                                                                                                                return -1;
   [cajole]                                                                                                                                                                                                                                                                                              }
   [cajole]                                                                                                                                                                                                                                                                                              if (ME === b) {
   [cajole]                                                                                                                                                                                                                                                                                                return 1;
   [cajole]                                                                                                                                                                                                                                                                                              }
   [cajole]                                                                                                                                                                                                                                                                                              return a &lt; b? -1: 1;
   [cajole]                                                                                                                                                                                                                                                                                            })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ]) for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]   ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole] }
   [cajole] x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ]) var domNodes = [ ] var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ])) for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]   if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]     x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]   }
   [cajole] }
   [cajole] var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes) x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ]) var edgeWeights = {
   [cajole] }
   [cajole] for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]   var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]   for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]     var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]     for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]       var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]       var key;
   [cajole]       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]       } else {
   [cajole]         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]       }
   [cajole]       ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] {
   [cajole]   x40___ = edgeWeights;
   [cajole]   for (x41___ in x40___) {
   [cajole]     if (___.canEnumPub(x40___, x41___)) {
   [cajole]       indexPair = x41___;
   [cajole]       {
   [cajole]         var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]         var nodeIndex2 = indexPair &amp; 65535;
   [cajole]         if (nodeIndex1 === nodeIndex2) {
   [cajole]           continue;
   [cajole]         }
   [cajole]         var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]         var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]         if (weight) {
   [cajole]           x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]         }
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole] }
   [cajole] x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ]) var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6 var count = 0 var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ])) var MAX_STEPS = 70, PERIOD = 100 ___.asSimpleFunc(___.primFreeze(step))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: funcAnonSimple
   [cajole] input: (FunctionConstructor) function () {
   [cajole]   var calendar = getCalendar();
   [cajole]   var events = calendar.getEvents();
   [cajole]   var contactSet = {
   [cajole]   };
   [cajole]   for (var i = events.length; --i &gt;= 0;) {
   [cajole]     var guests = events[ i ].getAttendees();
   [cajole]     for (var j = guests.length; --j &gt;= 0;) {
   [cajole]       var email = guests[ j ];
   [cajole]       contactSet[ email ] = null;
   [cajole]     }
   [cajole]   }
   [cajole]   var contacts = [ ];
   [cajole]   for (var email in contactSet) {
   [cajole]     var name = email.replace(/@.*/, '');
   [cajole]     name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]     contacts.push({
   [cajole]                     'description': email,
   [cajole]                     'name': name
   [cajole]                   });
   [cajole]   }
   [cajole]   console.log('got ' + contacts.length + ' contacts');
   [cajole]   contacts.sort(function (a, b) {
   [cajole]                   a = a.description;
   [cajole]                   b = b.description;
   [cajole]                   if (a === b) {
   [cajole]                     return 0;
   [cajole]                   }
   [cajole]                   if (ME === a) {
   [cajole]                     return -1;
   [cajole]                   }
   [cajole]                   if (ME === b) {
   [cajole]                     return 1;
   [cajole]                   }
   [cajole]                   return a &lt; b? -1: 1;
   [cajole]                 });
   [cajole]   for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]     contactSet[ contacts[ i ].description ] = i;
   [cajole]   }
   [cajole]   document.getElementById('base').setInnerHTML(graph(contacts));
   [cajole]   var domNodes = [ ];
   [cajole]   var graphContainer = document.getElementById('graph');
   [cajole]   for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]     if (domNode.getNodeType() === 1) {
   [cajole]       domNodes.push(domNode);
   [cajole]     }
   [cajole]   }
   [cajole]   var springGraph = new Graph(domNodes);
   [cajole]   console.log('computing edge weights');
   [cajole]   var edgeWeights = {
   [cajole]   };
   [cajole]   for (var i = events.length; --i &gt;= 0;) {
   [cajole]     var guests = events[ i ].getAttendees();
   [cajole]     for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]       var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]       for (var k = guests.length; --k &gt;= j;) {
   [cajole]         var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]         var key;
   [cajole]         if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]           key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]         } else {
   [cajole]           key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]         }
   [cajole]         edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]       }
   [cajole]     }
   [cajole]   }
   [cajole]   for (var indexPair in edgeWeights) {
   [cajole]     var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]     var nodeIndex2 = indexPair &amp; 65535;
   [cajole]     if (nodeIndex1 === nodeIndex2) {
   [cajole]       continue;
   [cajole]     }
   [cajole]     var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]     var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]     if (weight) {
   [cajole]       springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]     }
   [cajole]   }
   [cajole]   springGraph.initLayout();
   [cajole]   var scale = graphContainer.offsetWidth / 6;
   [cajole]   var count = 0;
   [cajole]   var t = new Date().getTime();
   [cajole]   var MAX_STEPS = 70, PERIOD = 100;
   [cajole]   function step() {
   [cajole]     var t1 = new Date().getTime();
   [cajole]     var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]     var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]     t += nSteps * PERIOD;
   [cajole]     if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]       setTimeout(step, PERIOD);
   [cajole]     }
   [cajole]   }
   [cajole]   step();
   [cajole] }
   [cajole] result: (SpecialOperation) ___.primFreeze(___.simpleFunc(function () {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var email;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 var x6___;
   [cajole]                                 var x7___;
   [cajole]                                 var x8___;
   [cajole]                                 var x9___;
   [cajole]                                 var x10___;
   [cajole]                                 var x11___;
   [cajole]                                 var x12___;
   [cajole]                                 var x13___;
   [cajole]                                 var x14___;
   [cajole]                                 var x15___;
   [cajole]                                 var x16___;
   [cajole]                                 var x17___;
   [cajole]                                 var x18___;
   [cajole]                                 var x19___;
   [cajole]                                 var x20___;
   [cajole]                                 var x21___;
   [cajole]                                 var x22___;
   [cajole]                                 var x23___;
   [cajole]                                 var x24___;
   [cajole]                                 var x25___;
   [cajole]                                 var x26___;
   [cajole]                                 var x27___;
   [cajole]                                 var x28___;
   [cajole]                                 var x29___;
   [cajole]                                 var x30___;
   [cajole]                                 var x31___;
   [cajole]                                 var x32___;
   [cajole]                                 var x33___;
   [cajole]                                 var x34___;
   [cajole]                                 var x35___;
   [cajole]                                 var x36___;
   [cajole]                                 var x37___;
   [cajole]                                 var x38___;
   [cajole]                                 var x39___;
   [cajole]                                 var indexPair;
   [cajole]                                 var x40___;
   [cajole]                                 var x41___;
   [cajole]                                 var x42___;
   [cajole]                                 var x43___;
   [cajole]                                 var x44___;
   [cajole]                                 var x45___;
   [cajole]                                 var x46___;
   [cajole]                                 var x47___;
   [cajole]                                 var x48___;
   [cajole]                                 var step;
   [cajole]                                 step = ___.simpleFunc(function step() {
   [cajole]                                                         var x0___;
   [cajole]                                                         var x1___;
   [cajole]                                                         var x2___;
   [cajole]                                                         var x3___;
   [cajole]                                                         var x4___;
   [cajole]                                                         var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ]));
   [cajole]                                                         var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]                                                         var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ]));
   [cajole]                                                         t = t + nSteps * PERIOD;
   [cajole]                                                         if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]                                                           ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole]                                                         }
   [cajole]                                                       });
   [cajole]                                 var calendar = ___.asSimpleFunc(getCalendar)();
   [cajole]                                 var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ]));
   [cajole]                                 var contactSet = {
   [cajole]                                 };
   [cajole]                                 for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]                                   var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]                                   for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]                                     var email = ___.readPub(guests, j);
   [cajole]                                     ___.setPub(contactSet, email, null);
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 var contacts = [ ];
   [cajole]                                 {
   [cajole]                                   x4___ = contactSet;
   [cajole]                                   for (x5___ in x4___) {
   [cajole]                                     if (___.canEnumPub(x4___, x5___)) {
   [cajole]                                       email = x5___;
   [cajole]                                       {
   [cajole]                                         var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]                                         name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]                                         x15___ = contacts, x14___ = {
   [cajole]                                           'description': email,
   [cajole]                                           'name': name
   [cajole]                                         }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]                                       }
   [cajole]                                     }
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ]);
   [cajole]                                 x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                                                             var x0___;
   [cajole]                                                                                             var x1___;
   [cajole]                                                                                             a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                                                             b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                                                             if (a === b) {
   [cajole]                                                                                               return 0;
   [cajole]                                                                                             }
   [cajole]                                                                                             if (ME === a) {
   [cajole]                                                                                               return -1;
   [cajole]                                                                                             }
   [cajole]                                                                                             if (ME === b) {
   [cajole]                                                                                               return 1;
   [cajole]                                                                                             }
   [cajole]                                                                                             return a &lt; b? -1: 1;
   [cajole]                                                                                           })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ]);
   [cajole]                                 for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]                                   ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole]                                 }
   [cajole]                                 x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ]);
   [cajole]                                 var domNodes = [ ];
   [cajole]                                 var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ]));
   [cajole]                                 for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]                                   if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]                                     x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes);
   [cajole]                                 x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ]);
   [cajole]                                 var edgeWeights = {
   [cajole]                                 };
   [cajole]                                 for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]                                   var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]                                   for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]                                     var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]                                     for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]                                       var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]                                       var key;
   [cajole]                                       if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]                                         key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]                                       } else {
   [cajole]                                         key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]                                       }
   [cajole]                                       ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]                                     }
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 {
   [cajole]                                   x40___ = edgeWeights;
   [cajole]                                   for (x41___ in x40___) {
   [cajole]                                     if (___.canEnumPub(x40___, x41___)) {
   [cajole]                                       indexPair = x41___;
   [cajole]                                       {
   [cajole]                                         var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]                                         var nodeIndex2 = indexPair &amp; 65535;
   [cajole]                                         if (nodeIndex1 === nodeIndex2) {
   [cajole]                                           continue;
   [cajole]                                         }
   [cajole]                                         var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]                                         var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]                                         if (weight) {
   [cajole]                                           x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]                                         }
   [cajole]                                       }
   [cajole]                                     }
   [cajole]                                   }
   [cajole]                                 }
   [cajole]                                 x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ]);
   [cajole]                                 var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6;
   [cajole]                                 var count = 0;
   [cajole]                                 var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ]));
   [cajole]                                 var MAX_STEPS = 70, PERIOD = 100;
   [cajole]                                 ;
   [cajole]                                 ___.asSimpleFunc(___.primFreeze(step))();
   [cajole]                               }))

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: callFunc
   [cajole] input: (SpecialOperation) (function () {
   [cajole]    var calendar = getCalendar();
   [cajole]    var events = calendar.getEvents();
   [cajole]    var contactSet = {
   [cajole]    };
   [cajole]    for (var i = events.length; --i &gt;= 0;) {
   [cajole]      var guests = events[ i ].getAttendees();
   [cajole]      for (var j = guests.length; --j &gt;= 0;) {
   [cajole]        var email = guests[ j ];
   [cajole]        contactSet[ email ] = null;
   [cajole]      }
   [cajole]    }
   [cajole]    var contacts = [ ];
   [cajole]    for (var email in contactSet) {
   [cajole]      var name = email.replace(/@.*/, '');
   [cajole]      name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]      contacts.push({
   [cajole]                      'description': email,
   [cajole]                      'name': name
   [cajole]                    });
   [cajole]    }
   [cajole]    console.log('got ' + contacts.length + ' contacts');
   [cajole]    contacts.sort(function (a, b) {
   [cajole]                    a = a.description;
   [cajole]                    b = b.description;
   [cajole]                    if (a === b) {
   [cajole]                      return 0;
   [cajole]                    }
   [cajole]                    if (ME === a) {
   [cajole]                      return -1;
   [cajole]                    }
   [cajole]                    if (ME === b) {
   [cajole]                      return 1;
   [cajole]                    }
   [cajole]                    return a &lt; b? -1: 1;
   [cajole]                  });
   [cajole]    for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]      contactSet[ contacts[ i ].description ] = i;
   [cajole]    }
   [cajole]    document.getElementById('base').setInnerHTML(graph(contacts));
   [cajole]    var domNodes = [ ];
   [cajole]    var graphContainer = document.getElementById('graph');
   [cajole]    for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]      if (domNode.getNodeType() === 1) {
   [cajole]        domNodes.push(domNode);
   [cajole]      }
   [cajole]    }
   [cajole]    var springGraph = new Graph(domNodes);
   [cajole]    console.log('computing edge weights');
   [cajole]    var edgeWeights = {
   [cajole]    };
   [cajole]    for (var i = events.length; --i &gt;= 0;) {
   [cajole]      var guests = events[ i ].getAttendees();
   [cajole]      for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]        var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]        for (var k = guests.length; --k &gt;= j;) {
   [cajole]          var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]          var key;
   [cajole]          if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]            key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]          } else {
   [cajole]            key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]          }
   [cajole]          edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]        }
   [cajole]      }
   [cajole]    }
   [cajole]    for (var indexPair in edgeWeights) {
   [cajole]      var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]      var nodeIndex2 = indexPair &amp; 65535;
   [cajole]      if (nodeIndex1 === nodeIndex2) {
   [cajole]        continue;
   [cajole]      }
   [cajole]      var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]      var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]      if (weight) {
   [cajole]        springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]      }
   [cajole]    }
   [cajole]    springGraph.initLayout();
   [cajole]    var scale = graphContainer.offsetWidth / 6;
   [cajole]    var count = 0;
   [cajole]    var t = new Date().getTime();
   [cajole]    var MAX_STEPS = 70, PERIOD = 100;
   [cajole]    function step() {
   [cajole]      var t1 = new Date().getTime();
   [cajole]      var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]      var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]      t += nSteps * PERIOD;
   [cajole]      if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]        setTimeout(step, PERIOD);
   [cajole]      }
   [cajole]    }
   [cajole]    step();
   [cajole]  })()
   [cajole] result: (SpecialOperation) ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                  var x0___;
   [cajole]                                                  var x1___;
   [cajole]                                                  var x2___;
   [cajole]                                                  var x3___;
   [cajole]                                                  var email;
   [cajole]                                                  var x4___;
   [cajole]                                                  var x5___;
   [cajole]                                                  var x6___;
   [cajole]                                                  var x7___;
   [cajole]                                                  var x8___;
   [cajole]                                                  var x9___;
   [cajole]                                                  var x10___;
   [cajole]                                                  var x11___;
   [cajole]                                                  var x12___;
   [cajole]                                                  var x13___;
   [cajole]                                                  var x14___;
   [cajole]                                                  var x15___;
   [cajole]                                                  var x16___;
   [cajole]                                                  var x17___;
   [cajole]                                                  var x18___;
   [cajole]                                                  var x19___;
   [cajole]                                                  var x20___;
   [cajole]                                                  var x21___;
   [cajole]                                                  var x22___;
   [cajole]                                                  var x23___;
   [cajole]                                                  var x24___;
   [cajole]                                                  var x25___;
   [cajole]                                                  var x26___;
   [cajole]                                                  var x27___;
   [cajole]                                                  var x28___;
   [cajole]                                                  var x29___;
   [cajole]                                                  var x30___;
   [cajole]                                                  var x31___;
   [cajole]                                                  var x32___;
   [cajole]                                                  var x33___;
   [cajole]                                                  var x34___;
   [cajole]                                                  var x35___;
   [cajole]                                                  var x36___;
   [cajole]                                                  var x37___;
   [cajole]                                                  var x38___;
   [cajole]                                                  var x39___;
   [cajole]                                                  var indexPair;
   [cajole]                                                  var x40___;
   [cajole]                                                  var x41___;
   [cajole]                                                  var x42___;
   [cajole]                                                  var x43___;
   [cajole]                                                  var x44___;
   [cajole]                                                  var x45___;
   [cajole]                                                  var x46___;
   [cajole]                                                  var x47___;
   [cajole]                                                  var x48___;
   [cajole]                                                  var step;
   [cajole]                                                  step = ___.simpleFunc(function step() {
   [cajole]                                                                          var x0___;
   [cajole]                                                                          var x1___;
   [cajole]                                                                          var x2___;
   [cajole]                                                                          var x3___;
   [cajole]                                                                          var x4___;
   [cajole]                                                                          var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ]));
   [cajole]                                                                          var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]                                                                          var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ]));
   [cajole]                                                                          t = t + nSteps * PERIOD;
   [cajole]                                                                          if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]                                                                            ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole]                                                                          }
   [cajole]                                                                        });
   [cajole]                                                  var calendar = ___.asSimpleFunc(getCalendar)();
   [cajole]                                                  var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ]));
   [cajole]                                                  var contactSet = {
   [cajole]                                                  };
   [cajole]                                                  for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]                                                    for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]                                                      var email = ___.readPub(guests, j);
   [cajole]                                                      ___.setPub(contactSet, email, null);
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  var contacts = [ ];
   [cajole]                                                  {
   [cajole]                                                    x4___ = contactSet;
   [cajole]                                                    for (x5___ in x4___) {
   [cajole]                                                      if (___.canEnumPub(x4___, x5___)) {
   [cajole]                                                        email = x5___;
   [cajole]                                                        {
   [cajole]                                                          var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]                                                          name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]                                                          x15___ = contacts, x14___ = {
   [cajole]                                                            'description': email,
   [cajole]                                                            'name': name
   [cajole]                                                          }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ]);
   [cajole]                                                  x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                                                                              var x0___;
   [cajole]                                                                                                              var x1___;
   [cajole]                                                                                                              a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                                                                              b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                                                                              if (a === b) {
   [cajole]                                                                                                                return 0;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              if (ME === a) {
   [cajole]                                                                                                                return -1;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              if (ME === b) {
   [cajole]                                                                                                                return 1;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              return a &lt; b? -1: 1;
   [cajole]                                                                                                            })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ]);
   [cajole]                                                  for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole]                                                  }
   [cajole]                                                  x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ]);
   [cajole]                                                  var domNodes = [ ];
   [cajole]                                                  var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ]));
   [cajole]                                                  for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]                                                    if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]                                                      x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes);
   [cajole]                                                  x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ]);
   [cajole]                                                  var edgeWeights = {
   [cajole]                                                  };
   [cajole]                                                  for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]                                                    for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]                                                      var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]                                                      for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]                                                        var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]                                                        var key;
   [cajole]                                                        if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]                                                          key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]                                                        } else {
   [cajole]                                                          key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]                                                        }
   [cajole]                                                        ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  {
   [cajole]                                                    x40___ = edgeWeights;
   [cajole]                                                    for (x41___ in x40___) {
   [cajole]                                                      if (___.canEnumPub(x40___, x41___)) {
   [cajole]                                                        indexPair = x41___;
   [cajole]                                                        {
   [cajole]                                                          var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]                                                          var nodeIndex2 = indexPair &amp; 65535;
   [cajole]                                                          if (nodeIndex1 === nodeIndex2) {
   [cajole]                                                            continue;
   [cajole]                                                          }
   [cajole]                                                          var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]                                                          var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]                                                          if (weight) {
   [cajole]                                                            x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]                                                          }
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ]);
   [cajole]                                                  var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6;
   [cajole]                                                  var count = 0;
   [cajole]                                                  var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ]));
   [cajole]                                                  var MAX_STEPS = 70, PERIOD = 100;
   [cajole]                                                  ;
   [cajole]                                                  ___.asSimpleFunc(___.primFreeze(step))();
   [cajole]                                                })))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: recurse
   [cajole] input: (ExpressionStmt) (function () {
   [cajole]    var calendar = getCalendar();
   [cajole]    var events = calendar.getEvents();
   [cajole]    var contactSet = {
   [cajole]    };
   [cajole]    for (var i = events.length; --i &gt;= 0;) {
   [cajole]      var guests = events[ i ].getAttendees();
   [cajole]      for (var j = guests.length; --j &gt;= 0;) {
   [cajole]        var email = guests[ j ];
   [cajole]        contactSet[ email ] = null;
   [cajole]      }
   [cajole]    }
   [cajole]    var contacts = [ ];
   [cajole]    for (var email in contactSet) {
   [cajole]      var name = email.replace(/@.*/, '');
   [cajole]      name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]      contacts.push({
   [cajole]                      'description': email,
   [cajole]                      'name': name
   [cajole]                    });
   [cajole]    }
   [cajole]    console.log('got ' + contacts.length + ' contacts');
   [cajole]    contacts.sort(function (a, b) {
   [cajole]                    a = a.description;
   [cajole]                    b = b.description;
   [cajole]                    if (a === b) {
   [cajole]                      return 0;
   [cajole]                    }
   [cajole]                    if (ME === a) {
   [cajole]                      return -1;
   [cajole]                    }
   [cajole]                    if (ME === b) {
   [cajole]                      return 1;
   [cajole]                    }
   [cajole]                    return a &lt; b? -1: 1;
   [cajole]                  });
   [cajole]    for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]      contactSet[ contacts[ i ].description ] = i;
   [cajole]    }
   [cajole]    document.getElementById('base').setInnerHTML(graph(contacts));
   [cajole]    var domNodes = [ ];
   [cajole]    var graphContainer = document.getElementById('graph');
   [cajole]    for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]      if (domNode.getNodeType() === 1) {
   [cajole]        domNodes.push(domNode);
   [cajole]      }
   [cajole]    }
   [cajole]    var springGraph = new Graph(domNodes);
   [cajole]    console.log('computing edge weights');
   [cajole]    var edgeWeights = {
   [cajole]    };
   [cajole]    for (var i = events.length; --i &gt;= 0;) {
   [cajole]      var guests = events[ i ].getAttendees();
   [cajole]      for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]        var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]        for (var k = guests.length; --k &gt;= j;) {
   [cajole]          var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]          var key;
   [cajole]          if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]            key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]          } else {
   [cajole]            key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]          }
   [cajole]          edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]        }
   [cajole]      }
   [cajole]    }
   [cajole]    for (var indexPair in edgeWeights) {
   [cajole]      var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]      var nodeIndex2 = indexPair &amp; 65535;
   [cajole]      if (nodeIndex1 === nodeIndex2) {
   [cajole]        continue;
   [cajole]      }
   [cajole]      var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]      var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]      if (weight) {
   [cajole]        springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]      }
   [cajole]    }
   [cajole]    springGraph.initLayout();
   [cajole]    var scale = graphContainer.offsetWidth / 6;
   [cajole]    var count = 0;
   [cajole]    var t = new Date().getTime();
   [cajole]    var MAX_STEPS = 70, PERIOD = 100;
   [cajole]    function step() {
   [cajole]      var t1 = new Date().getTime();
   [cajole]      var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]      var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]      t += nSteps * PERIOD;
   [cajole]      if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]        setTimeout(step, PERIOD);
   [cajole]      }
   [cajole]    }
   [cajole]    step();
   [cajole]  })()
   [cajole] result: (ExpressionStmt) ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                  var x0___;
   [cajole]                                                  var x1___;
   [cajole]                                                  var x2___;
   [cajole]                                                  var x3___;
   [cajole]                                                  var email;
   [cajole]                                                  var x4___;
   [cajole]                                                  var x5___;
   [cajole]                                                  var x6___;
   [cajole]                                                  var x7___;
   [cajole]                                                  var x8___;
   [cajole]                                                  var x9___;
   [cajole]                                                  var x10___;
   [cajole]                                                  var x11___;
   [cajole]                                                  var x12___;
   [cajole]                                                  var x13___;
   [cajole]                                                  var x14___;
   [cajole]                                                  var x15___;
   [cajole]                                                  var x16___;
   [cajole]                                                  var x17___;
   [cajole]                                                  var x18___;
   [cajole]                                                  var x19___;
   [cajole]                                                  var x20___;
   [cajole]                                                  var x21___;
   [cajole]                                                  var x22___;
   [cajole]                                                  var x23___;
   [cajole]                                                  var x24___;
   [cajole]                                                  var x25___;
   [cajole]                                                  var x26___;
   [cajole]                                                  var x27___;
   [cajole]                                                  var x28___;
   [cajole]                                                  var x29___;
   [cajole]                                                  var x30___;
   [cajole]                                                  var x31___;
   [cajole]                                                  var x32___;
   [cajole]                                                  var x33___;
   [cajole]                                                  var x34___;
   [cajole]                                                  var x35___;
   [cajole]                                                  var x36___;
   [cajole]                                                  var x37___;
   [cajole]                                                  var x38___;
   [cajole]                                                  var x39___;
   [cajole]                                                  var indexPair;
   [cajole]                                                  var x40___;
   [cajole]                                                  var x41___;
   [cajole]                                                  var x42___;
   [cajole]                                                  var x43___;
   [cajole]                                                  var x44___;
   [cajole]                                                  var x45___;
   [cajole]                                                  var x46___;
   [cajole]                                                  var x47___;
   [cajole]                                                  var x48___;
   [cajole]                                                  var step;
   [cajole]                                                  step = ___.simpleFunc(function step() {
   [cajole]                                                                          var x0___;
   [cajole]                                                                          var x1___;
   [cajole]                                                                          var x2___;
   [cajole]                                                                          var x3___;
   [cajole]                                                                          var x4___;
   [cajole]                                                                          var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ]));
   [cajole]                                                                          var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]                                                                          var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ]));
   [cajole]                                                                          t = t + nSteps * PERIOD;
   [cajole]                                                                          if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]                                                                            ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole]                                                                          }
   [cajole]                                                                        });
   [cajole]                                                  var calendar = ___.asSimpleFunc(getCalendar)();
   [cajole]                                                  var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ]));
   [cajole]                                                  var contactSet = {
   [cajole]                                                  };
   [cajole]                                                  for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]                                                    for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]                                                      var email = ___.readPub(guests, j);
   [cajole]                                                      ___.setPub(contactSet, email, null);
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  var contacts = [ ];
   [cajole]                                                  {
   [cajole]                                                    x4___ = contactSet;
   [cajole]                                                    for (x5___ in x4___) {
   [cajole]                                                      if (___.canEnumPub(x4___, x5___)) {
   [cajole]                                                        email = x5___;
   [cajole]                                                        {
   [cajole]                                                          var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]                                                          name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]                                                          x15___ = contacts, x14___ = {
   [cajole]                                                            'description': email,
   [cajole]                                                            'name': name
   [cajole]                                                          }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ]);
   [cajole]                                                  x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                                                                              var x0___;
   [cajole]                                                                                                              var x1___;
   [cajole]                                                                                                              a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                                                                              b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                                                                              if (a === b) {
   [cajole]                                                                                                                return 0;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              if (ME === a) {
   [cajole]                                                                                                                return -1;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              if (ME === b) {
   [cajole]                                                                                                                return 1;
   [cajole]                                                                                                              }
   [cajole]                                                                                                              return a &lt; b? -1: 1;
   [cajole]                                                                                                            })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ]);
   [cajole]                                                  for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole]                                                  }
   [cajole]                                                  x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ]);
   [cajole]                                                  var domNodes = [ ];
   [cajole]                                                  var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ]));
   [cajole]                                                  for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]                                                    if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]                                                      x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes);
   [cajole]                                                  x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ]);
   [cajole]                                                  var edgeWeights = {
   [cajole]                                                  };
   [cajole]                                                  for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]                                                    var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]                                                    for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]                                                      var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]                                                      for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]                                                        var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]                                                        var key;
   [cajole]                                                        if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]                                                          key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]                                                        } else {
   [cajole]                                                          key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]                                                        }
   [cajole]                                                        ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  {
   [cajole]                                                    x40___ = edgeWeights;
   [cajole]                                                    for (x41___ in x40___) {
   [cajole]                                                      if (___.canEnumPub(x40___, x41___)) {
   [cajole]                                                        indexPair = x41___;
   [cajole]                                                        {
   [cajole]                                                          var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]                                                          var nodeIndex2 = indexPair &amp; 65535;
   [cajole]                                                          if (nodeIndex1 === nodeIndex2) {
   [cajole]                                                            continue;
   [cajole]                                                          }
   [cajole]                                                          var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]                                                          var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]                                                          if (weight) {
   [cajole]                                                            x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]                                                          }
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                  }
   [cajole]                                                  x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ]);
   [cajole]                                                  var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6;
   [cajole]                                                  var count = 0;
   [cajole]                                                  var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ]));
   [cajole]                                                  var MAX_STEPS = 70, PERIOD = 100;
   [cajole]                                                  ;
   [cajole]                                                  ___.asSimpleFunc(___.primFreeze(step))();
   [cajole]                                                })))()

   [cajole] -----------------------------------------------------------------------
   [cajole] rule: module
   [cajole] input: (Block) {
   [cajole]   function graph(nodeInfo) {
   [cajole]     var out___ = [ ];
   [cajole]     c1___.call(IMPORTS___, out___, nodeInfo);
   [cajole]     return IMPORTS___.blessHtml___(out___.join(''));
   [cajole]   }
   [cajole]   var c1___ = function (out___, nodeInfo) {
   [cajole]     out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', nodeInfo[ 0 ].description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(nodeInfo[ 0 ].name.length), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(nodeInfo[ 0 ].name), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]     var c2___ = nodeInfo.slice(1);
   [cajole]     if (c2___) {
   [cajole]       for (var c3___ in c2___) {
   [cajole]         if (___.canEnumPub(c2___, c3___)) {
   [cajole]           var info = c2___[ c3___ ];
   [cajole]           out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', info.description, '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___(info.name.length), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]           var c5___ = [ ];
   [cajole]           c5___.push(info.description.replace(/@/g, ':40:'));
   [cajole]           out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___(info.name), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]         }
   [cajole]       }
   [cajole]     }
   [cajole]     out___.push('&lt;/div&gt;');
   [cajole]   };
   [cajole]   IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                       selectNode(thisNode___);
   [cajole]                                     });
   [cajole]   IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   function position(left, top, width, height) {
   [cajole]     return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px');
   [cajole]   }
   [cajole]   function Graph(nodes) {
   [cajole]     this.nodes_ = [ ];
   [cajole]     for (var i = nodes.length; --i &gt;= 0;) {
   [cajole]       this.nodes_[ i ] = {
   [cajole]         'domNode': nodes[ i ],
   [cajole]         'dx': 0,
   [cajole]         'dy': 0
   [cajole]       };
   [cajole]     }
   [cajole]     this.edges_ = [ ];
   [cajole]     for (var i = (nodes.length + 1) * (nodes.length - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]       this.edges_[ i ] = 0;
   [cajole]     }
   [cajole]   }
   [cajole]   Graph.prototype.setWeight = function (i, j, weight) {
   [cajole]     if (i !== j) {
   [cajole]       this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ] = weight;
   [cajole]     }
   [cajole]   };
   [cajole]   Graph.prototype.getWeight = function (i, j) {
   [cajole]     if (i === j) {
   [cajole]       return 0;
   [cajole]     }
   [cajole]     return this.edges_[ i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1) ];
   [cajole]   };
   [cajole]   var COEFF_FRICTION = 0.632;
   [cajole]   Graph.prototype.step = function (nSteps, scale, threshold) {
   [cajole]     if (!nSteps) {
   [cajole]       return false;
   [cajole]     }
   [cajole]     var edges = this.edges_;
   [cajole]     var nodes = this.nodes_;
   [cajole]     var nNodes = nodes.length;
   [cajole]     for (var i = nNodes; --i &gt;= 0;) {
   [cajole]       var graphNode = nodes[ i ];
   [cajole]       graphNode.dx *= COEFF_FRICTION;
   [cajole]       graphNode.dy *= COEFF_FRICTION;
   [cajole]     }
   [cajole]     for (var i = nNodes; --i &gt;= 0;) {
   [cajole]       var graphNode = nodes[ i ];
   [cajole]       var domNode = graphNode.domNode;
   [cajole]       graphNode.x = domNode.offsetLeft + (domNode.offsetWidth &gt;&gt;&gt; 1);
   [cajole]       graphNode.y = domNode.offsetTop + (domNode.offsetHeight &gt;&gt;&gt; 1);
   [cajole]     }
   [cajole]     var naturalSpringLength = scale;
   [cajole]     var kC = 30, k = 0.01;
   [cajole]     var sqrt = Math.sqrt;
   [cajole]     var e = edges.length;
   [cajole]     for (var j = nNodes; --j &gt;= 1;) {
   [cajole]       var nodeJ = nodes[ j ];
   [cajole]       var xj = nodeJ.x, yj = nodeJ.y;
   [cajole]       var ddx = 0, ddy = 0;
   [cajole]       for (var i = j; --i &gt;= 0;) {
   [cajole]         var weight = edges[ --e ];
   [cajole]         var nodeI = nodes[ i ];
   [cajole]         var sx = xj - nodeI.x, sy = yj - nodeI.y;
   [cajole]         if (!sx) {
   [cajole]           sx = i % 2? 1: -1;
   [cajole]         }
   [cajole]         if (!sy) {
   [cajole]           sy = j % 2? 1: -1;
   [cajole]         }
   [cajole]         var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]         var sSqr = sxSqr + sySqr;
   [cajole]         var s = sqrt(sSqr);
   [cajole]         var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]         var chargeForce = kC / sSqr;
   [cajole]         var force = springForce - chargeForce;
   [cajole]         var ax = 0, ay = 0;
   [cajole]         if (sxSqr) {
   [cajole]           if (sySqr) {
   [cajole]             ax = force * sqrt(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]             ay = force * sqrt(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]           } else {
   [cajole]             ax = force * (sx &lt; 0? -1: 1);
   [cajole]           }
   [cajole]         } else {
   [cajole]           ay = force * (sy &lt; 0? -1: 1);
   [cajole]         }
   [cajole]         nodeI.dx += ax;
   [cajole]         nodeI.dy += ay;
   [cajole]         ddx += ax;
   [cajole]         ddy += ay;
   [cajole]       }
   [cajole]       nodeJ.dx -= ddx;
   [cajole]       nodeJ.dy -= ddy;
   [cajole]     }
   [cajole]     var totVelSqr = 0;
   [cajole]     for (var i = nNodes; --i &gt;= 1;) {
   [cajole]       var node = nodes[ i ];
   [cajole]       var dx = node.dx, dy = node.dy;
   [cajole]       totVelSqr += dx * dx + dy * dy;
   [cajole]     }
   [cajole]     for (var i = nNodes; --i &gt;= 1;) {
   [cajole]       var graphNode = nodes[ i ];
   [cajole]       var domNode = graphNode.domNode;
   [cajole]       var width = domNode.offsetWidth, height = domNode.offsetHeight;
   [cajole]       var newStyle = position(graphNode.x + graphNode.dx * nSteps - width / 2, graphNode.y + graphNode.dy * nSteps - height / 2, width, height);
   [cajole]       domNode.setStyle(newStyle);
   [cajole]     }
   [cajole]     return ! (totVelSqr &gt;= threshold);
   [cajole]   };
   [cajole]   Graph.prototype.initLayout = function () {
   [cajole]     var nodes = this.nodes_;
   [cajole]     var nNodes = nodes.length;
   [cajole]     if (nNodes &lt; 2) {
   [cajole]       return undefined;
   [cajole]     }
   [cajole]     var anchor = nodes[ 0 ].domNode;
   [cajole]     var x0 = anchor.offsetLeft + anchor.offsetWidth / 2, y0 = anchor.offsetTop + anchor.offsetHeight / 2;
   [cajole]     var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]     var angle = 2 * Math.PI / (nNodes - 1);
   [cajole]     for (var i = nNodes; --i &gt;= 1;) {
   [cajole]       var graphNode = nodes[ i ];
   [cajole]       var domNode = graphNode.domNode;
   [cajole]       var theta = (i - 1) * angle;
   [cajole]       domNode.setStyle(position(x0 + Math.cos(theta) * xExtent, y0 - Math.sin(theta) * yExtent, domNode.offsetWidth, domNode.offsetHeight));
   [cajole]     }
   [cajole]   };
   [cajole]   var selectedNode = null;
   [cajole]   function selectNode(domNode) {
   [cajole]     if (selectedNode) {
   [cajole]       selectedNode.className = 'node';
   [cajole]     }
   [cajole]     if (domNode) {
   [cajole]       domNode.className = 'node selected';
   [cajole]       setSelectedUser(domNode.getFirstChild().getInnerHTML());
   [cajole]     }
   [cajole]     selectedNode = domNode;
   [cajole]   }
   [cajole]   (function () {
   [cajole]      var calendar = getCalendar();
   [cajole]      var events = calendar.getEvents();
   [cajole]      var contactSet = {
   [cajole]      };
   [cajole]      for (var i = events.length; --i &gt;= 0;) {
   [cajole]        var guests = events[ i ].getAttendees();
   [cajole]        for (var j = guests.length; --j &gt;= 0;) {
   [cajole]          var email = guests[ j ];
   [cajole]          contactSet[ email ] = null;
   [cajole]        }
   [cajole]      }
   [cajole]      var contacts = [ ];
   [cajole]      for (var email in contactSet) {
   [cajole]        var name = email.replace(/@.*/, '');
   [cajole]        name = name.charAt(0).toUpperCase() + name.substring(1);
   [cajole]        contacts.push({
   [cajole]                        'description': email,
   [cajole]                        'name': name
   [cajole]                      });
   [cajole]      }
   [cajole]      console.log('got ' + contacts.length + ' contacts');
   [cajole]      contacts.sort(function (a, b) {
   [cajole]                      a = a.description;
   [cajole]                      b = b.description;
   [cajole]                      if (a === b) {
   [cajole]                        return 0;
   [cajole]                      }
   [cajole]                      if (ME === a) {
   [cajole]                        return -1;
   [cajole]                      }
   [cajole]                      if (ME === b) {
   [cajole]                        return 1;
   [cajole]                      }
   [cajole]                      return a &lt; b? -1: 1;
   [cajole]                    });
   [cajole]      for (var i = contacts.length; --i &gt;= 0;) {
   [cajole]        contactSet[ contacts[ i ].description ] = i;
   [cajole]      }
   [cajole]      document.getElementById('base').setInnerHTML(graph(contacts));
   [cajole]      var domNodes = [ ];
   [cajole]      var graphContainer = document.getElementById('graph');
   [cajole]      for (var domNode = graphContainer.getFirstChild(); domNode; domNode = domNode.getNextSibling()) {
   [cajole]        if (domNode.getNodeType() === 1) {
   [cajole]          domNodes.push(domNode);
   [cajole]        }
   [cajole]      }
   [cajole]      var springGraph = new Graph(domNodes);
   [cajole]      console.log('computing edge weights');
   [cajole]      var edgeWeights = {
   [cajole]      };
   [cajole]      for (var i = events.length; --i &gt;= 0;) {
   [cajole]        var guests = events[ i ].getAttendees();
   [cajole]        for (var j = guests.length - 1; --j &gt;= 0;) {
   [cajole]          var nodeIndex1 = contactSet[ guests[ j ] ];
   [cajole]          for (var k = guests.length; --k &gt;= j;) {
   [cajole]            var nodeIndex2 = contactSet[ guests[ k ] ];
   [cajole]            var key;
   [cajole]            if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]              key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]            } else {
   [cajole]              key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]            }
   [cajole]            edgeWeights[ key ] = (edgeWeights[ key ] || 0) + 1;
   [cajole]          }
   [cajole]        }
   [cajole]      }
   [cajole]      for (var indexPair in edgeWeights) {
   [cajole]        var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]        var nodeIndex2 = indexPair &amp; 65535;
   [cajole]        if (nodeIndex1 === nodeIndex2) {
   [cajole]          continue;
   [cajole]        }
   [cajole]        var count1 = edgeWeights[ nodeIndex1 &lt;&lt; 16 | nodeIndex1 ], count2 = edgeWeights[ nodeIndex2 &lt;&lt; 16 | nodeIndex2 ];
   [cajole]        var weight = edgeWeights[ indexPair ] * 2 / (count1 + count2);
   [cajole]        if (weight) {
   [cajole]          springGraph.setWeight(nodeIndex1, nodeIndex2, weight);
   [cajole]        }
   [cajole]      }
   [cajole]      springGraph.initLayout();
   [cajole]      var scale = graphContainer.offsetWidth / 6;
   [cajole]      var count = 0;
   [cajole]      var t = new Date().getTime();
   [cajole]      var MAX_STEPS = 70, PERIOD = 100;
   [cajole]      function step() {
   [cajole]        var t1 = new Date().getTime();
   [cajole]        var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]        var done = springGraph.step(nSteps, scale, 3.0);
   [cajole]        t += nSteps * PERIOD;
   [cajole]        if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]          setTimeout(step, PERIOD);
   [cajole]        }
   [cajole]      }
   [cajole]      step();
   [cajole]    })();
   [cajole] }
   [cajole] result: (Block) {
   [cajole]   var setSelectedUser = ___.readImports(IMPORTS___, 'setSelectedUser');
   [cajole]   var graph;
   [cajole]   graph = ___.simpleFunc(function graph(nodeInfo) {
   [cajole]                            var out___ = [ ];
   [cajole]                            c1___.call(IMPORTS___, out___, nodeInfo);
   [cajole]                            return IMPORTS___.blessHtml___(out___.join(''));
   [cajole]                          });
   [cajole]   var info = ___.readImports(IMPORTS___, 'info');
   [cajole]   var nodeInfo = ___.readImports(IMPORTS___, 'nodeInfo');
   [cajole]   var position;
   [cajole]   position = ___.simpleFunc(function position(left, top, width, height) {
   [cajole]                               return IMPORTS___.blessCss___('left', IMPORTS___.cssNumber___(left | 0) + 'px', 'top', IMPORTS___.cssNumber___(top | 0) + 'px', 'width', IMPORTS___.cssNumber___(width | 0) + 'px', 'height', IMPORTS___.cssNumber___(height | 0) + 'px');
   [cajole]                             });
   [cajole]   var Graph;
   [cajole]   Graph = (function () {
   [cajole]              ___.splitCtor(Graph, Graph_init___);
   [cajole]              function Graph(var_args) {
   [cajole]                return new Graph.make___(arguments);
   [cajole]              }
   [cajole]              function Graph_init___(nodes) {
   [cajole]                var t___ = this;
   [cajole]                var x0___;
   [cajole]                var x1___;
   [cajole]                var x2___;
   [cajole]                var x3___;
   [cajole]                var x4___;
   [cajole]                x0___ = [ ], t___.nodes__canSet___? (t___.nodes_ = x0___): ___.setProp(t___, 'nodes_', x0___);
   [cajole]                for (var i = (x1___ = nodes, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]                  ___.setPub(t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_'), i,{
   [cajole]                               'domNode': ___.readPub(nodes, i),
   [cajole]                               'dx': 0,
   [cajole]                               'dy': 0
   [cajole]                             });
   [cajole]                }
   [cajole]                x2___ = [ ], t___.edges__canSet___? (t___.edges_ = x2___): ___.setProp(t___, 'edges_', x2___);
   [cajole]                for (var i = ((x3___ = nodes, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')) + 1) * ((x4___ = nodes, x4___.length_canRead___? x4___.length: ___.readPub(x4___, 'length')) - 2) / 2 + 1; --i &gt;= 0;) {
   [cajole]                  ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i, 0);
   [cajole]                }
   [cajole]              }
   [cajole]              return Graph;
   [cajole]            })();
   [cajole]   var Math = ___.readImports(IMPORTS___, 'Math');
   [cajole]   var selectNode;
   [cajole]   selectNode = ___.simpleFunc(function selectNode(domNode) {
   [cajole]                                 var x0___;
   [cajole]                                 var x1___;
   [cajole]                                 var x2___;
   [cajole]                                 var x3___;
   [cajole]                                 var x4___;
   [cajole]                                 var x5___;
   [cajole]                                 if (selectedNode) {
   [cajole]                                   x0___ = selectedNode, x1___ = 'node', x0___.className_canSet___? (x0___.className = x1___): ___.setPub(x0___, 'className', x1___);
   [cajole]                                 }
   [cajole]                                 if (domNode) {
   [cajole]                                   x2___ = domNode, x3___ = 'node selected', x2___.className_canSet___? (x2___.className = x3___): ___.setPub(x2___, 'className', x3___);
   [cajole]                                   ___.asSimpleFunc(setSelectedUser)((x4___ = (x5___ = domNode, undefined, x5___.getFirstChild_canCall___? x5___.getFirstChild(): ___.callPub(x5___, 'getFirstChild', [ ])), undefined, x4___.getInnerHTML_canCall___? x4___.getInnerHTML(): ___.callPub(x4___, 'getInnerHTML', [ ])));
   [cajole]                                 }
   [cajole]                                 selectedNode = domNode;
   [cajole]                               });
   [cajole]   var Date = ___.readImports(IMPORTS___, 'Date');
   [cajole]   var setTimeout = ___.readImports(IMPORTS___, 'setTimeout');
   [cajole]   var console = ___.readImports(IMPORTS___, 'console');
   [cajole]   var document = ___.readImports(IMPORTS___, 'document');
   [cajole]   var getCalendar = ___.readImports(IMPORTS___, 'getCalendar');
   [cajole]   var ME = ___.readImports(IMPORTS___, 'ME');
   [cajole]   ;
   [cajole]   var c1___ = ___.primFreeze(___.simpleFunc(function (out___, nodeInfo) {
   [cajole]                                               var x0___;
   [cajole]                                               var x1___;
   [cajole]                                               var x2___;
   [cajole]                                               var x3___;
   [cajole]                                               var x4___;
   [cajole]                                               var x5___;
   [cajole]                                               var x6___;
   [cajole]                                               var x7___;
   [cajole]                                               var x8___;
   [cajole]                                               var x9___;
   [cajole]                                               var x10___;
   [cajole]                                               var x11___;
   [cajole]                                               var x12___;
   [cajole]                                               var x13___;
   [cajole]                                               out___.push('&lt;div id=\&quot;graph-', IMPORTS___.getIdClass___(), '\&quot;&gt;\n\n    \n    &lt;div id=\&quot;anchor-', IMPORTS___.getIdClass___(), '\&quot; title=\&quot;', (x0___ = ___.readPub(nodeInfo, 0), x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x1___ = (x2___ = ___.readPub(nodeInfo, 0), x2___.name_canRead___? x2___.name: ___.readPub(x2___, 'name')), x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length'))), 'em\&quot;&gt;\n\n      &lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x3___ = ___.readPub(nodeInfo, 0), x3___.name_canRead___? x3___.name: ___.readPub(x3___, 'name'))), '&lt;/div&gt;\n      \n    &lt;/div&gt;');
   [cajole]                                               var c2___ = (x5___ = nodeInfo, x4___ = 1, x5___.slice_canCall___? x5___.slice(x4___): ___.callPub(x5___, 'slice', [ x4___ ]));
   [cajole]                                               if (c2___) {
   [cajole]                                                 for (var c3___ in c2___) {
   [cajole]                                                   if (___.canEnumPub(c2___, c3___)) {
   [cajole]                                                     var info = c2___[ c3___ ];
   [cajole]                                                     out___.push('&lt;div class=\&quot;node\&quot; title=\&quot;', (x6___ = info, x6___.description_canRead___? x6___.description: ___.readPub(x6___, 'description')), '\&quot; style=\&quot;width: ', IMPORTS___.cssNumber___((x7___ = (x8___ = info, x8___.name_canRead___? x8___.name: ___.readPub(x8___, 'name')), x7___.length_canRead___? x7___.length: ___.readPub(x7___, 'length'))), 'em\&quot; onclick=\&quot;', 'return plugin_dispatchEvent___(this, event || window.event, ' + ___.getId(IMPORTS___) + ', \'c4___\')', '\&quot; id=\&quot;');
   [cajole]                                                     var c5___ = [ ];
   [cajole]                                                     c5___.push((x11___ = (x12___ = info, x12___.description_canRead___? x12___.description: ___.readPub(x12___, 'description')), (x9___ = /@/g, x10___ = ':40:'), x11___.replace_canCall___? x11___.replace(x9___, x10___): ___.callPub(x11___, 'replace', [ x9___, x10___ ])));
   [cajole]                                                     out___.push(IMPORTS___.htmlAttr___(IMPORTS___.suffix___(c5___.join(''))), '\&quot;&gt;&lt;div class=\&quot;box\&quot;&gt;', IMPORTS___.html___((x13___ = info, x13___.name_canRead___? x13___.name: ___.readPub(x13___, 'name'))), '&lt;/div&gt;\n      &lt;/div&gt;');
   [cajole]                                                   }
   [cajole]                                                 }
   [cajole]                                               }
   [cajole]                                               out___.push('&lt;/div&gt;');
   [cajole]                                             }));
   [cajole]   IMPORTS___.c4___ = ___.simpleFunc(function (thisNode___, event) {
   [cajole]                                       ___.asSimpleFunc(___.primFreeze(selectNode))(thisNode___);
   [cajole]                                     });
   [cajole]   IMPORTS___.emitCss___([ '.', ' #graph-', ' {\n  width: 40em;\n  height: 30em;\n  position: relative;\n  background: #eee;\n  border: 1px solid #888\n}\n.', ' #graph-', ' .node {\n  position: absolute;\n  margin: 0 0 0 0 !important;\n  border-width: 0px !important;\n  background: #fff;\n  text-align: center\n}\n.', ' #anchor-', ' {\n  position: absolute;\n  left: 15em;\n  top: 15em\n}\n.', ' .box {\n  border: 1px solid #000;\n  height: 1.5em\n}\n.', ' .selected {\n  background: #e0e0ff !important\n}' ].join(IMPORTS___.getIdClass___()));
   [cajole]   ;
   [cajole]   ;
   [cajole]   ___.setMember(Graph, 'setWeight', ___.method(function (i, j, weight) {
   [cajole]                                                  var t___ = this;
   [cajole]                                                  if (i !== j) {
   [cajole]                                                    ___.setPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1), weight);
   [cajole]                                                  }
   [cajole]                                                }));
   [cajole]   ___.setMember(Graph, 'getWeight', ___.method(function (i, j) {
   [cajole]                                                  var t___ = this;
   [cajole]                                                  if (i === j) {
   [cajole]                                                    return 0;
   [cajole]                                                  }
   [cajole]                                                  return ___.readPub(t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_'), i &lt; j? i + (j * (j - 1) &gt;&gt; 1): j + (i * (i - 1) &gt;&gt; 1));
   [cajole]                                                }));
   [cajole]   var COEFF_FRICTION = 0.632;
   [cajole]   ___.setMember(Graph, 'step', ___.method(function (nSteps, scale, threshold) {
   [cajole]                                             var t___ = this;
   [cajole]                                             var x0___;
   [cajole]                                             var x1___;
   [cajole]                                             var x2___;
   [cajole]                                             var x3___;
   [cajole]                                             var x4___;
   [cajole]                                             var x5___;
   [cajole]                                             var x6___;
   [cajole]                                             var x7___;
   [cajole]                                             var x8___;
   [cajole]                                             var x9___;
   [cajole]                                             var x10___;
   [cajole]                                             var x11___;
   [cajole]                                             var x12___;
   [cajole]                                             var x13___;
   [cajole]                                             var x14___;
   [cajole]                                             var x15___;
   [cajole]                                             var x16___;
   [cajole]                                             var x17___;
   [cajole]                                             var x18___;
   [cajole]                                             var x19___;
   [cajole]                                             var x20___;
   [cajole]                                             var x21___;
   [cajole]                                             var x22___;
   [cajole]                                             var x23___;
   [cajole]                                             var x24___;
   [cajole]                                             var x25___;
   [cajole]                                             var x26___;
   [cajole]                                             if (!nSteps) {
   [cajole]                                               return false;
   [cajole]                                             }
   [cajole]                                             var edges = t___.edges__canRead___? t___.edges_: ___.readProp(t___, 'edges_');
   [cajole]                                             var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                             var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                             for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                               var graphNode = ___.readPub(nodes, i);
   [cajole]                                               ___.setPub(graphNode, 'dx', ___.readPub(graphNode, 'dx') * COEFF_FRICTION);
   [cajole]                                               ___.setPub(graphNode, 'dy', ___.readPub(graphNode, 'dy') * COEFF_FRICTION);
   [cajole]                                             }
   [cajole]                                             for (var i = nNodes; --i &gt;= 0;) {
   [cajole]                                               var graphNode = ___.readPub(nodes, i);
   [cajole]                                               var domNode = (x1___ = graphNode, x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                               x2___ = graphNode, x3___ = (x4___ = domNode, x4___.offsetLeft_canRead___? x4___.offsetLeft: ___.readPub(x4___, 'offsetLeft')) + ((x5___ = domNode, x5___.offsetWidth_canRead___? x5___.offsetWidth: ___.readPub(x5___, 'offsetWidth')) &gt;&gt;&gt; 1), x2___.x_canSet___? (x2___.x = x3___): ___.setPub(x2___, 'x', x3___);
   [cajole]                                               x6___ = graphNode, x7___ = (x8___ = domNode, x8___.offsetTop_canRead___? x8___.offsetTop: ___.readPub(x8___, 'offsetTop')) + ((x9___ = domNode, x9___.offsetHeight_canRead___? x9___.offsetHeight: ___.readPub(x9___, 'offsetHeight')) &gt;&gt;&gt; 1), x6___.y_canSet___? (x6___.y = x7___): ___.setPub(x6___, 'y', x7___);
   [cajole]                                             }
   [cajole]                                             var naturalSpringLength = scale;
   [cajole]                                             var kC = 30, k = 0.01;
   [cajole]                                             var sqrt = (x10___ = Math, x10___.sqrt_canRead___? x10___.sqrt: ___.readPub(x10___, 'sqrt'));
   [cajole]                                             var e = (x11___ = edges, x11___.length_canRead___? x11___.length: ___.readPub(x11___, 'length'));
   [cajole]                                             for (var j = nNodes; --j &gt;= 1;) {
   [cajole]                                               var nodeJ = ___.readPub(nodes, j);
   [cajole]                                               var xj = (x12___ = nodeJ, x12___.x_canRead___? x12___.x: ___.readPub(x12___, 'x')), yj = (x13___ = nodeJ, x13___.y_canRead___? x13___.y: ___.readPub(x13___, 'y'));
   [cajole]                                               var ddx = 0, ddy = 0;
   [cajole]                                               for (var i = j; --i &gt;= 0;) {
   [cajole]                                                 var weight = ___.readPub(edges, --e);
   [cajole]                                                 var nodeI = ___.readPub(nodes, i);
   [cajole]                                                 var sx = xj - (x14___ = nodeI, x14___.x_canRead___? x14___.x: ___.readPub(x14___, 'x')), sy = yj - (x15___ = nodeI, x15___.y_canRead___? x15___.y: ___.readPub(x15___, 'y'));
   [cajole]                                                 if (!sx) {
   [cajole]                                                   sx = i % 2? 1: -1;
   [cajole]                                                 }
   [cajole]                                                 if (!sy) {
   [cajole]                                                   sy = j % 2? 1: -1;
   [cajole]                                                 }
   [cajole]                                                 var sxSqr = sx * sx, sySqr = sy * sy;
   [cajole]                                                 var sSqr = sxSqr + sySqr;
   [cajole]                                                 var s = ___.asSimpleFunc(sqrt)(sSqr);
   [cajole]                                                 var springForce = weight &amp;&amp; (s - naturalSpringLength / weight) * k;
   [cajole]                                                 var chargeForce = kC / sSqr;
   [cajole]                                                 var force = springForce - chargeForce;
   [cajole]                                                 var ax = 0, ay = 0;
   [cajole]                                                 if (sxSqr) {
   [cajole]                                                   if (sySqr) {
   [cajole]                                                     ax = force * ___.asSimpleFunc(sqrt)(sxSqr / sSqr) * (sx &lt; 0? -1: 1);
   [cajole]                                                     ay = force * ___.asSimpleFunc(sqrt)(sySqr / sSqr) * (sy &lt; 0? -1: 1);
   [cajole]                                                   } else {
   [cajole]                                                     ax = force * (sx &lt; 0? -1: 1);
   [cajole]                                                   }
   [cajole]                                                 } else {
   [cajole]                                                   ay = force * (sy &lt; 0? -1: 1);
   [cajole]                                                 }
   [cajole]                                                 ___.setPub(nodeI, 'dx', ___.readPub(nodeI, 'dx') + ax);
   [cajole]                                                 ___.setPub(nodeI, 'dy', ___.readPub(nodeI, 'dy') + ay);
   [cajole]                                                 ddx = ddx + ax;
   [cajole]                                                 ddy = ddy + ay;
   [cajole]                                               }
   [cajole]                                               ___.setPub(nodeJ, 'dx', ___.readPub(nodeJ, 'dx') - ddx);
   [cajole]                                               ___.setPub(nodeJ, 'dy', ___.readPub(nodeJ, 'dy') - ddy);
   [cajole]                                             }
   [cajole]                                             var totVelSqr = 0;
   [cajole]                                             for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                               var node = ___.readPub(nodes, i);
   [cajole]                                               var dx = (x16___ = node, x16___.dx_canRead___? x16___.dx: ___.readPub(x16___, 'dx')), dy = (x17___ = node, x17___.dy_canRead___? x17___.dy: ___.readPub(x17___, 'dy'));
   [cajole]                                               totVelSqr = totVelSqr + (dx * dx + dy * dy);
   [cajole]                                             }
   [cajole]                                             for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                               var graphNode = ___.readPub(nodes, i);
   [cajole]                                               var domNode = (x18___ = graphNode, x18___.domNode_canRead___? x18___.domNode: ___.readPub(x18___, 'domNode'));
   [cajole]                                               var width = (x19___ = domNode, x19___.offsetWidth_canRead___? x19___.offsetWidth: ___.readPub(x19___, 'offsetWidth')), height = (x20___ = domNode, x20___.offsetHeight_canRead___? x20___.offsetHeight: ___.readPub(x20___, 'offsetHeight'));
   [cajole]                                               var newStyle = ___.asSimpleFunc(___.primFreeze(position))((x21___ = graphNode, x21___.x_canRead___? x21___.x: ___.readPub(x21___, 'x')) + (x22___ = graphNode, x22___.dx_canRead___? x22___.dx: ___.readPub(x22___, 'dx')) * nSteps - width / 2, (x23___ = graphNode, x23___.y_canRead___? x23___.y: ___.readPub(x23___, 'y')) + (x24___ = graphNode, x24___.dy_canRead___? x24___.dy: ___.readPub(x24___, 'dy')) * nSteps - height / 2, width, height);
   [cajole]                                               x26___ = domNode, x25___ = newStyle, x26___.setStyle_canCall___? x26___.setStyle(x25___): ___.callPub(x26___, 'setStyle', [ x25___ ]);
   [cajole]                                             }
   [cajole]                                             return ! (totVelSqr &gt;= threshold);
   [cajole]                                           }));
   [cajole]   ___.setMember(Graph, 'initLayout', ___.method(function () {
   [cajole]                                                   var t___ = this;
   [cajole]                                                   var x0___;
   [cajole]                                                   var x1___;
   [cajole]                                                   var x2___;
   [cajole]                                                   var x3___;
   [cajole]                                                   var x4___;
   [cajole]                                                   var x5___;
   [cajole]                                                   var x6___;
   [cajole]                                                   var x7___;
   [cajole]                                                   var x8___;
   [cajole]                                                   var x9___;
   [cajole]                                                   var x10___;
   [cajole]                                                   var x11___;
   [cajole]                                                   var x12___;
   [cajole]                                                   var x13___;
   [cajole]                                                   var x14___;
   [cajole]                                                   var x15___;
   [cajole]                                                   var nodes = t___.nodes__canRead___? t___.nodes_: ___.readProp(t___, 'nodes_');
   [cajole]                                                   var nNodes = (x0___ = nodes, x0___.length_canRead___? x0___.length: ___.readPub(x0___, 'length'));
   [cajole]                                                   if (nNodes &lt; 2) {
   [cajole]                                                     return undefined;
   [cajole]                                                   }
   [cajole]                                                   var anchor = (x1___ = ___.readPub(nodes, 0), x1___.domNode_canRead___? x1___.domNode: ___.readPub(x1___, 'domNode'));
   [cajole]                                                   var x0 = (x2___ = anchor, x2___.offsetLeft_canRead___? x2___.offsetLeft: ___.readPub(x2___, 'offsetLeft')) + (x3___ = anchor, x3___.offsetWidth_canRead___? x3___.offsetWidth: ___.readPub(x3___, 'offsetWidth')) / 2, y0 = (x4___ = anchor, x4___.offsetTop_canRead___? x4___.offsetTop: ___.readPub(x4___, 'offsetTop')) + (x5___ = anchor, x5___.offsetHeight_canRead___? x5___.offsetHeight: ___.readPub(x5___, 'offsetHeight')) / 2;
   [cajole]                                                   var xExtent = x0 * 0.8, yExtent = y0 * 0.8;
   [cajole]                                                   var angle = 2 * (x6___ = Math, x6___.PI_canRead___? x6___.PI: ___.readPub(x6___, 'PI')) / (nNodes - 1);
   [cajole]                                                   for (var i = nNodes; --i &gt;= 1;) {
   [cajole]                                                     var graphNode = ___.readPub(nodes, i);
   [cajole]                                                     var domNode = (x7___ = graphNode, x7___.domNode_canRead___? x7___.domNode: ___.readPub(x7___, 'domNode'));
   [cajole]                                                     var theta = (i - 1) * angle;
   [cajole]                                                     x15___ = domNode, x8___ = ___.asSimpleFunc(___.primFreeze(position))(x0 + (x10___ = Math, x9___ = theta, x10___.cos_canCall___? x10___.cos(x9___): ___.callPub(x10___, 'cos', [ x9___ ])) * xExtent, y0 - (x12___ = Math, x11___ = theta, x12___.sin_canCall___? x12___.sin(x11___): ___.callPub(x12___, 'sin', [ x11___ ])) * yExtent, (x13___ = domNode, x13___.offsetWidth_canRead___? x13___.offsetWidth: ___.readPub(x13___, 'offsetWidth')), (x14___ = domNode, x14___.offsetHeight_canRead___? x14___.offsetHeight: ___.readPub(x14___, 'offsetHeight'))), x15___.setStyle_canCall___? x15___.setStyle(x8___): ___.callPub(x15___, 'setStyle', [ x8___ ]);
   [cajole]                                                   }
   [cajole]                                                 }));
   [cajole]   var selectedNode = null;
   [cajole]   ;
   [cajole]   ___.asSimpleFunc(___.primFreeze(___.simpleFunc(function () {
   [cajole]                                                    var x0___;
   [cajole]                                                    var x1___;
   [cajole]                                                    var x2___;
   [cajole]                                                    var x3___;
   [cajole]                                                    var email;
   [cajole]                                                    var x4___;
   [cajole]                                                    var x5___;
   [cajole]                                                    var x6___;
   [cajole]                                                    var x7___;
   [cajole]                                                    var x8___;
   [cajole]                                                    var x9___;
   [cajole]                                                    var x10___;
   [cajole]                                                    var x11___;
   [cajole]                                                    var x12___;
   [cajole]                                                    var x13___;
   [cajole]                                                    var x14___;
   [cajole]                                                    var x15___;
   [cajole]                                                    var x16___;
   [cajole]                                                    var x17___;
   [cajole]                                                    var x18___;
   [cajole]                                                    var x19___;
   [cajole]                                                    var x20___;
   [cajole]                                                    var x21___;
   [cajole]                                                    var x22___;
   [cajole]                                                    var x23___;
   [cajole]                                                    var x24___;
   [cajole]                                                    var x25___;
   [cajole]                                                    var x26___;
   [cajole]                                                    var x27___;
   [cajole]                                                    var x28___;
   [cajole]                                                    var x29___;
   [cajole]                                                    var x30___;
   [cajole]                                                    var x31___;
   [cajole]                                                    var x32___;
   [cajole]                                                    var x33___;
   [cajole]                                                    var x34___;
   [cajole]                                                    var x35___;
   [cajole]                                                    var x36___;
   [cajole]                                                    var x37___;
   [cajole]                                                    var x38___;
   [cajole]                                                    var x39___;
   [cajole]                                                    var indexPair;
   [cajole]                                                    var x40___;
   [cajole]                                                    var x41___;
   [cajole]                                                    var x42___;
   [cajole]                                                    var x43___;
   [cajole]                                                    var x44___;
   [cajole]                                                    var x45___;
   [cajole]                                                    var x46___;
   [cajole]                                                    var x47___;
   [cajole]                                                    var x48___;
   [cajole]                                                    var step;
   [cajole]                                                    step = ___.simpleFunc(function step() {
   [cajole]                                                                            var x0___;
   [cajole]                                                                            var x1___;
   [cajole]                                                                            var x2___;
   [cajole]                                                                            var x3___;
   [cajole]                                                                            var x4___;
   [cajole]                                                                            var t1 = (x0___ = new (___.asCtor(Date))(), undefined, x0___.getTime_canCall___? x0___.getTime(): ___.callPub(x0___, 'getTime', [ ]));
   [cajole]                                                                            var nSteps = (t1 - t) / PERIOD | 0;
   [cajole]                                                                            var done = (x4___ = springGraph, (x1___ = nSteps, x2___ = scale, x3___ = 3.0), x4___.step_canCall___? x4___.step(x1___, x2___, x3___): ___.callPub(x4___, 'step', [ x1___, x2___, x3___ ]));
   [cajole]                                                                            t = t + nSteps * PERIOD;
   [cajole]                                                                            if (!done &amp;&amp; ++count &lt; MAX_STEPS) {
   [cajole]                                                                              ___.asSimpleFunc(setTimeout)(___.primFreeze(step), PERIOD);
   [cajole]                                                                            }
   [cajole]                                                                          });
   [cajole]                                                    var calendar = ___.asSimpleFunc(getCalendar)();
   [cajole]                                                    var events = (x0___ = calendar, undefined, x0___.getEvents_canCall___? x0___.getEvents(): ___.callPub(x0___, 'getEvents', [ ]));
   [cajole]                                                    var contactSet = {
   [cajole]                                                    };
   [cajole]                                                    for (var i = (x1___ = events, x1___.length_canRead___? x1___.length: ___.readPub(x1___, 'length')); --i &gt;= 0;) {
   [cajole]                                                      var guests = (x2___ = ___.readPub(events, i), undefined, x2___.getAttendees_canCall___? x2___.getAttendees(): ___.callPub(x2___, 'getAttendees', [ ]));
   [cajole]                                                      for (var j = (x3___ = guests, x3___.length_canRead___? x3___.length: ___.readPub(x3___, 'length')); --j &gt;= 0;) {
   [cajole]                                                        var email = ___.readPub(guests, j);
   [cajole]                                                        ___.setPub(contactSet, email, null);
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                    var contacts = [ ];
   [cajole]                                                    {
   [cajole]                                                      x4___ = contactSet;
   [cajole]                                                      for (x5___ in x4___) {
   [cajole]                                                        if (___.canEnumPub(x4___, x5___)) {
   [cajole]                                                          email = x5___;
   [cajole]                                                          {
   [cajole]                                                            var name = (x8___ = email, (x6___ = /@.*/, x7___ = ''), x8___.replace_canCall___? x8___.replace(x6___, x7___): ___.callPub(x8___, 'replace', [ x6___, x7___ ]));
   [cajole]                                                            name = (x9___ = (x11___ = name, x10___ = 0, x11___.charAt_canCall___? x11___.charAt(x10___): ___.callPub(x11___, 'charAt', [ x10___ ])), undefined, x9___.toUpperCase_canCall___? x9___.toUpperCase(): ___.callPub(x9___, 'toUpperCase', [ ])) + (x13___ = name, x12___ = 1, x13___.substring_canCall___? x13___.substring(x12___): ___.callPub(x13___, 'substring', [ x12___ ]));
   [cajole]                                                            x15___ = contacts, x14___ = {
   [cajole]                                                              'description': email,
   [cajole]                                                              'name': name
   [cajole]                                                            }, x15___.push_canCall___? x15___.push(x14___): ___.callPub(x15___, 'push', [ x14___ ]);
   [cajole]                                                          }
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                    x18___ = console, x16___ = 'got ' + (x17___ = contacts, x17___.length_canRead___? x17___.length: ___.readPub(x17___, 'length')) + ' contacts', x18___.log_canCall___? x18___.log(x16___): ___.callPub(x18___, 'log', [ x16___ ]);
   [cajole]                                                    x20___ = contacts, x19___ = ___.primFreeze(___.simpleFunc(function (a, b) {
   [cajole]                                                                                                                var x0___;
   [cajole]                                                                                                                var x1___;
   [cajole]                                                                                                                a = (x0___ = a, x0___.description_canRead___? x0___.description: ___.readPub(x0___, 'description'));
   [cajole]                                                                                                                b = (x1___ = b, x1___.description_canRead___? x1___.description: ___.readPub(x1___, 'description'));
   [cajole]                                                                                                                if (a === b) {
   [cajole]                                                                                                                  return 0;
   [cajole]                                                                                                                }
   [cajole]                                                                                                                if (ME === a) {
   [cajole]                                                                                                                  return -1;
   [cajole]                                                                                                                }
   [cajole]                                                                                                                if (ME === b) {
   [cajole]                                                                                                                  return 1;
   [cajole]                                                                                                                }
   [cajole]                                                                                                                return a &lt; b? -1: 1;
   [cajole]                                                                                                              })), x20___.sort_canCall___? x20___.sort(x19___): ___.callPub(x20___, 'sort', [ x19___ ]);
   [cajole]                                                    for (var i = (x21___ = contacts, x21___.length_canRead___? x21___.length: ___.readPub(x21___, 'length')); --i &gt;= 0;) {
   [cajole]                                                      ___.setPub(contactSet, (x22___ = ___.readPub(contacts, i), x22___.description_canRead___? x22___.description: ___.readPub(x22___, 'description')), i);
   [cajole]                                                    }
   [cajole]                                                    x24___ = (x26___ = document, x25___ = 'base', x26___.getElementById_canCall___? x26___.getElementById(x25___): ___.callPub(x26___, 'getElementById', [ x25___ ])), x23___ = ___.asSimpleFunc(___.primFreeze(graph))(contacts), x24___.setInnerHTML_canCall___? x24___.setInnerHTML(x23___): ___.callPub(x24___, 'setInnerHTML', [ x23___ ]);
   [cajole]                                                    var domNodes = [ ];
   [cajole]                                                    var graphContainer = (x28___ = document, x27___ = 'graph', x28___.getElementById_canCall___? x28___.getElementById(x27___): ___.callPub(x28___, 'getElementById', [ x27___ ]));
   [cajole]                                                    for (var domNode = (x29___ = graphContainer, undefined, x29___.getFirstChild_canCall___? x29___.getFirstChild(): ___.callPub(x29___, 'getFirstChild', [ ])); domNode; domNode = (x30___ = domNode, undefined, x30___.getNextSibling_canCall___? x30___.getNextSibling(): ___.callPub(x30___, 'getNextSibling', [ ]))) {
   [cajole]                                                      if ((x31___ = domNode, undefined, x31___.getNodeType_canCall___? x31___.getNodeType(): ___.callPub(x31___, 'getNodeType', [ ])) === 1) {
   [cajole]                                                        x33___ = domNodes, x32___ = domNode, x33___.push_canCall___? x33___.push(x32___): ___.callPub(x33___, 'push', [ x32___ ]);
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                    var springGraph = new (___.asCtor(___.primFreeze(Graph)))(domNodes);
   [cajole]                                                    x35___ = console, x34___ = 'computing edge weights', x35___.log_canCall___? x35___.log(x34___): ___.callPub(x35___, 'log', [ x34___ ]);
   [cajole]                                                    var edgeWeights = {
   [cajole]                                                    };
   [cajole]                                                    for (var i = (x36___ = events, x36___.length_canRead___? x36___.length: ___.readPub(x36___, 'length')); --i &gt;= 0;) {
   [cajole]                                                      var guests = (x37___ = ___.readPub(events, i), undefined, x37___.getAttendees_canCall___? x37___.getAttendees(): ___.callPub(x37___, 'getAttendees', [ ]));
   [cajole]                                                      for (var j = (x38___ = guests, x38___.length_canRead___? x38___.length: ___.readPub(x38___, 'length')) - 1; --j &gt;= 0;) {
   [cajole]                                                        var nodeIndex1 = ___.readPub(contactSet, ___.readPub(guests, j));
   [cajole]                                                        for (var k = (x39___ = guests, x39___.length_canRead___? x39___.length: ___.readPub(x39___, 'length')); --k &gt;= j;) {
   [cajole]                                                          var nodeIndex2 = ___.readPub(contactSet, ___.readPub(guests, k));
   [cajole]                                                          var key;
   [cajole]                                                          if (nodeIndex1 &gt; nodeIndex2) {
   [cajole]                                                            key = nodeIndex2 &lt;&lt; 16 | nodeIndex1;
   [cajole]                                                          } else {
   [cajole]                                                            key = nodeIndex1 &lt;&lt; 16 | nodeIndex2;
   [cajole]                                                          }
   [cajole]                                                          ___.setPub(edgeWeights, key, (___.readPub(edgeWeights, key) || 0) + 1);
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                    {
   [cajole]                                                      x40___ = edgeWeights;
   [cajole]                                                      for (x41___ in x40___) {
   [cajole]                                                        if (___.canEnumPub(x40___, x41___)) {
   [cajole]                                                          indexPair = x41___;
   [cajole]                                                          {
   [cajole]                                                            var nodeIndex1 = indexPair &gt;&gt; 16;
   [cajole]                                                            var nodeIndex2 = indexPair &amp; 65535;
   [cajole]                                                            if (nodeIndex1 === nodeIndex2) {
   [cajole]                                                              continue;
   [cajole]                                                            }
   [cajole]                                                            var count1 = ___.readPub(edgeWeights, nodeIndex1 &lt;&lt; 16 | nodeIndex1), count2 = ___.readPub(edgeWeights, nodeIndex2 &lt;&lt; 16 | nodeIndex2);
   [cajole]                                                            var weight = ___.readPub(edgeWeights, indexPair) * 2 / (count1 + count2);
   [cajole]                                                            if (weight) {
   [cajole]                                                              x45___ = springGraph, (x42___ = nodeIndex1, x43___ = nodeIndex2, x44___ = weight), x45___.setWeight_canCall___? x45___.setWeight(x42___, x43___, x44___): ___.callPub(x45___, 'setWeight', [ x42___, x43___, x44___ ]);
   [cajole]                                                            }
   [cajole]                                                          }
   [cajole]                                                        }
   [cajole]                                                      }
   [cajole]                                                    }
   [cajole]                                                    x46___ = springGraph, undefined, x46___.initLayout_canCall___? x46___.initLayout(): ___.callPub(x46___, 'initLayout', [ ]);
   [cajole]                                                    var scale = (x47___ = graphContainer, x47___.offsetWidth_canRead___? x47___.offsetWidth: ___.readPub(x47___, 'offsetWidth')) / 6;
   [cajole]                                                    var count = 0;
   [cajole]                                                    var t = (x48___ = new (___.asCtor(Date))(), undefined, x48___.getTime_canCall___? x48___.getTime(): ___.callPub(x48___, 'getTime', [ ]));
   [cajole]                                                    var MAX_STEPS = 70, PERIOD = 100;
   [cajole]                                                    ;
   [cajole]                                                    ___.asSimpleFunc(___.primFreeze(step))();
   [cajole]                                                  })))();
   [cajole] }

     [copy] Copying 5 files to /opt/svn/google-caja/src/ant-www/contact-spring-graph

testbed:
    [javac] Compiling 1 source file to /opt/svn/google-caja/src/ant-lib
      [jar] Building jar: /opt/svn/google-caja/src/ant-jars/testbed.jar
    [mkdir] Created dir: /opt/svn/google-caja/src/ant-www/testbed
     [copy] Copying 10 files to /opt/svn/google-caja/src/ant-www/testbed

demos:

dirs:

Primitives:

Reporting:

Lexer:

ParserCore:

CssParser:

HtmlParser:

JsParser:

Quasiliterals:

Rendering:

Config:

Schemas:

PluginCompiler:

build.info:

pluginc:

testbed:
      [jar] Building jar: /opt/svn/google-caja/src/ant-jars/testbed.jar

BUILD SUCCESSFUL
Total time: 9 seconds
</log>
</target>
<varz name="target.demos.status" value="1"/>
<varz name="target.demos.time" value="9"/>
<output name="docs" href="docs/index.html"/>
<output name="tests" href="tests/index.html"/>
<output name="coverage" href="coverage/index.html"/>
<output name="demos" href="demos/"/>
<output name="snapshot" href="snapshot/"/>
</report>

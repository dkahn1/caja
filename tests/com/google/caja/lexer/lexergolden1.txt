COMM [// a file to test the javascript lexer]: lexertest1.js:1+1@1 - 39@39
KEYW [var]: lexertest1.js:3+1@41 - 4@44
WORD [i]: lexertest1.js:3+5@45 - 6@46
PUNC [=]: lexertest1.js:3+7@47 - 8@48
INTE [1]: lexertest1.js:3+9@49 - 10@50
PUNC [+]: lexertest1.js:3+11@51 - 12@52
INTE [1]: lexertest1.js:3+13@53 - 14@54
PUNC [;]: lexertest1.js:3+14@54 - 15@55
WORD [i]: lexertest1.js:4+1@56 - 2@57
PUNC [=]: lexertest1.js:4+3@58 - 4@59
INTE [1]: lexertest1.js:4+5@60 - 6@61
PUNC [+]: lexertest1.js:4+6@61 - 7@62
INTE [1]: lexertest1.js:4+7@62 - 8@63
PUNC [;]: lexertest1.js:4+8@63 - 9@64
WORD [i]: lexertest1.js:5+1@65 - 2@66
PUNC [=]: lexertest1.js:5+3@67 - 4@68
INTE [1]: lexertest1.js:5+5@69 - 6@70
PUNC [+]: lexertest1.js:5+7@71 - 8@72
INTE [1]: lexertest1.js:5+8@72 - 9@73
PUNC [;]: lexertest1.js:5+9@73 - 10@74
WORD [i]: lexertest1.js:6+1@77 - 2@78
PUNC [=]: lexertest1.js:6+3@79 - 4@80
INTE [1]: lexertest1.js:6+5@81 - 6@82
PUNC [+]: lexertest1.js:6+6@82 - 7@83
PUNC [-]: lexertest1.js:6+7@83 - 8@84
INTE [1]: lexertest1.js:6+8@84 - 9@85
PUNC [;]: lexertest1.js:6+9@85 - 10@86
WORD [i]: lexertest1.js:7+1@87 - 2@88
PUNC [=]: lexertest1.js:7+3@89 - 4@90
INTE [1]: lexertest1.js:7+5@91 - 6@92
PUNC [-]: lexertest1.js:7+7@93 - 8@94
PUNC [-]: lexertest1.js:7+9@95 - 10@96
INTE [1]: lexertest1.js:7+10@96 - 11@97
PUNC [;]: lexertest1.js:7+11@97 - 12@98
STRI ['a string constant']: lexertest1.js:9+1@100 - 20@119
PUNC [;]: lexertest1.js:9+20@119 - 21@120
WORD [s]: lexertest1.js:10+1@121 - 2@122
PUNC [=]: lexertest1.js:10+3@123 - 4@124
STRI ['a string that spans multiple physical lines but not logical ones']: lexertest1.js:10+5@125 - 12+22@195
PUNC [;]: lexertest1.js:12+22@195 - 23@196
STRI ['a string with "double quotes" inside and ']: lexertest1.js:13+1@197 - 44@240
PUNC [+]: lexertest1.js:13+45@241 - 46@242
STRI ['a string with an escaped \' inside']: lexertest1.js:14+1@243 - 37@279
PUNC [;]: lexertest1.js:14+37@279 - 38@280
PUNC [{]: lexertest1.js:15+1@281 - 2@282
STRI ['a string with multiple escaped \\characters\' inside']: lexertest1.js:15+2@282 - 56@336
PUNC [}]: lexertest1.js:15+56@336 - 57@337
PUNC [;]: lexertest1.js:15+57@337 - 58@338
KEYW [var]: lexertest1.js:16+1@339 - 4@342
WORD [s]: lexertest1.js:16+5@343 - 6@344
PUNC [=]: lexertest1.js:16+7@345 - 8@346
STRI ["double quotes work inside strings too.pretty well actually"]: lexertest1.js:16+9@347 - 17+22@409
PUNC [;]: lexertest1.js:17+22@409 - 23@410
COMM [// a line comment that oddly spans multiple physical lines]: lexertest1.js:19+1@412 - 20+30@472
COMM [/* multiline comments have
   no need for such silliness */]: lexertest1.js:22+1@474 - 23+33@533
COMM [/*/ try and confuse the lexer
    with a star-slash before
    the end of the comment.
 */]: lexertest1.js:25+1@535 - 28+4@625
COMM [/* comments can have embedded "strings" */]: lexertest1.js:30+1@627 - 43@669
STRI ["and /*vice-versa*/ "]: lexertest1.js:31+1@670 - 22@691
WORD [we]: lexertest1.js:33+1@693 - 3@695
PUNC [(]: lexertest1.js:33+3@695 - 4@696
WORD [need]: lexertest1.js:33+4@696 - 8@700
PUNC [-]: lexertest1.js:33+9@701 - 10@702
WORD [to]: lexertest1.js:33+11@703 - 13@705
PUNC [+]: lexertest1.js:33+14@706 - 15@707
PUNC [{]: lexertest1.js:33+16@708 - 17@709
PUNC [{]: lexertest1.js:33+17@709 - 18@710
PUNC [{]: lexertest1.js:33+18@710 - 19@711
WORD [test]: lexertest1.js:33+19@711 - 23@715
WORD [punctuation]: lexertest1.js:33+24@716 - 35@727
WORD [thoroughly]: lexertest1.js:33+36@728 - 46@738
PUNC [}]: lexertest1.js:33+46@738 - 47@739
PUNC [}]: lexertest1.js:33+47@739 - 48@740
PUNC [}]: lexertest1.js:33+48@740 - 49@741
PUNC [)]: lexertest1.js:33+49@741 - 50@742
PUNC [;]: lexertest1.js:33+50@742 - 51@743
WORD [left]: lexertest1.js:35+1@745 - 5@749
PUNC [<<=]: lexertest1.js:35+6@750 - 9@753
WORD [shift_amount]: lexertest1.js:35+10@754 - 22@766
PUNC [;]: lexertest1.js:35+22@766 - 23@767
FLOA [14.0005e-6]: lexertest1.js:37+1@769 - 11@779
WORD [is]: lexertest1.js:37+12@780 - 14@782
WORD [one]: lexertest1.js:37+15@783 - 18@786
WORD [token]: lexertest1.js:37+19@787 - 24@792
PUNC [?]: lexertest1.js:37+24@792 - 25@793
COMM [// check that exponentials with signs extracted properly during splitting]: lexertest1.js:39+1@795 - 74@868
KEYW [var]: lexertest1.js:40+1@869 - 4@872
WORD [num]: lexertest1.js:40+5@873 - 8@876
PUNC [=]: lexertest1.js:40+9@877 - 10@878
INTE [1000]: lexertest1.js:40+11@879 - 15@883
PUNC [-]: lexertest1.js:40+15@883 - 16@884
FLOA [1e+2]: lexertest1.js:40+16@884 - 20@888
PUNC [*]: lexertest1.js:40+20@888 - 21@889
INTE [2]: lexertest1.js:40+21@889 - 22@890
PUNC [;]: lexertest1.js:40+22@890 - 23@891
COMM [// check that dotted identifiers split, but decimal numbers not.]: lexertest1.js:42+1@893 - 65@957
WORD [foo]: lexertest1.js:43+1@958 - 4@961
PUNC [.]: lexertest1.js:43+4@961 - 5@962
WORD [bar]: lexertest1.js:43+5@962 - 8@965
PUNC [=]: lexertest1.js:43+9@966 - 10@967
FLOA [4.0]: lexertest1.js:43+11@968 - 14@971
PUNC [;]: lexertest1.js:43+14@971 - 15@972
WORD [foo2]: lexertest1.js:44+1@973 - 5@977
PUNC [.]: lexertest1.js:44+5@977 - 6@978
WORD [bar]: lexertest1.js:44+6@978 - 9@981
PUNC [=]: lexertest1.js:44+10@982 - 11@983
WORD [baz]: lexertest1.js:44+12@984 - 15@987
PUNC [;]: lexertest1.js:44+15@987 - 16@988
FLOA [.5]: lexertest1.js:46+1@990 - 3@992
COMM [// a numeric token]: lexertest1.js:46+5@994 - 23@1012
COMM [// test how line continuations affect punctuation]: lexertest1.js:48+1@1014 - 50@1063
INTE [1]: lexertest1.js:49+1@1064 - 2@1065
PUNC [+]: lexertest1.js:49+2@1065 - 3@1066
PUNC [+]: lexertest1.js:50+1@1068 - 2@1069
INTE [2]: lexertest1.js:50+2@1069 - 3@1070
PUNC [;]: lexertest1.js:50+3@1070 - 4@1071
COMM [// should parse as 1 + + 2, not 1 ++ 2;]: lexertest1.js:51+1@1072 - 40@1111
WORD [foo]: lexertest1.js:52+1@1112 - 4@1115
WORD [bar]: lexertest1.js:53+1@1117 - 4@1120
PUNC [;]: lexertest1.js:53+4@1120 - 5@1121
WORD [elipsis]: lexertest1.js:55+1@1123 - 8@1130
PUNC [...]: lexertest1.js:55+8@1130 - 11@1133
PUNC [;]: lexertest1.js:55+11@1133 - 12@1134
COMM [/* and extending the example at line 30 " interleaved */]: lexertest1.js:57+1@1136 - 57@1192
STRI [" */"]: lexertest1.js:57+58@1193 - 58+2@1200
WORD [also]: lexertest1.js:58+2@1200 - 6@1204
COMM [/* " /* */]: lexertest1.js:58+7@1205 - 17@1215
COMM [// Backslashes in character sets do not end regexs.]: lexertest1.js:60+1@1217 - 52@1268
WORD [r]: lexertest1.js:61+1@1269 - 2@1270
PUNC [=]: lexertest1.js:61+3@1271 - 4@1272
REGE [/./]: lexertest1.js:61+5@1273 - 8@1276
PUNC [,]: lexertest1.js:61+8@1276 - 9@1277
REGE [/\//]: lexertest1.js:61+10@1278 - 14@1282
PUNC [,]: lexertest1.js:61+14@1282 - 15@1283
REGE [/[/]/]: lexertest1.js:61+16@1284 - 21@1289
PUNC [,]: lexertest1.js:61+21@1289 - 22@1290
REGE [/[\/]\//]: lexertest1.js:61+23@1291 - 31@1299
WORD [isNaN]: lexertest1.js:63+1@1301 - 6@1306
PUNC [(]: lexertest1.js:63+6@1306 - 7@1307
WORD [NaN]: lexertest1.js:63+7@1307 - 10@1310
PUNC [)]: lexertest1.js:63+10@1310 - 11@1311
PUNC [;]: lexertest1.js:63+11@1311 - 12@1312
COMM [// leave some whitespace at the end of this file  ]: lexertest1.js:65+1@1314 - 51@1364

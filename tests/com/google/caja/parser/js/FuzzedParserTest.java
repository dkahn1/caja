// Copyright (C) 2008 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.caja.parser.js;

import com.google.caja.lexer.ParseException;
import com.google.caja.util.CajaTestCase;

/**
 * Tests that parser next returns exceptions other than ParseException
 * @author jasvir@gmail.com (Jasvir Nagra)
 *
 * TODO(jasvir): These tests were generated by the fuzzer - distill them to
 * the simplest cases that broke the parser
 */
public class FuzzedParserTest extends CajaTestCase {

  public void testParse1 () {
    throwsParseException(
      "if(++(({y:5, toString: function() { return this; } }))) {" +
      "switch((+[<><x><y/></x></> for each (x in this)])) { " +
      "case ([window, this] = x%=0.1): var x = *; case <y><z/></y>: ; }" +
      "<y><z/></y>; const this; } else  if ( /* Comment */" +
      "new (x = [[]])(({y:5, toString: function() { return this; } }).@*)) " +
      "{(<y><z/></y>);*; }"
    );
  }

  //java.lang.IllegalArgumentException: BooleanLiteral : false not an lvalue
  public void testParse2 () {
    throwsParseException(
      "for(var x in ((/a/gi)(window.x))){do {gc } while(0);" +
      "if( /x/  != false--) { /x/g" +
      "x;continue M; } else /*noex infloop*/for(x; y; <y><z/></y>) {(-3/0); } }"
    );
  }

  //SpecialOperation : FUNCTION_CALL not an lvalue
  public void testParse3 () {
    throwsParseException(
      "with({x: ([Math.sin])})L:switch(((new (true)()++).__iterator"
    );
  }

  //ObjectConstructor not an lvalue
  public void testParse4 () {
    throwsParseException(
      "/* HOISTY2 */for(let [x, x] = ({})-- in <x><y/></x>) {gc()th"
    );
  }

  //SpecialOperation : FUNCTION_CALL not an lvalue
  public void testParse305 () {
    throwsParseException(
        "L: for ([x, x] in [15,16,17,18].filter(/a/gi, undefined)++) {throw StopIteration; }"
    );
  }

  //BooleanLiteral : true not an lvalue
  public void testParse690 () {
    throwsParseException(
        "if((let (x=3,y=4) (true++))) {return; } else  if ( /* Comment */this) import x.*;"
    );
  }

  //SpecialOperation : FUNCTION_CALL not an lvalue
  public void testParse692 () {
    throwsParseException(
        "L:if([15,16,17,18].some(x = y, let (x = 3) ++<><x><y/></x></>)) {return; } else  if (<x/>) gc()"
    );
  }

  //NullLiteral : null not an lvalue
  public void testParse564 () {
    throwsParseException(
        "/* HOISTY1 */M:for(var x = ({y:5, valueOf: eval(\"x\", null--)}) in <y><z/></y>.x ? ([11,12,13,14].filter) : NaN+=\"\" ) 1e-81; const window;"
    );
  }

  // Should not throw null
  public void testParse477 () {
    throwsParseException(
        "/*infloop*/do while( \"\" );"
    );
  }

  // Should parse correctly
  public void testParse478 () {
    throwsParseException(
        "do while(true); while(true);"
    );
  }

  private void throwsParseException(String fuzzString) {
    try {
      parseString(fuzzString);
    } catch (ParseException e) {
      // ParseException thrown - parser worked
      return;
    } catch (Throwable e) {
      // any other kind of exception means the parser broke
      e.printStackTrace();
      fail();
    }
  }

  private void parseString(String fuzzString) throws ParseException {
    js(fromString(fuzzString));
  }
}
